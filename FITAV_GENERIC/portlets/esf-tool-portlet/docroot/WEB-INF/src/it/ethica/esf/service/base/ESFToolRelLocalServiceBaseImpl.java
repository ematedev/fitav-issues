/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.ethica.esf.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.liferay.portlet.asset.service.persistence.AssetEntryPersistence;
import com.liferay.portlet.asset.service.persistence.AssetLinkPersistence;

import it.ethica.esf.model.ESFToolRel;
import it.ethica.esf.service.ESFToolRelLocalService;
import it.ethica.esf.service.persistence.ESFToolPersistence;
import it.ethica.esf.service.persistence.ESFToolRelPK;
import it.ethica.esf.service.persistence.ESFToolRelPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the e s f tool rel local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link it.ethica.esf.service.impl.ESFToolRelLocalServiceImpl}.
 * </p>
 *
 * @author Ethica
 * @see it.ethica.esf.service.impl.ESFToolRelLocalServiceImpl
 * @see it.ethica.esf.service.ESFToolRelLocalServiceUtil
 * @generated
 */
public abstract class ESFToolRelLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements ESFToolRelLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link it.ethica.esf.service.ESFToolRelLocalServiceUtil} to access the e s f tool rel local service.
	 */

	/**
	 * Adds the e s f tool rel to the database. Also notifies the appropriate model listeners.
	 *
	 * @param esfToolRel the e s f tool rel
	 * @return the e s f tool rel that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ESFToolRel addESFToolRel(ESFToolRel esfToolRel)
		throws SystemException {
		esfToolRel.setNew(true);

		return esfToolRelPersistence.update(esfToolRel);
	}

	/**
	 * Creates a new e s f tool rel with the primary key. Does not add the e s f tool rel to the database.
	 *
	 * @param esfToolRelPK the primary key for the new e s f tool rel
	 * @return the new e s f tool rel
	 */
	@Override
	public ESFToolRel createESFToolRel(ESFToolRelPK esfToolRelPK) {
		return esfToolRelPersistence.create(esfToolRelPK);
	}

	/**
	 * Deletes the e s f tool rel with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param esfToolRelPK the primary key of the e s f tool rel
	 * @return the e s f tool rel that was removed
	 * @throws PortalException if a e s f tool rel with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ESFToolRel deleteESFToolRel(ESFToolRelPK esfToolRelPK)
		throws PortalException, SystemException {
		return esfToolRelPersistence.remove(esfToolRelPK);
	}

	/**
	 * Deletes the e s f tool rel from the database. Also notifies the appropriate model listeners.
	 *
	 * @param esfToolRel the e s f tool rel
	 * @return the e s f tool rel that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ESFToolRel deleteESFToolRel(ESFToolRel esfToolRel)
		throws SystemException {
		return esfToolRelPersistence.remove(esfToolRel);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(ESFToolRel.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return esfToolRelPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link it.ethica.esf.model.impl.ESFToolRelModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return esfToolRelPersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link it.ethica.esf.model.impl.ESFToolRelModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return esfToolRelPersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return esfToolRelPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return esfToolRelPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public ESFToolRel fetchESFToolRel(ESFToolRelPK esfToolRelPK)
		throws SystemException {
		return esfToolRelPersistence.fetchByPrimaryKey(esfToolRelPK);
	}

	/**
	 * Returns the e s f tool rel with the matching UUID and company.
	 *
	 * @param uuid the e s f tool rel's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching e s f tool rel, or <code>null</code> if a matching e s f tool rel could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public ESFToolRel fetchESFToolRelByUuidAndCompanyId(String uuid,
		long companyId) throws SystemException {
		return esfToolRelPersistence.fetchByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns the e s f tool rel matching the UUID and group.
	 *
	 * @param uuid the e s f tool rel's UUID
	 * @param groupId the primary key of the group
	 * @return the matching e s f tool rel, or <code>null</code> if a matching e s f tool rel could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public ESFToolRel fetchESFToolRelByUuidAndGroupId(String uuid, long groupId)
		throws SystemException {
		return esfToolRelPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the e s f tool rel with the primary key.
	 *
	 * @param esfToolRelPK the primary key of the e s f tool rel
	 * @return the e s f tool rel
	 * @throws PortalException if a e s f tool rel with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public ESFToolRel getESFToolRel(ESFToolRelPK esfToolRelPK)
		throws PortalException, SystemException {
		return esfToolRelPersistence.findByPrimaryKey(esfToolRelPK);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return esfToolRelPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the e s f tool rel with the matching UUID and company.
	 *
	 * @param uuid the e s f tool rel's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching e s f tool rel
	 * @throws PortalException if a matching e s f tool rel could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public ESFToolRel getESFToolRelByUuidAndCompanyId(String uuid,
		long companyId) throws PortalException, SystemException {
		return esfToolRelPersistence.findByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns the e s f tool rel matching the UUID and group.
	 *
	 * @param uuid the e s f tool rel's UUID
	 * @param groupId the primary key of the group
	 * @return the matching e s f tool rel
	 * @throws PortalException if a matching e s f tool rel could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public ESFToolRel getESFToolRelByUuidAndGroupId(String uuid, long groupId)
		throws PortalException, SystemException {
		return esfToolRelPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the e s f tool rels.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link it.ethica.esf.model.impl.ESFToolRelModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of e s f tool rels
	 * @param end the upper bound of the range of e s f tool rels (not inclusive)
	 * @return the range of e s f tool rels
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<ESFToolRel> getESFToolRels(int start, int end)
		throws SystemException {
		return esfToolRelPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of e s f tool rels.
	 *
	 * @return the number of e s f tool rels
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getESFToolRelsCount() throws SystemException {
		return esfToolRelPersistence.countAll();
	}

	/**
	 * Updates the e s f tool rel in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param esfToolRel the e s f tool rel
	 * @return the e s f tool rel that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ESFToolRel updateESFToolRel(ESFToolRel esfToolRel)
		throws SystemException {
		return esfToolRelPersistence.update(esfToolRel);
	}

	/**
	 * Returns the e s f tool local service.
	 *
	 * @return the e s f tool local service
	 */
	public it.ethica.esf.service.ESFToolLocalService getESFToolLocalService() {
		return esfToolLocalService;
	}

	/**
	 * Sets the e s f tool local service.
	 *
	 * @param esfToolLocalService the e s f tool local service
	 */
	public void setESFToolLocalService(
		it.ethica.esf.service.ESFToolLocalService esfToolLocalService) {
		this.esfToolLocalService = esfToolLocalService;
	}

	/**
	 * Returns the e s f tool persistence.
	 *
	 * @return the e s f tool persistence
	 */
	public ESFToolPersistence getESFToolPersistence() {
		return esfToolPersistence;
	}

	/**
	 * Sets the e s f tool persistence.
	 *
	 * @param esfToolPersistence the e s f tool persistence
	 */
	public void setESFToolPersistence(ESFToolPersistence esfToolPersistence) {
		this.esfToolPersistence = esfToolPersistence;
	}

	/**
	 * Returns the e s f tool rel local service.
	 *
	 * @return the e s f tool rel local service
	 */
	public it.ethica.esf.service.ESFToolRelLocalService getESFToolRelLocalService() {
		return esfToolRelLocalService;
	}

	/**
	 * Sets the e s f tool rel local service.
	 *
	 * @param esfToolRelLocalService the e s f tool rel local service
	 */
	public void setESFToolRelLocalService(
		it.ethica.esf.service.ESFToolRelLocalService esfToolRelLocalService) {
		this.esfToolRelLocalService = esfToolRelLocalService;
	}

	/**
	 * Returns the e s f tool rel persistence.
	 *
	 * @return the e s f tool rel persistence
	 */
	public ESFToolRelPersistence getESFToolRelPersistence() {
		return esfToolRelPersistence;
	}

	/**
	 * Sets the e s f tool rel persistence.
	 *
	 * @param esfToolRelPersistence the e s f tool rel persistence
	 */
	public void setESFToolRelPersistence(
		ESFToolRelPersistence esfToolRelPersistence) {
		this.esfToolRelPersistence = esfToolRelPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	/**
	 * Returns the asset entry local service.
	 *
	 * @return the asset entry local service
	 */
	public com.liferay.portlet.asset.service.AssetEntryLocalService getAssetEntryLocalService() {
		return assetEntryLocalService;
	}

	/**
	 * Sets the asset entry local service.
	 *
	 * @param assetEntryLocalService the asset entry local service
	 */
	public void setAssetEntryLocalService(
		com.liferay.portlet.asset.service.AssetEntryLocalService assetEntryLocalService) {
		this.assetEntryLocalService = assetEntryLocalService;
	}

	/**
	 * Returns the asset entry remote service.
	 *
	 * @return the asset entry remote service
	 */
	public com.liferay.portlet.asset.service.AssetEntryService getAssetEntryService() {
		return assetEntryService;
	}

	/**
	 * Sets the asset entry remote service.
	 *
	 * @param assetEntryService the asset entry remote service
	 */
	public void setAssetEntryService(
		com.liferay.portlet.asset.service.AssetEntryService assetEntryService) {
		this.assetEntryService = assetEntryService;
	}

	/**
	 * Returns the asset entry persistence.
	 *
	 * @return the asset entry persistence
	 */
	public AssetEntryPersistence getAssetEntryPersistence() {
		return assetEntryPersistence;
	}

	/**
	 * Sets the asset entry persistence.
	 *
	 * @param assetEntryPersistence the asset entry persistence
	 */
	public void setAssetEntryPersistence(
		AssetEntryPersistence assetEntryPersistence) {
		this.assetEntryPersistence = assetEntryPersistence;
	}

	/**
	 * Returns the asset link local service.
	 *
	 * @return the asset link local service
	 */
	public com.liferay.portlet.asset.service.AssetLinkLocalService getAssetLinkLocalService() {
		return assetLinkLocalService;
	}

	/**
	 * Sets the asset link local service.
	 *
	 * @param assetLinkLocalService the asset link local service
	 */
	public void setAssetLinkLocalService(
		com.liferay.portlet.asset.service.AssetLinkLocalService assetLinkLocalService) {
		this.assetLinkLocalService = assetLinkLocalService;
	}

	/**
	 * Returns the asset link persistence.
	 *
	 * @return the asset link persistence
	 */
	public AssetLinkPersistence getAssetLinkPersistence() {
		return assetLinkPersistence;
	}

	/**
	 * Sets the asset link persistence.
	 *
	 * @param assetLinkPersistence the asset link persistence
	 */
	public void setAssetLinkPersistence(
		AssetLinkPersistence assetLinkPersistence) {
		this.assetLinkPersistence = assetLinkPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("it.ethica.esf.model.ESFToolRel",
			esfToolRelLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"it.ethica.esf.model.ESFToolRel");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return ESFToolRel.class;
	}

	protected String getModelClassName() {
		return ESFToolRel.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = esfToolRelPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = it.ethica.esf.service.ESFToolLocalService.class)
	protected it.ethica.esf.service.ESFToolLocalService esfToolLocalService;
	@BeanReference(type = ESFToolPersistence.class)
	protected ESFToolPersistence esfToolPersistence;
	@BeanReference(type = it.ethica.esf.service.ESFToolRelLocalService.class)
	protected it.ethica.esf.service.ESFToolRelLocalService esfToolRelLocalService;
	@BeanReference(type = ESFToolRelPersistence.class)
	protected ESFToolRelPersistence esfToolRelPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@BeanReference(type = com.liferay.portlet.asset.service.AssetEntryLocalService.class)
	protected com.liferay.portlet.asset.service.AssetEntryLocalService assetEntryLocalService;
	@BeanReference(type = com.liferay.portlet.asset.service.AssetEntryService.class)
	protected com.liferay.portlet.asset.service.AssetEntryService assetEntryService;
	@BeanReference(type = AssetEntryPersistence.class)
	protected AssetEntryPersistence assetEntryPersistence;
	@BeanReference(type = com.liferay.portlet.asset.service.AssetLinkLocalService.class)
	protected com.liferay.portlet.asset.service.AssetLinkLocalService assetLinkLocalService;
	@BeanReference(type = AssetLinkPersistence.class)
	protected AssetLinkPersistence assetLinkPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private ESFToolRelLocalServiceClpInvoker _clpInvoker = new ESFToolRelLocalServiceClpInvoker();
}
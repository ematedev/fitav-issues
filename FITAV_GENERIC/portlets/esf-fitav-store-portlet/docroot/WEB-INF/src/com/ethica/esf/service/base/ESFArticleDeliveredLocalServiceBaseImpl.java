/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ethica.esf.service.base;

import com.ethica.esf.model.ESFArticleDelivered;
import com.ethica.esf.service.ESFArticleDeliveredLocalService;
import com.ethica.esf.service.persistence.ESFArticleDeliveredPersistence;
import com.ethica.esf.service.persistence.ESFArticlePersistence;
import com.ethica.esf.service.persistence.ESFArticleTypePersistence;
import com.ethica.esf.service.persistence.ESFOrderPersistence;
import com.ethica.esf.service.persistence.ESFStockistPersistence;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the e s f article delivered local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.ethica.esf.service.impl.ESFArticleDeliveredLocalServiceImpl}.
 * </p>
 *
 * @author Ethica
 * @see com.ethica.esf.service.impl.ESFArticleDeliveredLocalServiceImpl
 * @see com.ethica.esf.service.ESFArticleDeliveredLocalServiceUtil
 * @generated
 */
public abstract class ESFArticleDeliveredLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements ESFArticleDeliveredLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.ethica.esf.service.ESFArticleDeliveredLocalServiceUtil} to access the e s f article delivered local service.
	 */

	/**
	 * Adds the e s f article delivered to the database. Also notifies the appropriate model listeners.
	 *
	 * @param esfArticleDelivered the e s f article delivered
	 * @return the e s f article delivered that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ESFArticleDelivered addESFArticleDelivered(
		ESFArticleDelivered esfArticleDelivered) throws SystemException {
		esfArticleDelivered.setNew(true);

		return esfArticleDeliveredPersistence.update(esfArticleDelivered);
	}

	/**
	 * Creates a new e s f article delivered with the primary key. Does not add the e s f article delivered to the database.
	 *
	 * @param esfArticleDeliveredId the primary key for the new e s f article delivered
	 * @return the new e s f article delivered
	 */
	@Override
	public ESFArticleDelivered createESFArticleDelivered(
		long esfArticleDeliveredId) {
		return esfArticleDeliveredPersistence.create(esfArticleDeliveredId);
	}

	/**
	 * Deletes the e s f article delivered with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param esfArticleDeliveredId the primary key of the e s f article delivered
	 * @return the e s f article delivered that was removed
	 * @throws PortalException if a e s f article delivered with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ESFArticleDelivered deleteESFArticleDelivered(
		long esfArticleDeliveredId) throws PortalException, SystemException {
		return esfArticleDeliveredPersistence.remove(esfArticleDeliveredId);
	}

	/**
	 * Deletes the e s f article delivered from the database. Also notifies the appropriate model listeners.
	 *
	 * @param esfArticleDelivered the e s f article delivered
	 * @return the e s f article delivered that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ESFArticleDelivered deleteESFArticleDelivered(
		ESFArticleDelivered esfArticleDelivered) throws SystemException {
		return esfArticleDeliveredPersistence.remove(esfArticleDelivered);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(ESFArticleDelivered.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return esfArticleDeliveredPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.ethica.esf.model.impl.ESFArticleDeliveredModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return esfArticleDeliveredPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.ethica.esf.model.impl.ESFArticleDeliveredModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return esfArticleDeliveredPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return esfArticleDeliveredPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return esfArticleDeliveredPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public ESFArticleDelivered fetchESFArticleDelivered(
		long esfArticleDeliveredId) throws SystemException {
		return esfArticleDeliveredPersistence.fetchByPrimaryKey(esfArticleDeliveredId);
	}

	/**
	 * Returns the e s f article delivered with the primary key.
	 *
	 * @param esfArticleDeliveredId the primary key of the e s f article delivered
	 * @return the e s f article delivered
	 * @throws PortalException if a e s f article delivered with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public ESFArticleDelivered getESFArticleDelivered(
		long esfArticleDeliveredId) throws PortalException, SystemException {
		return esfArticleDeliveredPersistence.findByPrimaryKey(esfArticleDeliveredId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return esfArticleDeliveredPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the e s f article delivereds.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.ethica.esf.model.impl.ESFArticleDeliveredModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of e s f article delivereds
	 * @param end the upper bound of the range of e s f article delivereds (not inclusive)
	 * @return the range of e s f article delivereds
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<ESFArticleDelivered> getESFArticleDelivereds(int start, int end)
		throws SystemException {
		return esfArticleDeliveredPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of e s f article delivereds.
	 *
	 * @return the number of e s f article delivereds
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getESFArticleDeliveredsCount() throws SystemException {
		return esfArticleDeliveredPersistence.countAll();
	}

	/**
	 * Updates the e s f article delivered in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param esfArticleDelivered the e s f article delivered
	 * @return the e s f article delivered that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ESFArticleDelivered updateESFArticleDelivered(
		ESFArticleDelivered esfArticleDelivered) throws SystemException {
		return esfArticleDeliveredPersistence.update(esfArticleDelivered);
	}

	/**
	 * Returns the e s f article local service.
	 *
	 * @return the e s f article local service
	 */
	public com.ethica.esf.service.ESFArticleLocalService getESFArticleLocalService() {
		return esfArticleLocalService;
	}

	/**
	 * Sets the e s f article local service.
	 *
	 * @param esfArticleLocalService the e s f article local service
	 */
	public void setESFArticleLocalService(
		com.ethica.esf.service.ESFArticleLocalService esfArticleLocalService) {
		this.esfArticleLocalService = esfArticleLocalService;
	}

	/**
	 * Returns the e s f article persistence.
	 *
	 * @return the e s f article persistence
	 */
	public ESFArticlePersistence getESFArticlePersistence() {
		return esfArticlePersistence;
	}

	/**
	 * Sets the e s f article persistence.
	 *
	 * @param esfArticlePersistence the e s f article persistence
	 */
	public void setESFArticlePersistence(
		ESFArticlePersistence esfArticlePersistence) {
		this.esfArticlePersistence = esfArticlePersistence;
	}

	/**
	 * Returns the e s f article delivered local service.
	 *
	 * @return the e s f article delivered local service
	 */
	public com.ethica.esf.service.ESFArticleDeliveredLocalService getESFArticleDeliveredLocalService() {
		return esfArticleDeliveredLocalService;
	}

	/**
	 * Sets the e s f article delivered local service.
	 *
	 * @param esfArticleDeliveredLocalService the e s f article delivered local service
	 */
	public void setESFArticleDeliveredLocalService(
		com.ethica.esf.service.ESFArticleDeliveredLocalService esfArticleDeliveredLocalService) {
		this.esfArticleDeliveredLocalService = esfArticleDeliveredLocalService;
	}

	/**
	 * Returns the e s f article delivered persistence.
	 *
	 * @return the e s f article delivered persistence
	 */
	public ESFArticleDeliveredPersistence getESFArticleDeliveredPersistence() {
		return esfArticleDeliveredPersistence;
	}

	/**
	 * Sets the e s f article delivered persistence.
	 *
	 * @param esfArticleDeliveredPersistence the e s f article delivered persistence
	 */
	public void setESFArticleDeliveredPersistence(
		ESFArticleDeliveredPersistence esfArticleDeliveredPersistence) {
		this.esfArticleDeliveredPersistence = esfArticleDeliveredPersistence;
	}

	/**
	 * Returns the e s f article type local service.
	 *
	 * @return the e s f article type local service
	 */
	public com.ethica.esf.service.ESFArticleTypeLocalService getESFArticleTypeLocalService() {
		return esfArticleTypeLocalService;
	}

	/**
	 * Sets the e s f article type local service.
	 *
	 * @param esfArticleTypeLocalService the e s f article type local service
	 */
	public void setESFArticleTypeLocalService(
		com.ethica.esf.service.ESFArticleTypeLocalService esfArticleTypeLocalService) {
		this.esfArticleTypeLocalService = esfArticleTypeLocalService;
	}

	/**
	 * Returns the e s f article type persistence.
	 *
	 * @return the e s f article type persistence
	 */
	public ESFArticleTypePersistence getESFArticleTypePersistence() {
		return esfArticleTypePersistence;
	}

	/**
	 * Sets the e s f article type persistence.
	 *
	 * @param esfArticleTypePersistence the e s f article type persistence
	 */
	public void setESFArticleTypePersistence(
		ESFArticleTypePersistence esfArticleTypePersistence) {
		this.esfArticleTypePersistence = esfArticleTypePersistence;
	}

	/**
	 * Returns the e s f order local service.
	 *
	 * @return the e s f order local service
	 */
	public com.ethica.esf.service.ESFOrderLocalService getESFOrderLocalService() {
		return esfOrderLocalService;
	}

	/**
	 * Sets the e s f order local service.
	 *
	 * @param esfOrderLocalService the e s f order local service
	 */
	public void setESFOrderLocalService(
		com.ethica.esf.service.ESFOrderLocalService esfOrderLocalService) {
		this.esfOrderLocalService = esfOrderLocalService;
	}

	/**
	 * Returns the e s f order persistence.
	 *
	 * @return the e s f order persistence
	 */
	public ESFOrderPersistence getESFOrderPersistence() {
		return esfOrderPersistence;
	}

	/**
	 * Sets the e s f order persistence.
	 *
	 * @param esfOrderPersistence the e s f order persistence
	 */
	public void setESFOrderPersistence(ESFOrderPersistence esfOrderPersistence) {
		this.esfOrderPersistence = esfOrderPersistence;
	}

	/**
	 * Returns the e s f stockist local service.
	 *
	 * @return the e s f stockist local service
	 */
	public com.ethica.esf.service.ESFStockistLocalService getESFStockistLocalService() {
		return esfStockistLocalService;
	}

	/**
	 * Sets the e s f stockist local service.
	 *
	 * @param esfStockistLocalService the e s f stockist local service
	 */
	public void setESFStockistLocalService(
		com.ethica.esf.service.ESFStockistLocalService esfStockistLocalService) {
		this.esfStockistLocalService = esfStockistLocalService;
	}

	/**
	 * Returns the e s f stockist persistence.
	 *
	 * @return the e s f stockist persistence
	 */
	public ESFStockistPersistence getESFStockistPersistence() {
		return esfStockistPersistence;
	}

	/**
	 * Sets the e s f stockist persistence.
	 *
	 * @param esfStockistPersistence the e s f stockist persistence
	 */
	public void setESFStockistPersistence(
		ESFStockistPersistence esfStockistPersistence) {
		this.esfStockistPersistence = esfStockistPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.ethica.esf.model.ESFArticleDelivered",
			esfArticleDeliveredLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.ethica.esf.model.ESFArticleDelivered");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return ESFArticleDelivered.class;
	}

	protected String getModelClassName() {
		return ESFArticleDelivered.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = esfArticleDeliveredPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.ethica.esf.service.ESFArticleLocalService.class)
	protected com.ethica.esf.service.ESFArticleLocalService esfArticleLocalService;
	@BeanReference(type = ESFArticlePersistence.class)
	protected ESFArticlePersistence esfArticlePersistence;
	@BeanReference(type = com.ethica.esf.service.ESFArticleDeliveredLocalService.class)
	protected com.ethica.esf.service.ESFArticleDeliveredLocalService esfArticleDeliveredLocalService;
	@BeanReference(type = ESFArticleDeliveredPersistence.class)
	protected ESFArticleDeliveredPersistence esfArticleDeliveredPersistence;
	@BeanReference(type = com.ethica.esf.service.ESFArticleTypeLocalService.class)
	protected com.ethica.esf.service.ESFArticleTypeLocalService esfArticleTypeLocalService;
	@BeanReference(type = ESFArticleTypePersistence.class)
	protected ESFArticleTypePersistence esfArticleTypePersistence;
	@BeanReference(type = com.ethica.esf.service.ESFOrderLocalService.class)
	protected com.ethica.esf.service.ESFOrderLocalService esfOrderLocalService;
	@BeanReference(type = ESFOrderPersistence.class)
	protected ESFOrderPersistence esfOrderPersistence;
	@BeanReference(type = com.ethica.esf.service.ESFStockistLocalService.class)
	protected com.ethica.esf.service.ESFStockistLocalService esfStockistLocalService;
	@BeanReference(type = ESFStockistPersistence.class)
	protected ESFStockistPersistence esfStockistPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private ESFArticleDeliveredLocalServiceClpInvoker _clpInvoker = new ESFArticleDeliveredLocalServiceClpInvoker();
}
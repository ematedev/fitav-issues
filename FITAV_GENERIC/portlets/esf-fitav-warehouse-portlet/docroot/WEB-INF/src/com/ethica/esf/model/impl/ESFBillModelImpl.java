/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ethica.esf.model.impl;

import com.ethica.esf.model.ESFBill;
import com.ethica.esf.model.ESFBillModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ESFBill service. Represents a row in the &quot;ESFBill&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ethica.esf.model.ESFBillModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ESFBillImpl}.
 * </p>
 *
 * @author Ethica
 * @see ESFBillImpl
 * @see com.ethica.esf.model.ESFBill
 * @see com.ethica.esf.model.ESFBillModel
 * @generated
 */
public class ESFBillModelImpl extends BaseModelImpl<ESFBill>
	implements ESFBillModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a e s f bill model instance should use the {@link com.ethica.esf.model.ESFBill} interface instead.
	 */
	public static final String TABLE_NAME = "ESFBill";
	public static final Object[][] TABLE_COLUMNS = {
			{ "esfBillId", Types.BIGINT },
			{ "esfArticleId", Types.BIGINT },
			{ "esfOrderId", Types.BIGINT },
			{ "billNumber", Types.VARCHAR },
			{ "xxxlQty", Types.BIGINT },
			{ "xxlQty", Types.BIGINT },
			{ "xlQty", Types.BIGINT },
			{ "lQty", Types.BIGINT },
			{ "mQty", Types.BIGINT },
			{ "sQty", Types.BIGINT },
			{ "xsQty", Types.BIGINT },
			{ "xxsQty", Types.BIGINT },
			{ "otherQty", Types.BIGINT },
			{ "totalQty", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table ESFBill (esfBillId LONG not null primary key,esfArticleId LONG,esfOrderId LONG,billNumber VARCHAR(75) null,xxxlQty LONG,xxlQty LONG,xlQty LONG,lQty LONG,mQty LONG,sQty LONG,xsQty LONG,xxsQty LONG,otherQty LONG,totalQty LONG)";
	public static final String TABLE_SQL_DROP = "drop table ESFBill";
	public static final String ORDER_BY_JPQL = " ORDER BY esfBill.esfBillId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ESFBill.esfBillId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ethica.esf.model.ESFBill"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ethica.esf.model.ESFBill"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ethica.esf.model.ESFBill"),
			true);
	public static long ESFARTICLEID_COLUMN_BITMASK = 1L;
	public static long ESFORDERID_COLUMN_BITMASK = 2L;
	public static long ESFBILLID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ethica.esf.model.ESFBill"));

	public ESFBillModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _esfBillId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEsfBillId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _esfBillId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ESFBill.class;
	}

	@Override
	public String getModelClassName() {
		return ESFBill.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("esfBillId", getEsfBillId());
		attributes.put("esfArticleId", getEsfArticleId());
		attributes.put("esfOrderId", getEsfOrderId());
		attributes.put("billNumber", getBillNumber());
		attributes.put("xxxlQty", getXxxlQty());
		attributes.put("xxlQty", getXxlQty());
		attributes.put("xlQty", getXlQty());
		attributes.put("lQty", getLQty());
		attributes.put("mQty", getMQty());
		attributes.put("sQty", getSQty());
		attributes.put("xsQty", getXsQty());
		attributes.put("xxsQty", getXxsQty());
		attributes.put("otherQty", getOtherQty());
		attributes.put("totalQty", getTotalQty());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long esfBillId = (Long)attributes.get("esfBillId");

		if (esfBillId != null) {
			setEsfBillId(esfBillId);
		}

		Long esfArticleId = (Long)attributes.get("esfArticleId");

		if (esfArticleId != null) {
			setEsfArticleId(esfArticleId);
		}

		Long esfOrderId = (Long)attributes.get("esfOrderId");

		if (esfOrderId != null) {
			setEsfOrderId(esfOrderId);
		}

		String billNumber = (String)attributes.get("billNumber");

		if (billNumber != null) {
			setBillNumber(billNumber);
		}

		Long xxxlQty = (Long)attributes.get("xxxlQty");

		if (xxxlQty != null) {
			setXxxlQty(xxxlQty);
		}

		Long xxlQty = (Long)attributes.get("xxlQty");

		if (xxlQty != null) {
			setXxlQty(xxlQty);
		}

		Long xlQty = (Long)attributes.get("xlQty");

		if (xlQty != null) {
			setXlQty(xlQty);
		}

		Long lQty = (Long)attributes.get("lQty");

		if (lQty != null) {
			setLQty(lQty);
		}

		Long mQty = (Long)attributes.get("mQty");

		if (mQty != null) {
			setMQty(mQty);
		}

		Long sQty = (Long)attributes.get("sQty");

		if (sQty != null) {
			setSQty(sQty);
		}

		Long xsQty = (Long)attributes.get("xsQty");

		if (xsQty != null) {
			setXsQty(xsQty);
		}

		Long xxsQty = (Long)attributes.get("xxsQty");

		if (xxsQty != null) {
			setXxsQty(xxsQty);
		}

		Long otherQty = (Long)attributes.get("otherQty");

		if (otherQty != null) {
			setOtherQty(otherQty);
		}

		Long totalQty = (Long)attributes.get("totalQty");

		if (totalQty != null) {
			setTotalQty(totalQty);
		}
	}

	@Override
	public long getEsfBillId() {
		return _esfBillId;
	}

	@Override
	public void setEsfBillId(long esfBillId) {
		_esfBillId = esfBillId;
	}

	@Override
	public long getEsfArticleId() {
		return _esfArticleId;
	}

	@Override
	public void setEsfArticleId(long esfArticleId) {
		_columnBitmask |= ESFARTICLEID_COLUMN_BITMASK;

		if (!_setOriginalEsfArticleId) {
			_setOriginalEsfArticleId = true;

			_originalEsfArticleId = _esfArticleId;
		}

		_esfArticleId = esfArticleId;
	}

	public long getOriginalEsfArticleId() {
		return _originalEsfArticleId;
	}

	@Override
	public long getEsfOrderId() {
		return _esfOrderId;
	}

	@Override
	public void setEsfOrderId(long esfOrderId) {
		_columnBitmask |= ESFORDERID_COLUMN_BITMASK;

		if (!_setOriginalEsfOrderId) {
			_setOriginalEsfOrderId = true;

			_originalEsfOrderId = _esfOrderId;
		}

		_esfOrderId = esfOrderId;
	}

	public long getOriginalEsfOrderId() {
		return _originalEsfOrderId;
	}

	@Override
	public String getBillNumber() {
		if (_billNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _billNumber;
		}
	}

	@Override
	public void setBillNumber(String billNumber) {
		_billNumber = billNumber;
	}

	@Override
	public long getXxxlQty() {
		return _xxxlQty;
	}

	@Override
	public void setXxxlQty(long xxxlQty) {
		_xxxlQty = xxxlQty;
	}

	@Override
	public long getXxlQty() {
		return _xxlQty;
	}

	@Override
	public void setXxlQty(long xxlQty) {
		_xxlQty = xxlQty;
	}

	@Override
	public long getXlQty() {
		return _xlQty;
	}

	@Override
	public void setXlQty(long xlQty) {
		_xlQty = xlQty;
	}

	@Override
	public long getLQty() {
		return _lQty;
	}

	@Override
	public void setLQty(long lQty) {
		_lQty = lQty;
	}

	@Override
	public long getMQty() {
		return _mQty;
	}

	@Override
	public void setMQty(long mQty) {
		_mQty = mQty;
	}

	@Override
	public long getSQty() {
		return _sQty;
	}

	@Override
	public void setSQty(long sQty) {
		_sQty = sQty;
	}

	@Override
	public long getXsQty() {
		return _xsQty;
	}

	@Override
	public void setXsQty(long xsQty) {
		_xsQty = xsQty;
	}

	@Override
	public long getXxsQty() {
		return _xxsQty;
	}

	@Override
	public void setXxsQty(long xxsQty) {
		_xxsQty = xxsQty;
	}

	@Override
	public long getOtherQty() {
		return _otherQty;
	}

	@Override
	public void setOtherQty(long otherQty) {
		_otherQty = otherQty;
	}

	@Override
	public long getTotalQty() {
		return _totalQty;
	}

	@Override
	public void setTotalQty(long totalQty) {
		_totalQty = totalQty;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ESFBill.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ESFBill toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ESFBill)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ESFBillImpl esfBillImpl = new ESFBillImpl();

		esfBillImpl.setEsfBillId(getEsfBillId());
		esfBillImpl.setEsfArticleId(getEsfArticleId());
		esfBillImpl.setEsfOrderId(getEsfOrderId());
		esfBillImpl.setBillNumber(getBillNumber());
		esfBillImpl.setXxxlQty(getXxxlQty());
		esfBillImpl.setXxlQty(getXxlQty());
		esfBillImpl.setXlQty(getXlQty());
		esfBillImpl.setLQty(getLQty());
		esfBillImpl.setMQty(getMQty());
		esfBillImpl.setSQty(getSQty());
		esfBillImpl.setXsQty(getXsQty());
		esfBillImpl.setXxsQty(getXxsQty());
		esfBillImpl.setOtherQty(getOtherQty());
		esfBillImpl.setTotalQty(getTotalQty());

		esfBillImpl.resetOriginalValues();

		return esfBillImpl;
	}

	@Override
	public int compareTo(ESFBill esfBill) {
		long primaryKey = esfBill.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ESFBill)) {
			return false;
		}

		ESFBill esfBill = (ESFBill)obj;

		long primaryKey = esfBill.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ESFBillModelImpl esfBillModelImpl = this;

		esfBillModelImpl._originalEsfArticleId = esfBillModelImpl._esfArticleId;

		esfBillModelImpl._setOriginalEsfArticleId = false;

		esfBillModelImpl._originalEsfOrderId = esfBillModelImpl._esfOrderId;

		esfBillModelImpl._setOriginalEsfOrderId = false;

		esfBillModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ESFBill> toCacheModel() {
		ESFBillCacheModel esfBillCacheModel = new ESFBillCacheModel();

		esfBillCacheModel.esfBillId = getEsfBillId();

		esfBillCacheModel.esfArticleId = getEsfArticleId();

		esfBillCacheModel.esfOrderId = getEsfOrderId();

		esfBillCacheModel.billNumber = getBillNumber();

		String billNumber = esfBillCacheModel.billNumber;

		if ((billNumber != null) && (billNumber.length() == 0)) {
			esfBillCacheModel.billNumber = null;
		}

		esfBillCacheModel.xxxlQty = getXxxlQty();

		esfBillCacheModel.xxlQty = getXxlQty();

		esfBillCacheModel.xlQty = getXlQty();

		esfBillCacheModel.lQty = getLQty();

		esfBillCacheModel.mQty = getMQty();

		esfBillCacheModel.sQty = getSQty();

		esfBillCacheModel.xsQty = getXsQty();

		esfBillCacheModel.xxsQty = getXxsQty();

		esfBillCacheModel.otherQty = getOtherQty();

		esfBillCacheModel.totalQty = getTotalQty();

		return esfBillCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{esfBillId=");
		sb.append(getEsfBillId());
		sb.append(", esfArticleId=");
		sb.append(getEsfArticleId());
		sb.append(", esfOrderId=");
		sb.append(getEsfOrderId());
		sb.append(", billNumber=");
		sb.append(getBillNumber());
		sb.append(", xxxlQty=");
		sb.append(getXxxlQty());
		sb.append(", xxlQty=");
		sb.append(getXxlQty());
		sb.append(", xlQty=");
		sb.append(getXlQty());
		sb.append(", lQty=");
		sb.append(getLQty());
		sb.append(", mQty=");
		sb.append(getMQty());
		sb.append(", sQty=");
		sb.append(getSQty());
		sb.append(", xsQty=");
		sb.append(getXsQty());
		sb.append(", xxsQty=");
		sb.append(getXxsQty());
		sb.append(", otherQty=");
		sb.append(getOtherQty());
		sb.append(", totalQty=");
		sb.append(getTotalQty());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.ethica.esf.model.ESFBill");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>esfBillId</column-name><column-value><![CDATA[");
		sb.append(getEsfBillId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfArticleId</column-name><column-value><![CDATA[");
		sb.append(getEsfArticleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfOrderId</column-name><column-value><![CDATA[");
		sb.append(getEsfOrderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>billNumber</column-name><column-value><![CDATA[");
		sb.append(getBillNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>xxxlQty</column-name><column-value><![CDATA[");
		sb.append(getXxxlQty());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>xxlQty</column-name><column-value><![CDATA[");
		sb.append(getXxlQty());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>xlQty</column-name><column-value><![CDATA[");
		sb.append(getXlQty());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lQty</column-name><column-value><![CDATA[");
		sb.append(getLQty());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mQty</column-name><column-value><![CDATA[");
		sb.append(getMQty());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sQty</column-name><column-value><![CDATA[");
		sb.append(getSQty());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>xsQty</column-name><column-value><![CDATA[");
		sb.append(getXsQty());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>xxsQty</column-name><column-value><![CDATA[");
		sb.append(getXxsQty());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherQty</column-name><column-value><![CDATA[");
		sb.append(getOtherQty());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalQty</column-name><column-value><![CDATA[");
		sb.append(getTotalQty());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ESFBill.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ESFBill.class
		};
	private long _esfBillId;
	private long _esfArticleId;
	private long _originalEsfArticleId;
	private boolean _setOriginalEsfArticleId;
	private long _esfOrderId;
	private long _originalEsfOrderId;
	private boolean _setOriginalEsfOrderId;
	private String _billNumber;
	private long _xxxlQty;
	private long _xxlQty;
	private long _xlQty;
	private long _lQty;
	private long _mQty;
	private long _sQty;
	private long _xsQty;
	private long _xxsQty;
	private long _otherQty;
	private long _totalQty;
	private long _columnBitmask;
	private ESFBill _escapedModel;
}
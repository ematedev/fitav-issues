/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.ethica.esf.model.impl;

import com.ethica.esf.model.ESFOrder;
import com.ethica.esf.model.ESFOrderModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ESFOrder service. Represents a row in the &quot;ESFOrder&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.ethica.esf.model.ESFOrderModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ESFOrderImpl}.
 * </p>
 *
 * @author Ethica
 * @see ESFOrderImpl
 * @see com.ethica.esf.model.ESFOrder
 * @see com.ethica.esf.model.ESFOrderModel
 * @generated
 */
public class ESFOrderModelImpl extends BaseModelImpl<ESFOrder>
	implements ESFOrderModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a e s f order model instance should use the {@link com.ethica.esf.model.ESFOrder} interface instead.
	 */
	public static final String TABLE_NAME = "ESFOrder";
	public static final Object[][] TABLE_COLUMNS = {
			{ "esfOrderId", Types.BIGINT },
			{ "code_", Types.VARCHAR },
			{ "name", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "date_", Types.TIMESTAMP },
			{ "note", Types.VARCHAR },
			{ "protocolCode", Types.VARCHAR },
			{ "attachment", Types.VARCHAR },
			{ "state_", Types.INTEGER },
			{ "esfStockistId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table ESFOrder (esfOrderId LONG not null primary key,code_ VARCHAR(75) null,name VARCHAR(75) null,description STRING null,date_ DATE null,note STRING null,protocolCode VARCHAR(75) null,attachment VARCHAR(75) null,state_ INTEGER,esfStockistId LONG)";
	public static final String TABLE_SQL_DROP = "drop table ESFOrder";
	public static final String ORDER_BY_JPQL = " ORDER BY esfOrder.esfOrderId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ESFOrder.esfOrderId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.ethica.esf.model.ESFOrder"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.ethica.esf.model.ESFOrder"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.ethica.esf.model.ESFOrder"),
			true);
	public static long CODE_COLUMN_BITMASK = 1L;
	public static long DESCRIPTION_COLUMN_BITMASK = 2L;
	public static long ESFSTOCKISTID_COLUMN_BITMASK = 4L;
	public static long NAME_COLUMN_BITMASK = 8L;
	public static long ESFORDERID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.ethica.esf.model.ESFOrder"));

	public ESFOrderModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _esfOrderId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEsfOrderId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _esfOrderId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ESFOrder.class;
	}

	@Override
	public String getModelClassName() {
		return ESFOrder.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("esfOrderId", getEsfOrderId());
		attributes.put("code", getCode());
		attributes.put("name", getName());
		attributes.put("description", getDescription());
		attributes.put("date", getDate());
		attributes.put("note", getNote());
		attributes.put("protocolCode", getProtocolCode());
		attributes.put("attachment", getAttachment());
		attributes.put("state", getState());
		attributes.put("esfStockistId", getEsfStockistId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long esfOrderId = (Long)attributes.get("esfOrderId");

		if (esfOrderId != null) {
			setEsfOrderId(esfOrderId);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Date date = (Date)attributes.get("date");

		if (date != null) {
			setDate(date);
		}

		String note = (String)attributes.get("note");

		if (note != null) {
			setNote(note);
		}

		String protocolCode = (String)attributes.get("protocolCode");

		if (protocolCode != null) {
			setProtocolCode(protocolCode);
		}

		String attachment = (String)attributes.get("attachment");

		if (attachment != null) {
			setAttachment(attachment);
		}

		Integer state = (Integer)attributes.get("state");

		if (state != null) {
			setState(state);
		}

		Long esfStockistId = (Long)attributes.get("esfStockistId");

		if (esfStockistId != null) {
			setEsfStockistId(esfStockistId);
		}
	}

	@Override
	public long getEsfOrderId() {
		return _esfOrderId;
	}

	@Override
	public void setEsfOrderId(long esfOrderId) {
		_esfOrderId = esfOrderId;
	}

	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_columnBitmask |= CODE_COLUMN_BITMASK;

		if (_originalCode == null) {
			_originalCode = _code;
		}

		_code = code;
	}

	public String getOriginalCode() {
		return GetterUtil.getString(_originalCode);
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask |= NAME_COLUMN_BITMASK;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_columnBitmask |= DESCRIPTION_COLUMN_BITMASK;

		if (_originalDescription == null) {
			_originalDescription = _description;
		}

		_description = description;
	}

	public String getOriginalDescription() {
		return GetterUtil.getString(_originalDescription);
	}

	@Override
	public Date getDate() {
		return _date;
	}

	@Override
	public void setDate(Date date) {
		_date = date;
	}

	@Override
	public String getNote() {
		if (_note == null) {
			return StringPool.BLANK;
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	@Override
	public String getProtocolCode() {
		if (_protocolCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _protocolCode;
		}
	}

	@Override
	public void setProtocolCode(String protocolCode) {
		_protocolCode = protocolCode;
	}

	@Override
	public String getAttachment() {
		if (_attachment == null) {
			return StringPool.BLANK;
		}
		else {
			return _attachment;
		}
	}

	@Override
	public void setAttachment(String attachment) {
		_attachment = attachment;
	}

	@Override
	public int getState() {
		return _state;
	}

	@Override
	public void setState(int state) {
		_state = state;
	}

	@Override
	public long getEsfStockistId() {
		return _esfStockistId;
	}

	@Override
	public void setEsfStockistId(long esfStockistId) {
		_columnBitmask |= ESFSTOCKISTID_COLUMN_BITMASK;

		if (!_setOriginalEsfStockistId) {
			_setOriginalEsfStockistId = true;

			_originalEsfStockistId = _esfStockistId;
		}

		_esfStockistId = esfStockistId;
	}

	public long getOriginalEsfStockistId() {
		return _originalEsfStockistId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ESFOrder.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ESFOrder toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ESFOrder)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ESFOrderImpl esfOrderImpl = new ESFOrderImpl();

		esfOrderImpl.setEsfOrderId(getEsfOrderId());
		esfOrderImpl.setCode(getCode());
		esfOrderImpl.setName(getName());
		esfOrderImpl.setDescription(getDescription());
		esfOrderImpl.setDate(getDate());
		esfOrderImpl.setNote(getNote());
		esfOrderImpl.setProtocolCode(getProtocolCode());
		esfOrderImpl.setAttachment(getAttachment());
		esfOrderImpl.setState(getState());
		esfOrderImpl.setEsfStockistId(getEsfStockistId());

		esfOrderImpl.resetOriginalValues();

		return esfOrderImpl;
	}

	@Override
	public int compareTo(ESFOrder esfOrder) {
		long primaryKey = esfOrder.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ESFOrder)) {
			return false;
		}

		ESFOrder esfOrder = (ESFOrder)obj;

		long primaryKey = esfOrder.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ESFOrderModelImpl esfOrderModelImpl = this;

		esfOrderModelImpl._originalCode = esfOrderModelImpl._code;

		esfOrderModelImpl._originalName = esfOrderModelImpl._name;

		esfOrderModelImpl._originalDescription = esfOrderModelImpl._description;

		esfOrderModelImpl._originalEsfStockistId = esfOrderModelImpl._esfStockistId;

		esfOrderModelImpl._setOriginalEsfStockistId = false;

		esfOrderModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ESFOrder> toCacheModel() {
		ESFOrderCacheModel esfOrderCacheModel = new ESFOrderCacheModel();

		esfOrderCacheModel.esfOrderId = getEsfOrderId();

		esfOrderCacheModel.code = getCode();

		String code = esfOrderCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			esfOrderCacheModel.code = null;
		}

		esfOrderCacheModel.name = getName();

		String name = esfOrderCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			esfOrderCacheModel.name = null;
		}

		esfOrderCacheModel.description = getDescription();

		String description = esfOrderCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			esfOrderCacheModel.description = null;
		}

		Date date = getDate();

		if (date != null) {
			esfOrderCacheModel.date = date.getTime();
		}
		else {
			esfOrderCacheModel.date = Long.MIN_VALUE;
		}

		esfOrderCacheModel.note = getNote();

		String note = esfOrderCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			esfOrderCacheModel.note = null;
		}

		esfOrderCacheModel.protocolCode = getProtocolCode();

		String protocolCode = esfOrderCacheModel.protocolCode;

		if ((protocolCode != null) && (protocolCode.length() == 0)) {
			esfOrderCacheModel.protocolCode = null;
		}

		esfOrderCacheModel.attachment = getAttachment();

		String attachment = esfOrderCacheModel.attachment;

		if ((attachment != null) && (attachment.length() == 0)) {
			esfOrderCacheModel.attachment = null;
		}

		esfOrderCacheModel.state = getState();

		esfOrderCacheModel.esfStockistId = getEsfStockistId();

		return esfOrderCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{esfOrderId=");
		sb.append(getEsfOrderId());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", date=");
		sb.append(getDate());
		sb.append(", note=");
		sb.append(getNote());
		sb.append(", protocolCode=");
		sb.append(getProtocolCode());
		sb.append(", attachment=");
		sb.append(getAttachment());
		sb.append(", state=");
		sb.append(getState());
		sb.append(", esfStockistId=");
		sb.append(getEsfStockistId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.ethica.esf.model.ESFOrder");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>esfOrderId</column-name><column-value><![CDATA[");
		sb.append(getEsfOrderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>date</column-name><column-value><![CDATA[");
		sb.append(getDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note</column-name><column-value><![CDATA[");
		sb.append(getNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>protocolCode</column-name><column-value><![CDATA[");
		sb.append(getProtocolCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachment</column-name><column-value><![CDATA[");
		sb.append(getAttachment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>state</column-name><column-value><![CDATA[");
		sb.append(getState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfStockistId</column-name><column-value><![CDATA[");
		sb.append(getEsfStockistId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ESFOrder.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ESFOrder.class
		};
	private long _esfOrderId;
	private String _code;
	private String _originalCode;
	private String _name;
	private String _originalName;
	private String _description;
	private String _originalDescription;
	private Date _date;
	private String _note;
	private String _protocolCode;
	private String _attachment;
	private int _state;
	private long _esfStockistId;
	private long _originalEsfStockistId;
	private boolean _setOriginalEsfStockistId;
	private long _columnBitmask;
	private ESFOrder _escapedModel;
}
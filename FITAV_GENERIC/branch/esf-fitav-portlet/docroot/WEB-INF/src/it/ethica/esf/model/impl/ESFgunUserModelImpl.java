/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.ethica.esf.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import it.ethica.esf.model.ESFgunUser;
import it.ethica.esf.model.ESFgunUserModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ESFgunUser service. Represents a row in the &quot;ESFgunUser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.ethica.esf.model.ESFgunUserModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ESFgunUserImpl}.
 * </p>
 *
 * @author Ethica
 * @see ESFgunUserImpl
 * @see it.ethica.esf.model.ESFgunUser
 * @see it.ethica.esf.model.ESFgunUserModel
 * @generated
 */
public class ESFgunUserModelImpl extends BaseModelImpl<ESFgunUser>
	implements ESFgunUserModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a e s fgun user model instance should use the {@link it.ethica.esf.model.ESFgunUser} interface instead.
	 */
	public static final String TABLE_NAME = "ESFgunUser";
	public static final Object[][] TABLE_COLUMNS = {
			{ "esfGunUserId", Types.BIGINT },
			{ "esfGunId", Types.BIGINT },
			{ "esfUserId", Types.BIGINT },
			{ "code_", Types.VARCHAR },
			{ "isFavorite", Types.BOOLEAN },
			{ "type_", Types.INTEGER },
			{ "note", Types.VARCHAR },
			{ "esfGunnTypeId", Types.BIGINT },
			{ "esfGunKindId", Types.BIGINT },
			{ "typeId", Types.BIGINT },
			{ "esfMeasures", Types.VARCHAR },
			{ "esfCaliber", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ESFgunUser (esfGunUserId LONG not null primary key,esfGunId LONG,esfUserId LONG,code_ VARCHAR(75) null,isFavorite BOOLEAN,type_ INTEGER,note VARCHAR(75) null,esfGunnTypeId LONG,esfGunKindId LONG,typeId LONG,esfMeasures VARCHAR(75) null,esfCaliber VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ESFgunUser";
	public static final String ORDER_BY_JPQL = " ORDER BY esFgunUser.esfGunUserId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ESFgunUser.esfGunUserId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.ethica.esf.model.ESFgunUser"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.ethica.esf.model.ESFgunUser"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.it.ethica.esf.model.ESFgunUser"),
			true);
	public static long CODE_COLUMN_BITMASK = 1L;
	public static long ESFGUNID_COLUMN_BITMASK = 2L;
	public static long ESFUSERID_COLUMN_BITMASK = 4L;
	public static long TYPE_COLUMN_BITMASK = 8L;
	public static long ESFGUNUSERID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.ethica.esf.model.ESFgunUser"));

	public ESFgunUserModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _esfGunUserId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEsfGunUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _esfGunUserId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ESFgunUser.class;
	}

	@Override
	public String getModelClassName() {
		return ESFgunUser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("esfGunUserId", getEsfGunUserId());
		attributes.put("esfGunId", getEsfGunId());
		attributes.put("esfUserId", getEsfUserId());
		attributes.put("code", getCode());
		attributes.put("isFavorite", getIsFavorite());
		attributes.put("type", getType());
		attributes.put("note", getNote());
		attributes.put("esfGunnTypeId", getEsfGunnTypeId());
		attributes.put("esfGunKindId", getEsfGunKindId());
		attributes.put("typeId", getTypeId());
		attributes.put("esfMeasures", getEsfMeasures());
		attributes.put("esfCaliber", getEsfCaliber());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long esfGunUserId = (Long)attributes.get("esfGunUserId");

		if (esfGunUserId != null) {
			setEsfGunUserId(esfGunUserId);
		}

		Long esfGunId = (Long)attributes.get("esfGunId");

		if (esfGunId != null) {
			setEsfGunId(esfGunId);
		}

		Long esfUserId = (Long)attributes.get("esfUserId");

		if (esfUserId != null) {
			setEsfUserId(esfUserId);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		Boolean isFavorite = (Boolean)attributes.get("isFavorite");

		if (isFavorite != null) {
			setIsFavorite(isFavorite);
		}

		Integer type = (Integer)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String note = (String)attributes.get("note");

		if (note != null) {
			setNote(note);
		}

		Long esfGunnTypeId = (Long)attributes.get("esfGunnTypeId");

		if (esfGunnTypeId != null) {
			setEsfGunnTypeId(esfGunnTypeId);
		}

		Long esfGunKindId = (Long)attributes.get("esfGunKindId");

		if (esfGunKindId != null) {
			setEsfGunKindId(esfGunKindId);
		}

		Long typeId = (Long)attributes.get("typeId");

		if (typeId != null) {
			setTypeId(typeId);
		}

		String esfMeasures = (String)attributes.get("esfMeasures");

		if (esfMeasures != null) {
			setEsfMeasures(esfMeasures);
		}

		String esfCaliber = (String)attributes.get("esfCaliber");

		if (esfCaliber != null) {
			setEsfCaliber(esfCaliber);
		}
	}

	@Override
	public long getEsfGunUserId() {
		return _esfGunUserId;
	}

	@Override
	public void setEsfGunUserId(long esfGunUserId) {
		_esfGunUserId = esfGunUserId;
	}

	@Override
	public String getEsfGunUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getEsfGunUserId(), "uuid",
			_esfGunUserUuid);
	}

	@Override
	public void setEsfGunUserUuid(String esfGunUserUuid) {
		_esfGunUserUuid = esfGunUserUuid;
	}

	@Override
	public long getEsfGunId() {
		return _esfGunId;
	}

	@Override
	public void setEsfGunId(long esfGunId) {
		_columnBitmask |= ESFGUNID_COLUMN_BITMASK;

		if (!_setOriginalEsfGunId) {
			_setOriginalEsfGunId = true;

			_originalEsfGunId = _esfGunId;
		}

		_esfGunId = esfGunId;
	}

	public long getOriginalEsfGunId() {
		return _originalEsfGunId;
	}

	@Override
	public long getEsfUserId() {
		return _esfUserId;
	}

	@Override
	public void setEsfUserId(long esfUserId) {
		_columnBitmask |= ESFUSERID_COLUMN_BITMASK;

		if (!_setOriginalEsfUserId) {
			_setOriginalEsfUserId = true;

			_originalEsfUserId = _esfUserId;
		}

		_esfUserId = esfUserId;
	}

	@Override
	public String getEsfUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getEsfUserId(), "uuid", _esfUserUuid);
	}

	@Override
	public void setEsfUserUuid(String esfUserUuid) {
		_esfUserUuid = esfUserUuid;
	}

	public long getOriginalEsfUserId() {
		return _originalEsfUserId;
	}

	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_columnBitmask |= CODE_COLUMN_BITMASK;

		if (_originalCode == null) {
			_originalCode = _code;
		}

		_code = code;
	}

	public String getOriginalCode() {
		return GetterUtil.getString(_originalCode);
	}

	@Override
	public boolean getIsFavorite() {
		return _isFavorite;
	}

	@Override
	public boolean isIsFavorite() {
		return _isFavorite;
	}

	@Override
	public void setIsFavorite(boolean isFavorite) {
		_isFavorite = isFavorite;
	}

	@Override
	public int getType() {
		return _type;
	}

	@Override
	public void setType(int type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (!_setOriginalType) {
			_setOriginalType = true;

			_originalType = _type;
		}

		_type = type;
	}

	public int getOriginalType() {
		return _originalType;
	}

	@Override
	public String getNote() {
		if (_note == null) {
			return StringPool.BLANK;
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	@Override
	public long getEsfGunnTypeId() {
		return _esfGunnTypeId;
	}

	@Override
	public void setEsfGunnTypeId(long esfGunnTypeId) {
		_esfGunnTypeId = esfGunnTypeId;
	}

	@Override
	public long getEsfGunKindId() {
		return _esfGunKindId;
	}

	@Override
	public void setEsfGunKindId(long esfGunKindId) {
		_esfGunKindId = esfGunKindId;
	}

	@Override
	public long getTypeId() {
		return _typeId;
	}

	@Override
	public void setTypeId(long typeId) {
		_typeId = typeId;
	}

	@Override
	public String getEsfMeasures() {
		if (_esfMeasures == null) {
			return StringPool.BLANK;
		}
		else {
			return _esfMeasures;
		}
	}

	@Override
	public void setEsfMeasures(String esfMeasures) {
		_esfMeasures = esfMeasures;
	}

	@Override
	public String getEsfCaliber() {
		if (_esfCaliber == null) {
			return StringPool.BLANK;
		}
		else {
			return _esfCaliber;
		}
	}

	@Override
	public void setEsfCaliber(String esfCaliber) {
		_esfCaliber = esfCaliber;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ESFgunUser.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ESFgunUser toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ESFgunUser)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ESFgunUserImpl esFgunUserImpl = new ESFgunUserImpl();

		esFgunUserImpl.setEsfGunUserId(getEsfGunUserId());
		esFgunUserImpl.setEsfGunId(getEsfGunId());
		esFgunUserImpl.setEsfUserId(getEsfUserId());
		esFgunUserImpl.setCode(getCode());
		esFgunUserImpl.setIsFavorite(getIsFavorite());
		esFgunUserImpl.setType(getType());
		esFgunUserImpl.setNote(getNote());
		esFgunUserImpl.setEsfGunnTypeId(getEsfGunnTypeId());
		esFgunUserImpl.setEsfGunKindId(getEsfGunKindId());
		esFgunUserImpl.setTypeId(getTypeId());
		esFgunUserImpl.setEsfMeasures(getEsfMeasures());
		esFgunUserImpl.setEsfCaliber(getEsfCaliber());

		esFgunUserImpl.resetOriginalValues();

		return esFgunUserImpl;
	}

	@Override
	public int compareTo(ESFgunUser esFgunUser) {
		long primaryKey = esFgunUser.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ESFgunUser)) {
			return false;
		}

		ESFgunUser esFgunUser = (ESFgunUser)obj;

		long primaryKey = esFgunUser.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ESFgunUserModelImpl esFgunUserModelImpl = this;

		esFgunUserModelImpl._originalEsfGunId = esFgunUserModelImpl._esfGunId;

		esFgunUserModelImpl._setOriginalEsfGunId = false;

		esFgunUserModelImpl._originalEsfUserId = esFgunUserModelImpl._esfUserId;

		esFgunUserModelImpl._setOriginalEsfUserId = false;

		esFgunUserModelImpl._originalCode = esFgunUserModelImpl._code;

		esFgunUserModelImpl._originalType = esFgunUserModelImpl._type;

		esFgunUserModelImpl._setOriginalType = false;

		esFgunUserModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ESFgunUser> toCacheModel() {
		ESFgunUserCacheModel esFgunUserCacheModel = new ESFgunUserCacheModel();

		esFgunUserCacheModel.esfGunUserId = getEsfGunUserId();

		esFgunUserCacheModel.esfGunId = getEsfGunId();

		esFgunUserCacheModel.esfUserId = getEsfUserId();

		esFgunUserCacheModel.code = getCode();

		String code = esFgunUserCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			esFgunUserCacheModel.code = null;
		}

		esFgunUserCacheModel.isFavorite = getIsFavorite();

		esFgunUserCacheModel.type = getType();

		esFgunUserCacheModel.note = getNote();

		String note = esFgunUserCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			esFgunUserCacheModel.note = null;
		}

		esFgunUserCacheModel.esfGunnTypeId = getEsfGunnTypeId();

		esFgunUserCacheModel.esfGunKindId = getEsfGunKindId();

		esFgunUserCacheModel.typeId = getTypeId();

		esFgunUserCacheModel.esfMeasures = getEsfMeasures();

		String esfMeasures = esFgunUserCacheModel.esfMeasures;

		if ((esfMeasures != null) && (esfMeasures.length() == 0)) {
			esFgunUserCacheModel.esfMeasures = null;
		}

		esFgunUserCacheModel.esfCaliber = getEsfCaliber();

		String esfCaliber = esFgunUserCacheModel.esfCaliber;

		if ((esfCaliber != null) && (esfCaliber.length() == 0)) {
			esFgunUserCacheModel.esfCaliber = null;
		}

		return esFgunUserCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{esfGunUserId=");
		sb.append(getEsfGunUserId());
		sb.append(", esfGunId=");
		sb.append(getEsfGunId());
		sb.append(", esfUserId=");
		sb.append(getEsfUserId());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", isFavorite=");
		sb.append(getIsFavorite());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", note=");
		sb.append(getNote());
		sb.append(", esfGunnTypeId=");
		sb.append(getEsfGunnTypeId());
		sb.append(", esfGunKindId=");
		sb.append(getEsfGunKindId());
		sb.append(", typeId=");
		sb.append(getTypeId());
		sb.append(", esfMeasures=");
		sb.append(getEsfMeasures());
		sb.append(", esfCaliber=");
		sb.append(getEsfCaliber());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("it.ethica.esf.model.ESFgunUser");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>esfGunUserId</column-name><column-value><![CDATA[");
		sb.append(getEsfGunUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfGunId</column-name><column-value><![CDATA[");
		sb.append(getEsfGunId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfUserId</column-name><column-value><![CDATA[");
		sb.append(getEsfUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isFavorite</column-name><column-value><![CDATA[");
		sb.append(getIsFavorite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note</column-name><column-value><![CDATA[");
		sb.append(getNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfGunnTypeId</column-name><column-value><![CDATA[");
		sb.append(getEsfGunnTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfGunKindId</column-name><column-value><![CDATA[");
		sb.append(getEsfGunKindId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeId</column-name><column-value><![CDATA[");
		sb.append(getTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfMeasures</column-name><column-value><![CDATA[");
		sb.append(getEsfMeasures());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfCaliber</column-name><column-value><![CDATA[");
		sb.append(getEsfCaliber());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ESFgunUser.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ESFgunUser.class
		};
	private long _esfGunUserId;
	private String _esfGunUserUuid;
	private long _esfGunId;
	private long _originalEsfGunId;
	private boolean _setOriginalEsfGunId;
	private long _esfUserId;
	private String _esfUserUuid;
	private long _originalEsfUserId;
	private boolean _setOriginalEsfUserId;
	private String _code;
	private String _originalCode;
	private boolean _isFavorite;
	private int _type;
	private int _originalType;
	private boolean _setOriginalType;
	private String _note;
	private long _esfGunnTypeId;
	private long _esfGunKindId;
	private long _typeId;
	private String _esfMeasures;
	private String _esfCaliber;
	private long _columnBitmask;
	private ESFgunUser _escapedModel;
}
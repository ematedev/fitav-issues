/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.ethica.esf.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import it.ethica.esf.model.ESFCodeOrg;
import it.ethica.esf.model.ESFCodeOrgModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ESFCodeOrg service. Represents a row in the &quot;ESFCodeOrg&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.ethica.esf.model.ESFCodeOrgModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ESFCodeOrgImpl}.
 * </p>
 *
 * @author Ethica
 * @see ESFCodeOrgImpl
 * @see it.ethica.esf.model.ESFCodeOrg
 * @see it.ethica.esf.model.ESFCodeOrgModel
 * @generated
 */
public class ESFCodeOrgModelImpl extends BaseModelImpl<ESFCodeOrg>
	implements ESFCodeOrgModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a e s f code org model instance should use the {@link it.ethica.esf.model.ESFCodeOrg} interface instead.
	 */
	public static final String TABLE_NAME = "ESFCodeOrg";
	public static final Object[][] TABLE_COLUMNS = {
			{ "esfCodeOrgId", Types.BIGINT },
			{ "className", Types.VARCHAR },
			{ "code_", Types.VARCHAR },
			{ "sequence", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table ESFCodeOrg (esfCodeOrgId LONG not null primary key,className VARCHAR(75) null,code_ VARCHAR(75) null,sequence LONG)";
	public static final String TABLE_SQL_DROP = "drop table ESFCodeOrg";
	public static final String ORDER_BY_JPQL = " ORDER BY esfCodeOrg.sequence ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ESFCodeOrg.sequence ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.ethica.esf.model.ESFCodeOrg"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.ethica.esf.model.ESFCodeOrg"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.it.ethica.esf.model.ESFCodeOrg"),
			true);
	public static long CLASSNAME_COLUMN_BITMASK = 1L;
	public static long CODE_COLUMN_BITMASK = 2L;
	public static long SEQUENCE_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.ethica.esf.model.ESFCodeOrg"));

	public ESFCodeOrgModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _esfCodeOrgId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEsfCodeOrgId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _esfCodeOrgId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ESFCodeOrg.class;
	}

	@Override
	public String getModelClassName() {
		return ESFCodeOrg.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("esfCodeOrgId", getEsfCodeOrgId());
		attributes.put("className", getClassName());
		attributes.put("code", getCode());
		attributes.put("sequence", getSequence());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long esfCodeOrgId = (Long)attributes.get("esfCodeOrgId");

		if (esfCodeOrgId != null) {
			setEsfCodeOrgId(esfCodeOrgId);
		}

		String className = (String)attributes.get("className");

		if (className != null) {
			setClassName(className);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		Long sequence = (Long)attributes.get("sequence");

		if (sequence != null) {
			setSequence(sequence);
		}
	}

	@Override
	public long getEsfCodeOrgId() {
		return _esfCodeOrgId;
	}

	@Override
	public void setEsfCodeOrgId(long esfCodeOrgId) {
		_esfCodeOrgId = esfCodeOrgId;
	}

	@Override
	public String getClassName() {
		if (_className == null) {
			return StringPool.BLANK;
		}
		else {
			return _className;
		}
	}

	@Override
	public void setClassName(String className) {
		_columnBitmask |= CLASSNAME_COLUMN_BITMASK;

		if (_originalClassName == null) {
			_originalClassName = _className;
		}

		_className = className;
	}

	public String getOriginalClassName() {
		return GetterUtil.getString(_originalClassName);
	}

	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_columnBitmask |= CODE_COLUMN_BITMASK;

		if (_originalCode == null) {
			_originalCode = _code;
		}

		_code = code;
	}

	public String getOriginalCode() {
		return GetterUtil.getString(_originalCode);
	}

	@Override
	public long getSequence() {
		return _sequence;
	}

	@Override
	public void setSequence(long sequence) {
		_columnBitmask = -1L;

		_sequence = sequence;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ESFCodeOrg.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ESFCodeOrg toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ESFCodeOrg)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ESFCodeOrgImpl esfCodeOrgImpl = new ESFCodeOrgImpl();

		esfCodeOrgImpl.setEsfCodeOrgId(getEsfCodeOrgId());
		esfCodeOrgImpl.setClassName(getClassName());
		esfCodeOrgImpl.setCode(getCode());
		esfCodeOrgImpl.setSequence(getSequence());

		esfCodeOrgImpl.resetOriginalValues();

		return esfCodeOrgImpl;
	}

	@Override
	public int compareTo(ESFCodeOrg esfCodeOrg) {
		int value = 0;

		if (getSequence() < esfCodeOrg.getSequence()) {
			value = -1;
		}
		else if (getSequence() > esfCodeOrg.getSequence()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ESFCodeOrg)) {
			return false;
		}

		ESFCodeOrg esfCodeOrg = (ESFCodeOrg)obj;

		long primaryKey = esfCodeOrg.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ESFCodeOrgModelImpl esfCodeOrgModelImpl = this;

		esfCodeOrgModelImpl._originalClassName = esfCodeOrgModelImpl._className;

		esfCodeOrgModelImpl._originalCode = esfCodeOrgModelImpl._code;

		esfCodeOrgModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ESFCodeOrg> toCacheModel() {
		ESFCodeOrgCacheModel esfCodeOrgCacheModel = new ESFCodeOrgCacheModel();

		esfCodeOrgCacheModel.esfCodeOrgId = getEsfCodeOrgId();

		esfCodeOrgCacheModel.className = getClassName();

		String className = esfCodeOrgCacheModel.className;

		if ((className != null) && (className.length() == 0)) {
			esfCodeOrgCacheModel.className = null;
		}

		esfCodeOrgCacheModel.code = getCode();

		String code = esfCodeOrgCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			esfCodeOrgCacheModel.code = null;
		}

		esfCodeOrgCacheModel.sequence = getSequence();

		return esfCodeOrgCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{esfCodeOrgId=");
		sb.append(getEsfCodeOrgId());
		sb.append(", className=");
		sb.append(getClassName());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", sequence=");
		sb.append(getSequence());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("it.ethica.esf.model.ESFCodeOrg");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>esfCodeOrgId</column-name><column-value><![CDATA[");
		sb.append(getEsfCodeOrgId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>className</column-name><column-value><![CDATA[");
		sb.append(getClassName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sequence</column-name><column-value><![CDATA[");
		sb.append(getSequence());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ESFCodeOrg.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ESFCodeOrg.class
		};
	private long _esfCodeOrgId;
	private String _className;
	private String _originalClassName;
	private String _code;
	private String _originalCode;
	private long _sequence;
	private long _columnBitmask;
	private ESFCodeOrg _escapedModel;
}
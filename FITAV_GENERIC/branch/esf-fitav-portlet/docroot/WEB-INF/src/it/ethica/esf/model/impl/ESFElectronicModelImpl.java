/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.ethica.esf.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import it.ethica.esf.model.ESFElectronic;
import it.ethica.esf.model.ESFElectronicModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ESFElectronic service. Represents a row in the &quot;ESFElectronic&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.ethica.esf.model.ESFElectronicModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ESFElectronicImpl}.
 * </p>
 *
 * @author Ethica
 * @see ESFElectronicImpl
 * @see it.ethica.esf.model.ESFElectronic
 * @see it.ethica.esf.model.ESFElectronicModel
 * @generated
 */
public class ESFElectronicModelImpl extends BaseModelImpl<ESFElectronic>
	implements ESFElectronicModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a e s f electronic model instance should use the {@link it.ethica.esf.model.ESFElectronic} interface instead.
	 */
	public static final String TABLE_NAME = "ESFElectronic";
	public static final Object[][] TABLE_COLUMNS = {
			{ "electronicId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "description", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ESFElectronic (electronicId LONG not null primary key,name VARCHAR(75) null,description VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ESFElectronic";
	public static final String ORDER_BY_JPQL = " ORDER BY esfElectronic.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ESFElectronic.name ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.ethica.esf.model.ESFElectronic"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.ethica.esf.model.ESFElectronic"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.ethica.esf.model.ESFElectronic"));

	public ESFElectronicModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _electronicId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setElectronicId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _electronicId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ESFElectronic.class;
	}

	@Override
	public String getModelClassName() {
		return ESFElectronic.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("electronicId", getElectronicId());
		attributes.put("name", getName());
		attributes.put("description", getDescription());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long electronicId = (Long)attributes.get("electronicId");

		if (electronicId != null) {
			setElectronicId(electronicId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	@Override
	public long getElectronicId() {
		return _electronicId;
	}

	@Override
	public void setElectronicId(long electronicId) {
		_electronicId = electronicId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ESFElectronic.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ESFElectronic toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ESFElectronic)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ESFElectronicImpl esfElectronicImpl = new ESFElectronicImpl();

		esfElectronicImpl.setElectronicId(getElectronicId());
		esfElectronicImpl.setName(getName());
		esfElectronicImpl.setDescription(getDescription());

		esfElectronicImpl.resetOriginalValues();

		return esfElectronicImpl;
	}

	@Override
	public int compareTo(ESFElectronic esfElectronic) {
		int value = 0;

		value = getName().compareTo(esfElectronic.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ESFElectronic)) {
			return false;
		}

		ESFElectronic esfElectronic = (ESFElectronic)obj;

		long primaryKey = esfElectronic.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ESFElectronic> toCacheModel() {
		ESFElectronicCacheModel esfElectronicCacheModel = new ESFElectronicCacheModel();

		esfElectronicCacheModel.electronicId = getElectronicId();

		esfElectronicCacheModel.name = getName();

		String name = esfElectronicCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			esfElectronicCacheModel.name = null;
		}

		esfElectronicCacheModel.description = getDescription();

		String description = esfElectronicCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			esfElectronicCacheModel.description = null;
		}

		return esfElectronicCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{electronicId=");
		sb.append(getElectronicId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("it.ethica.esf.model.ESFElectronic");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>electronicId</column-name><column-value><![CDATA[");
		sb.append(getElectronicId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ESFElectronic.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ESFElectronic.class
		};
	private long _electronicId;
	private String _name;
	private String _description;
	private ESFElectronic _escapedModel;
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.ethica.esf.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import it.ethica.esf.model.ESFResult;
import it.ethica.esf.model.ESFResultModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ESFResult service. Represents a row in the &quot;ESFResult&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.ethica.esf.model.ESFResultModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ESFResultImpl}.
 * </p>
 *
 * @author Ethica
 * @see ESFResultImpl
 * @see it.ethica.esf.model.ESFResult
 * @see it.ethica.esf.model.ESFResultModel
 * @generated
 */
@JSON(strict = true)
public class ESFResultModelImpl extends BaseModelImpl<ESFResult>
	implements ESFResultModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a e s f result model instance should use the {@link it.ethica.esf.model.ESFResult} interface instead.
	 */
	public static final String TABLE_NAME = "ESFResult";
	public static final Object[][] TABLE_COLUMNS = {
			{ "esfResultId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "matchYear", Types.INTEGER },
			{ "numberMatch", Types.INTEGER },
			{ "esfMatchId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "name2", Types.VARCHAR },
			{ "esfAssociationId", Types.BIGINT },
			{ "sportTypeCode", Types.VARCHAR },
			{ "startdDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "groupRanking", Types.VARCHAR },
			{ "descGroupRanking", Types.VARCHAR },
			{ "position", Types.INTEGER },
			{ "cardNumber", Types.VARCHAR },
			{ "shooterName", Types.VARCHAR },
			{ "nationCode", Types.VARCHAR },
			{ "category", Types.VARCHAR },
			{ "qualificationCode", Types.VARCHAR },
			{ "resultS1", Types.INTEGER },
			{ "resultS2", Types.INTEGER },
			{ "resultS3", Types.INTEGER },
			{ "resultS4", Types.INTEGER },
			{ "resultS5", Types.INTEGER },
			{ "resultS6", Types.INTEGER },
			{ "resultS7", Types.INTEGER },
			{ "resultS8", Types.INTEGER },
			{ "totalS", Types.INTEGER },
			{ "barrage", Types.INTEGER },
			{ "finalS", Types.INTEGER },
			{ "finalTotal", Types.INTEGER },
			{ "american1", Types.INTEGER },
			{ "american2", Types.INTEGER },
			{ "american3", Types.INTEGER },
			{ "rifle", Types.VARCHAR },
			{ "caliber", Types.VARCHAR },
			{ "catridge", Types.VARCHAR },
			{ "finalType", Types.VARCHAR },
			{ "semifinalResult", Types.INTEGER },
			{ "shootOff1s", Types.INTEGER },
			{ "shootOff2s", Types.INTEGER },
			{ "shootOff3s", Types.INTEGER },
			{ "bronzeResult", Types.INTEGER },
			{ "shootOffBronze", Types.INTEGER },
			{ "goldResult", Types.INTEGER },
			{ "shootOffGold", Types.INTEGER },
			{ "teamCategory", Types.VARCHAR },
			{ "teamName", Types.VARCHAR },
			{ "naz_int", Types.VARCHAR },
			{ "showTypeCode", Types.INTEGER },
			{ "showType", Types.VARCHAR },
			{ "esfUserId", Types.BIGINT },
			{ "variationDate", Types.TIMESTAMP },
			{ "sent", Types.INTEGER },
			{ "youthQualification", Types.VARCHAR },
			{ "esfMatchTypeId", Types.BIGINT },
			{ "resultClassTeam", Types.INTEGER },
			{ "spare1", Types.INTEGER },
			{ "spare2", Types.INTEGER },
			{ "shooterCode", Types.BIGINT },
			{ "shooterQualification", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table ESFResult (esfResultId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,matchYear INTEGER,numberMatch INTEGER,esfMatchId LONG,name VARCHAR(75) null,name2 VARCHAR(75) null,esfAssociationId LONG,sportTypeCode VARCHAR(75) null,startdDate DATE null,endDate DATE null,groupRanking VARCHAR(75) null,descGroupRanking VARCHAR(75) null,position INTEGER,cardNumber VARCHAR(75) null,shooterName VARCHAR(75) null,nationCode VARCHAR(75) null,category VARCHAR(75) null,qualificationCode VARCHAR(75) null,resultS1 INTEGER,resultS2 INTEGER,resultS3 INTEGER,resultS4 INTEGER,resultS5 INTEGER,resultS6 INTEGER,resultS7 INTEGER,resultS8 INTEGER,totalS INTEGER,barrage INTEGER,finalS INTEGER,finalTotal INTEGER,american1 INTEGER,american2 INTEGER,american3 INTEGER,rifle VARCHAR(75) null,caliber VARCHAR(75) null,catridge VARCHAR(75) null,finalType VARCHAR(75) null,semifinalResult INTEGER,shootOff1s INTEGER,shootOff2s INTEGER,shootOff3s INTEGER,bronzeResult INTEGER,shootOffBronze INTEGER,goldResult INTEGER,shootOffGold INTEGER,teamCategory VARCHAR(75) null,teamName VARCHAR(75) null,naz_int VARCHAR(75) null,showTypeCode INTEGER,showType VARCHAR(75) null,esfUserId LONG,variationDate DATE null,sent INTEGER,youthQualification VARCHAR(75) null,esfMatchTypeId LONG,resultClassTeam INTEGER,spare1 INTEGER,spare2 INTEGER,shooterCode LONG,shooterQualification LONG)";
	public static final String TABLE_SQL_DROP = "drop table ESFResult";
	public static final String ORDER_BY_JPQL = " ORDER BY esfResult.descGroupRanking ASC, esfResult.position ASC, esfResult.shooterQualification ASC, esfResult.shooterName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ESFResult.descGroupRanking ASC, ESFResult.position ASC, ESFResult.shooterQualification ASC, ESFResult.shooterName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.ethica.esf.model.ESFResult"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.ethica.esf.model.ESFResult"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.it.ethica.esf.model.ESFResult"),
			true);
	public static long ESFMATCHID_COLUMN_BITMASK = 1L;
	public static long ESFMATCHTYPEID_COLUMN_BITMASK = 2L;
	public static long ESFUSERID_COLUMN_BITMASK = 4L;
	public static long RESULTCLASSTEAM_COLUMN_BITMASK = 8L;
	public static long SHOOTERQUALIFICATION_COLUMN_BITMASK = 16L;
	public static long DESCGROUPRANKING_COLUMN_BITMASK = 32L;
	public static long POSITION_COLUMN_BITMASK = 64L;
	public static long SHOOTERNAME_COLUMN_BITMASK = 128L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.ethica.esf.model.ESFResult"));

	public ESFResultModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _esfResultId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEsfResultId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _esfResultId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ESFResult.class;
	}

	@Override
	public String getModelClassName() {
		return ESFResult.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("esfResultId", getEsfResultId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("matchYear", getMatchYear());
		attributes.put("numberMatch", getNumberMatch());
		attributes.put("esfMatchId", getEsfMatchId());
		attributes.put("name", getName());
		attributes.put("name2", getName2());
		attributes.put("esfAssociationId", getEsfAssociationId());
		attributes.put("sportTypeCode", getSportTypeCode());
		attributes.put("startdDate", getStartdDate());
		attributes.put("endDate", getEndDate());
		attributes.put("groupRanking", getGroupRanking());
		attributes.put("descGroupRanking", getDescGroupRanking());
		attributes.put("position", getPosition());
		attributes.put("cardNumber", getCardNumber());
		attributes.put("shooterName", getShooterName());
		attributes.put("nationCode", getNationCode());
		attributes.put("category", getCategory());
		attributes.put("qualificationCode", getQualificationCode());
		attributes.put("resultS1", getResultS1());
		attributes.put("resultS2", getResultS2());
		attributes.put("resultS3", getResultS3());
		attributes.put("resultS4", getResultS4());
		attributes.put("resultS5", getResultS5());
		attributes.put("resultS6", getResultS6());
		attributes.put("resultS7", getResultS7());
		attributes.put("resultS8", getResultS8());
		attributes.put("totalS", getTotalS());
		attributes.put("barrage", getBarrage());
		attributes.put("finalS", getFinalS());
		attributes.put("finalTotal", getFinalTotal());
		attributes.put("american1", getAmerican1());
		attributes.put("american2", getAmerican2());
		attributes.put("american3", getAmerican3());
		attributes.put("rifle", getRifle());
		attributes.put("caliber", getCaliber());
		attributes.put("catridge", getCatridge());
		attributes.put("finalType", getFinalType());
		attributes.put("semifinalResult", getSemifinalResult());
		attributes.put("shootOff1s", getShootOff1s());
		attributes.put("shootOff2s", getShootOff2s());
		attributes.put("shootOff3s", getShootOff3s());
		attributes.put("bronzeResult", getBronzeResult());
		attributes.put("shootOffBronze", getShootOffBronze());
		attributes.put("goldResult", getGoldResult());
		attributes.put("shootOffGold", getShootOffGold());
		attributes.put("teamCategory", getTeamCategory());
		attributes.put("teamName", getTeamName());
		attributes.put("naz_int", getNaz_int());
		attributes.put("showTypeCode", getShowTypeCode());
		attributes.put("showType", getShowType());
		attributes.put("esfUserId", getEsfUserId());
		attributes.put("variationDate", getVariationDate());
		attributes.put("sent", getSent());
		attributes.put("youthQualification", getYouthQualification());
		attributes.put("esfMatchTypeId", getEsfMatchTypeId());
		attributes.put("resultClassTeam", getResultClassTeam());
		attributes.put("spare1", getSpare1());
		attributes.put("spare2", getSpare2());
		attributes.put("shooterCode", getShooterCode());
		attributes.put("shooterQualification", getShooterQualification());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long esfResultId = (Long)attributes.get("esfResultId");

		if (esfResultId != null) {
			setEsfResultId(esfResultId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer matchYear = (Integer)attributes.get("matchYear");

		if (matchYear != null) {
			setMatchYear(matchYear);
		}

		Integer numberMatch = (Integer)attributes.get("numberMatch");

		if (numberMatch != null) {
			setNumberMatch(numberMatch);
		}

		Long esfMatchId = (Long)attributes.get("esfMatchId");

		if (esfMatchId != null) {
			setEsfMatchId(esfMatchId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String name2 = (String)attributes.get("name2");

		if (name2 != null) {
			setName2(name2);
		}

		Long esfAssociationId = (Long)attributes.get("esfAssociationId");

		if (esfAssociationId != null) {
			setEsfAssociationId(esfAssociationId);
		}

		String sportTypeCode = (String)attributes.get("sportTypeCode");

		if (sportTypeCode != null) {
			setSportTypeCode(sportTypeCode);
		}

		Date startdDate = (Date)attributes.get("startdDate");

		if (startdDate != null) {
			setStartdDate(startdDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		String groupRanking = (String)attributes.get("groupRanking");

		if (groupRanking != null) {
			setGroupRanking(groupRanking);
		}

		String descGroupRanking = (String)attributes.get("descGroupRanking");

		if (descGroupRanking != null) {
			setDescGroupRanking(descGroupRanking);
		}

		Integer position = (Integer)attributes.get("position");

		if (position != null) {
			setPosition(position);
		}

		String cardNumber = (String)attributes.get("cardNumber");

		if (cardNumber != null) {
			setCardNumber(cardNumber);
		}

		String shooterName = (String)attributes.get("shooterName");

		if (shooterName != null) {
			setShooterName(shooterName);
		}

		String nationCode = (String)attributes.get("nationCode");

		if (nationCode != null) {
			setNationCode(nationCode);
		}

		String category = (String)attributes.get("category");

		if (category != null) {
			setCategory(category);
		}

		String qualificationCode = (String)attributes.get("qualificationCode");

		if (qualificationCode != null) {
			setQualificationCode(qualificationCode);
		}

		Integer resultS1 = (Integer)attributes.get("resultS1");

		if (resultS1 != null) {
			setResultS1(resultS1);
		}

		Integer resultS2 = (Integer)attributes.get("resultS2");

		if (resultS2 != null) {
			setResultS2(resultS2);
		}

		Integer resultS3 = (Integer)attributes.get("resultS3");

		if (resultS3 != null) {
			setResultS3(resultS3);
		}

		Integer resultS4 = (Integer)attributes.get("resultS4");

		if (resultS4 != null) {
			setResultS4(resultS4);
		}

		Integer resultS5 = (Integer)attributes.get("resultS5");

		if (resultS5 != null) {
			setResultS5(resultS5);
		}

		Integer resultS6 = (Integer)attributes.get("resultS6");

		if (resultS6 != null) {
			setResultS6(resultS6);
		}

		Integer resultS7 = (Integer)attributes.get("resultS7");

		if (resultS7 != null) {
			setResultS7(resultS7);
		}

		Integer resultS8 = (Integer)attributes.get("resultS8");

		if (resultS8 != null) {
			setResultS8(resultS8);
		}

		Integer totalS = (Integer)attributes.get("totalS");

		if (totalS != null) {
			setTotalS(totalS);
		}

		Integer barrage = (Integer)attributes.get("barrage");

		if (barrage != null) {
			setBarrage(barrage);
		}

		Integer finalS = (Integer)attributes.get("finalS");

		if (finalS != null) {
			setFinalS(finalS);
		}

		Integer finalTotal = (Integer)attributes.get("finalTotal");

		if (finalTotal != null) {
			setFinalTotal(finalTotal);
		}

		Integer american1 = (Integer)attributes.get("american1");

		if (american1 != null) {
			setAmerican1(american1);
		}

		Integer american2 = (Integer)attributes.get("american2");

		if (american2 != null) {
			setAmerican2(american2);
		}

		Integer american3 = (Integer)attributes.get("american3");

		if (american3 != null) {
			setAmerican3(american3);
		}

		String rifle = (String)attributes.get("rifle");

		if (rifle != null) {
			setRifle(rifle);
		}

		String caliber = (String)attributes.get("caliber");

		if (caliber != null) {
			setCaliber(caliber);
		}

		String catridge = (String)attributes.get("catridge");

		if (catridge != null) {
			setCatridge(catridge);
		}

		String finalType = (String)attributes.get("finalType");

		if (finalType != null) {
			setFinalType(finalType);
		}

		Integer semifinalResult = (Integer)attributes.get("semifinalResult");

		if (semifinalResult != null) {
			setSemifinalResult(semifinalResult);
		}

		Integer shootOff1s = (Integer)attributes.get("shootOff1s");

		if (shootOff1s != null) {
			setShootOff1s(shootOff1s);
		}

		Integer shootOff2s = (Integer)attributes.get("shootOff2s");

		if (shootOff2s != null) {
			setShootOff2s(shootOff2s);
		}

		Integer shootOff3s = (Integer)attributes.get("shootOff3s");

		if (shootOff3s != null) {
			setShootOff3s(shootOff3s);
		}

		Integer bronzeResult = (Integer)attributes.get("bronzeResult");

		if (bronzeResult != null) {
			setBronzeResult(bronzeResult);
		}

		Integer shootOffBronze = (Integer)attributes.get("shootOffBronze");

		if (shootOffBronze != null) {
			setShootOffBronze(shootOffBronze);
		}

		Integer goldResult = (Integer)attributes.get("goldResult");

		if (goldResult != null) {
			setGoldResult(goldResult);
		}

		Integer shootOffGold = (Integer)attributes.get("shootOffGold");

		if (shootOffGold != null) {
			setShootOffGold(shootOffGold);
		}

		String teamCategory = (String)attributes.get("teamCategory");

		if (teamCategory != null) {
			setTeamCategory(teamCategory);
		}

		String teamName = (String)attributes.get("teamName");

		if (teamName != null) {
			setTeamName(teamName);
		}

		String naz_int = (String)attributes.get("naz_int");

		if (naz_int != null) {
			setNaz_int(naz_int);
		}

		Integer showTypeCode = (Integer)attributes.get("showTypeCode");

		if (showTypeCode != null) {
			setShowTypeCode(showTypeCode);
		}

		String showType = (String)attributes.get("showType");

		if (showType != null) {
			setShowType(showType);
		}

		Long esfUserId = (Long)attributes.get("esfUserId");

		if (esfUserId != null) {
			setEsfUserId(esfUserId);
		}

		Date variationDate = (Date)attributes.get("variationDate");

		if (variationDate != null) {
			setVariationDate(variationDate);
		}

		Integer sent = (Integer)attributes.get("sent");

		if (sent != null) {
			setSent(sent);
		}

		String youthQualification = (String)attributes.get("youthQualification");

		if (youthQualification != null) {
			setYouthQualification(youthQualification);
		}

		Long esfMatchTypeId = (Long)attributes.get("esfMatchTypeId");

		if (esfMatchTypeId != null) {
			setEsfMatchTypeId(esfMatchTypeId);
		}

		Integer resultClassTeam = (Integer)attributes.get("resultClassTeam");

		if (resultClassTeam != null) {
			setResultClassTeam(resultClassTeam);
		}

		Integer spare1 = (Integer)attributes.get("spare1");

		if (spare1 != null) {
			setSpare1(spare1);
		}

		Integer spare2 = (Integer)attributes.get("spare2");

		if (spare2 != null) {
			setSpare2(spare2);
		}

		Long shooterCode = (Long)attributes.get("shooterCode");

		if (shooterCode != null) {
			setShooterCode(shooterCode);
		}

		Long shooterQualification = (Long)attributes.get("shooterQualification");

		if (shooterQualification != null) {
			setShooterQualification(shooterQualification);
		}
	}

	@JSON
	@Override
	public long getEsfResultId() {
		return _esfResultId;
	}

	@Override
	public void setEsfResultId(long esfResultId) {
		_esfResultId = esfResultId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getMatchYear() {
		return _matchYear;
	}

	@Override
	public void setMatchYear(int matchYear) {
		_matchYear = matchYear;
	}

	@JSON
	@Override
	public int getNumberMatch() {
		return _numberMatch;
	}

	@Override
	public void setNumberMatch(int numberMatch) {
		_numberMatch = numberMatch;
	}

	@JSON
	@Override
	public long getEsfMatchId() {
		return _esfMatchId;
	}

	@Override
	public void setEsfMatchId(long esfMatchId) {
		_columnBitmask |= ESFMATCHID_COLUMN_BITMASK;

		if (!_setOriginalEsfMatchId) {
			_setOriginalEsfMatchId = true;

			_originalEsfMatchId = _esfMatchId;
		}

		_esfMatchId = esfMatchId;
	}

	public long getOriginalEsfMatchId() {
		return _originalEsfMatchId;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getName2() {
		if (_name2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _name2;
		}
	}

	@Override
	public void setName2(String name2) {
		_name2 = name2;
	}

	@JSON
	@Override
	public long getEsfAssociationId() {
		return _esfAssociationId;
	}

	@Override
	public void setEsfAssociationId(long esfAssociationId) {
		_esfAssociationId = esfAssociationId;
	}

	@JSON
	@Override
	public String getSportTypeCode() {
		if (_sportTypeCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _sportTypeCode;
		}
	}

	@Override
	public void setSportTypeCode(String sportTypeCode) {
		_sportTypeCode = sportTypeCode;
	}

	@JSON
	@Override
	public Date getStartdDate() {
		return _startdDate;
	}

	@Override
	public void setStartdDate(Date startdDate) {
		_startdDate = startdDate;
	}

	@JSON
	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@JSON
	@Override
	public String getGroupRanking() {
		if (_groupRanking == null) {
			return StringPool.BLANK;
		}
		else {
			return _groupRanking;
		}
	}

	@Override
	public void setGroupRanking(String groupRanking) {
		_groupRanking = groupRanking;
	}

	@JSON
	@Override
	public String getDescGroupRanking() {
		if (_descGroupRanking == null) {
			return StringPool.BLANK;
		}
		else {
			return _descGroupRanking;
		}
	}

	@Override
	public void setDescGroupRanking(String descGroupRanking) {
		_columnBitmask = -1L;

		_descGroupRanking = descGroupRanking;
	}

	@JSON
	@Override
	public int getPosition() {
		return _position;
	}

	@Override
	public void setPosition(int position) {
		_columnBitmask = -1L;

		_position = position;
	}

	@JSON
	@Override
	public String getCardNumber() {
		if (_cardNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _cardNumber;
		}
	}

	@Override
	public void setCardNumber(String cardNumber) {
		_cardNumber = cardNumber;
	}

	@JSON
	@Override
	public String getShooterName() {
		if (_shooterName == null) {
			return StringPool.BLANK;
		}
		else {
			return _shooterName;
		}
	}

	@Override
	public void setShooterName(String shooterName) {
		_columnBitmask = -1L;

		_shooterName = shooterName;
	}

	@JSON
	@Override
	public String getNationCode() {
		if (_nationCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _nationCode;
		}
	}

	@Override
	public void setNationCode(String nationCode) {
		_nationCode = nationCode;
	}

	@JSON
	@Override
	public String getCategory() {
		if (_category == null) {
			return StringPool.BLANK;
		}
		else {
			return _category;
		}
	}

	@Override
	public void setCategory(String category) {
		_category = category;
	}

	@JSON
	@Override
	public String getQualificationCode() {
		if (_qualificationCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _qualificationCode;
		}
	}

	@Override
	public void setQualificationCode(String qualificationCode) {
		_qualificationCode = qualificationCode;
	}

	@JSON
	@Override
	public int getResultS1() {
		return _resultS1;
	}

	@Override
	public void setResultS1(int resultS1) {
		_resultS1 = resultS1;
	}

	@JSON
	@Override
	public int getResultS2() {
		return _resultS2;
	}

	@Override
	public void setResultS2(int resultS2) {
		_resultS2 = resultS2;
	}

	@JSON
	@Override
	public int getResultS3() {
		return _resultS3;
	}

	@Override
	public void setResultS3(int resultS3) {
		_resultS3 = resultS3;
	}

	@JSON
	@Override
	public int getResultS4() {
		return _resultS4;
	}

	@Override
	public void setResultS4(int resultS4) {
		_resultS4 = resultS4;
	}

	@JSON
	@Override
	public int getResultS5() {
		return _resultS5;
	}

	@Override
	public void setResultS5(int resultS5) {
		_resultS5 = resultS5;
	}

	@JSON
	@Override
	public int getResultS6() {
		return _resultS6;
	}

	@Override
	public void setResultS6(int resultS6) {
		_resultS6 = resultS6;
	}

	@JSON
	@Override
	public int getResultS7() {
		return _resultS7;
	}

	@Override
	public void setResultS7(int resultS7) {
		_resultS7 = resultS7;
	}

	@JSON
	@Override
	public int getResultS8() {
		return _resultS8;
	}

	@Override
	public void setResultS8(int resultS8) {
		_resultS8 = resultS8;
	}

	@JSON
	@Override
	public int getTotalS() {
		return _totalS;
	}

	@Override
	public void setTotalS(int totalS) {
		_totalS = totalS;
	}

	@JSON
	@Override
	public int getBarrage() {
		return _barrage;
	}

	@Override
	public void setBarrage(int barrage) {
		_barrage = barrage;
	}

	@JSON
	@Override
	public int getFinalS() {
		return _finalS;
	}

	@Override
	public void setFinalS(int finalS) {
		_finalS = finalS;
	}

	@JSON
	@Override
	public int getFinalTotal() {
		return _finalTotal;
	}

	@Override
	public void setFinalTotal(int finalTotal) {
		_finalTotal = finalTotal;
	}

	@JSON
	@Override
	public int getAmerican1() {
		return _american1;
	}

	@Override
	public void setAmerican1(int american1) {
		_american1 = american1;
	}

	@JSON
	@Override
	public int getAmerican2() {
		return _american2;
	}

	@Override
	public void setAmerican2(int american2) {
		_american2 = american2;
	}

	@JSON
	@Override
	public int getAmerican3() {
		return _american3;
	}

	@Override
	public void setAmerican3(int american3) {
		_american3 = american3;
	}

	@JSON
	@Override
	public String getRifle() {
		if (_rifle == null) {
			return StringPool.BLANK;
		}
		else {
			return _rifle;
		}
	}

	@Override
	public void setRifle(String rifle) {
		_rifle = rifle;
	}

	@JSON
	@Override
	public String getCaliber() {
		if (_caliber == null) {
			return StringPool.BLANK;
		}
		else {
			return _caliber;
		}
	}

	@Override
	public void setCaliber(String caliber) {
		_caliber = caliber;
	}

	@JSON
	@Override
	public String getCatridge() {
		if (_catridge == null) {
			return StringPool.BLANK;
		}
		else {
			return _catridge;
		}
	}

	@Override
	public void setCatridge(String catridge) {
		_catridge = catridge;
	}

	@JSON
	@Override
	public String getFinalType() {
		if (_finalType == null) {
			return StringPool.BLANK;
		}
		else {
			return _finalType;
		}
	}

	@Override
	public void setFinalType(String finalType) {
		_finalType = finalType;
	}

	@JSON
	@Override
	public int getSemifinalResult() {
		return _semifinalResult;
	}

	@Override
	public void setSemifinalResult(int semifinalResult) {
		_semifinalResult = semifinalResult;
	}

	@JSON
	@Override
	public int getShootOff1s() {
		return _shootOff1s;
	}

	@Override
	public void setShootOff1s(int shootOff1s) {
		_shootOff1s = shootOff1s;
	}

	@JSON
	@Override
	public int getShootOff2s() {
		return _shootOff2s;
	}

	@Override
	public void setShootOff2s(int shootOff2s) {
		_shootOff2s = shootOff2s;
	}

	@JSON
	@Override
	public int getShootOff3s() {
		return _shootOff3s;
	}

	@Override
	public void setShootOff3s(int shootOff3s) {
		_shootOff3s = shootOff3s;
	}

	@JSON
	@Override
	public int getBronzeResult() {
		return _bronzeResult;
	}

	@Override
	public void setBronzeResult(int bronzeResult) {
		_bronzeResult = bronzeResult;
	}

	@JSON
	@Override
	public int getShootOffBronze() {
		return _shootOffBronze;
	}

	@Override
	public void setShootOffBronze(int shootOffBronze) {
		_shootOffBronze = shootOffBronze;
	}

	@JSON
	@Override
	public int getGoldResult() {
		return _goldResult;
	}

	@Override
	public void setGoldResult(int goldResult) {
		_goldResult = goldResult;
	}

	@JSON
	@Override
	public int getShootOffGold() {
		return _shootOffGold;
	}

	@Override
	public void setShootOffGold(int shootOffGold) {
		_shootOffGold = shootOffGold;
	}

	@JSON
	@Override
	public String getTeamCategory() {
		if (_teamCategory == null) {
			return StringPool.BLANK;
		}
		else {
			return _teamCategory;
		}
	}

	@Override
	public void setTeamCategory(String teamCategory) {
		_teamCategory = teamCategory;
	}

	@JSON
	@Override
	public String getTeamName() {
		if (_teamName == null) {
			return StringPool.BLANK;
		}
		else {
			return _teamName;
		}
	}

	@Override
	public void setTeamName(String teamName) {
		_teamName = teamName;
	}

	@JSON
	@Override
	public String getNaz_int() {
		if (_naz_int == null) {
			return StringPool.BLANK;
		}
		else {
			return _naz_int;
		}
	}

	@Override
	public void setNaz_int(String naz_int) {
		_naz_int = naz_int;
	}

	@JSON
	@Override
	public int getShowTypeCode() {
		return _showTypeCode;
	}

	@Override
	public void setShowTypeCode(int showTypeCode) {
		_showTypeCode = showTypeCode;
	}

	@JSON
	@Override
	public String getShowType() {
		if (_showType == null) {
			return StringPool.BLANK;
		}
		else {
			return _showType;
		}
	}

	@Override
	public void setShowType(String showType) {
		_showType = showType;
	}

	@JSON
	@Override
	public long getEsfUserId() {
		return _esfUserId;
	}

	@Override
	public void setEsfUserId(long esfUserId) {
		_columnBitmask |= ESFUSERID_COLUMN_BITMASK;

		if (!_setOriginalEsfUserId) {
			_setOriginalEsfUserId = true;

			_originalEsfUserId = _esfUserId;
		}

		_esfUserId = esfUserId;
	}

	@Override
	public String getEsfUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getEsfUserId(), "uuid", _esfUserUuid);
	}

	@Override
	public void setEsfUserUuid(String esfUserUuid) {
		_esfUserUuid = esfUserUuid;
	}

	public long getOriginalEsfUserId() {
		return _originalEsfUserId;
	}

	@JSON
	@Override
	public Date getVariationDate() {
		return _variationDate;
	}

	@Override
	public void setVariationDate(Date variationDate) {
		_variationDate = variationDate;
	}

	@JSON
	@Override
	public int getSent() {
		return _sent;
	}

	@Override
	public void setSent(int sent) {
		_sent = sent;
	}

	@JSON
	@Override
	public String getYouthQualification() {
		if (_youthQualification == null) {
			return StringPool.BLANK;
		}
		else {
			return _youthQualification;
		}
	}

	@Override
	public void setYouthQualification(String youthQualification) {
		_youthQualification = youthQualification;
	}

	@JSON
	@Override
	public long getEsfMatchTypeId() {
		return _esfMatchTypeId;
	}

	@Override
	public void setEsfMatchTypeId(long esfMatchTypeId) {
		_columnBitmask |= ESFMATCHTYPEID_COLUMN_BITMASK;

		if (!_setOriginalEsfMatchTypeId) {
			_setOriginalEsfMatchTypeId = true;

			_originalEsfMatchTypeId = _esfMatchTypeId;
		}

		_esfMatchTypeId = esfMatchTypeId;
	}

	public long getOriginalEsfMatchTypeId() {
		return _originalEsfMatchTypeId;
	}

	@JSON
	@Override
	public int getResultClassTeam() {
		return _resultClassTeam;
	}

	@Override
	public void setResultClassTeam(int resultClassTeam) {
		_columnBitmask |= RESULTCLASSTEAM_COLUMN_BITMASK;

		if (!_setOriginalResultClassTeam) {
			_setOriginalResultClassTeam = true;

			_originalResultClassTeam = _resultClassTeam;
		}

		_resultClassTeam = resultClassTeam;
	}

	public int getOriginalResultClassTeam() {
		return _originalResultClassTeam;
	}

	@JSON
	@Override
	public int getSpare1() {
		return _spare1;
	}

	@Override
	public void setSpare1(int spare1) {
		_spare1 = spare1;
	}

	@JSON
	@Override
	public int getSpare2() {
		return _spare2;
	}

	@Override
	public void setSpare2(int spare2) {
		_spare2 = spare2;
	}

	@JSON
	@Override
	public long getShooterCode() {
		return _shooterCode;
	}

	@Override
	public void setShooterCode(long shooterCode) {
		_shooterCode = shooterCode;
	}

	@JSON
	@Override
	public long getShooterQualification() {
		return _shooterQualification;
	}

	@Override
	public void setShooterQualification(long shooterQualification) {
		_columnBitmask = -1L;

		if (!_setOriginalShooterQualification) {
			_setOriginalShooterQualification = true;

			_originalShooterQualification = _shooterQualification;
		}

		_shooterQualification = shooterQualification;
	}

	public long getOriginalShooterQualification() {
		return _originalShooterQualification;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ESFResult.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ESFResult toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ESFResult)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ESFResultImpl esfResultImpl = new ESFResultImpl();

		esfResultImpl.setEsfResultId(getEsfResultId());
		esfResultImpl.setGroupId(getGroupId());
		esfResultImpl.setCompanyId(getCompanyId());
		esfResultImpl.setUserId(getUserId());
		esfResultImpl.setUserName(getUserName());
		esfResultImpl.setCreateDate(getCreateDate());
		esfResultImpl.setModifiedDate(getModifiedDate());
		esfResultImpl.setMatchYear(getMatchYear());
		esfResultImpl.setNumberMatch(getNumberMatch());
		esfResultImpl.setEsfMatchId(getEsfMatchId());
		esfResultImpl.setName(getName());
		esfResultImpl.setName2(getName2());
		esfResultImpl.setEsfAssociationId(getEsfAssociationId());
		esfResultImpl.setSportTypeCode(getSportTypeCode());
		esfResultImpl.setStartdDate(getStartdDate());
		esfResultImpl.setEndDate(getEndDate());
		esfResultImpl.setGroupRanking(getGroupRanking());
		esfResultImpl.setDescGroupRanking(getDescGroupRanking());
		esfResultImpl.setPosition(getPosition());
		esfResultImpl.setCardNumber(getCardNumber());
		esfResultImpl.setShooterName(getShooterName());
		esfResultImpl.setNationCode(getNationCode());
		esfResultImpl.setCategory(getCategory());
		esfResultImpl.setQualificationCode(getQualificationCode());
		esfResultImpl.setResultS1(getResultS1());
		esfResultImpl.setResultS2(getResultS2());
		esfResultImpl.setResultS3(getResultS3());
		esfResultImpl.setResultS4(getResultS4());
		esfResultImpl.setResultS5(getResultS5());
		esfResultImpl.setResultS6(getResultS6());
		esfResultImpl.setResultS7(getResultS7());
		esfResultImpl.setResultS8(getResultS8());
		esfResultImpl.setTotalS(getTotalS());
		esfResultImpl.setBarrage(getBarrage());
		esfResultImpl.setFinalS(getFinalS());
		esfResultImpl.setFinalTotal(getFinalTotal());
		esfResultImpl.setAmerican1(getAmerican1());
		esfResultImpl.setAmerican2(getAmerican2());
		esfResultImpl.setAmerican3(getAmerican3());
		esfResultImpl.setRifle(getRifle());
		esfResultImpl.setCaliber(getCaliber());
		esfResultImpl.setCatridge(getCatridge());
		esfResultImpl.setFinalType(getFinalType());
		esfResultImpl.setSemifinalResult(getSemifinalResult());
		esfResultImpl.setShootOff1s(getShootOff1s());
		esfResultImpl.setShootOff2s(getShootOff2s());
		esfResultImpl.setShootOff3s(getShootOff3s());
		esfResultImpl.setBronzeResult(getBronzeResult());
		esfResultImpl.setShootOffBronze(getShootOffBronze());
		esfResultImpl.setGoldResult(getGoldResult());
		esfResultImpl.setShootOffGold(getShootOffGold());
		esfResultImpl.setTeamCategory(getTeamCategory());
		esfResultImpl.setTeamName(getTeamName());
		esfResultImpl.setNaz_int(getNaz_int());
		esfResultImpl.setShowTypeCode(getShowTypeCode());
		esfResultImpl.setShowType(getShowType());
		esfResultImpl.setEsfUserId(getEsfUserId());
		esfResultImpl.setVariationDate(getVariationDate());
		esfResultImpl.setSent(getSent());
		esfResultImpl.setYouthQualification(getYouthQualification());
		esfResultImpl.setEsfMatchTypeId(getEsfMatchTypeId());
		esfResultImpl.setResultClassTeam(getResultClassTeam());
		esfResultImpl.setSpare1(getSpare1());
		esfResultImpl.setSpare2(getSpare2());
		esfResultImpl.setShooterCode(getShooterCode());
		esfResultImpl.setShooterQualification(getShooterQualification());

		esfResultImpl.resetOriginalValues();

		return esfResultImpl;
	}

	@Override
	public int compareTo(ESFResult esfResult) {
		int value = 0;

		value = getDescGroupRanking().compareTo(esfResult.getDescGroupRanking());

		if (value != 0) {
			return value;
		}

		if (getPosition() < esfResult.getPosition()) {
			value = -1;
		}
		else if (getPosition() > esfResult.getPosition()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		if (getShooterQualification() < esfResult.getShooterQualification()) {
			value = -1;
		}
		else if (getShooterQualification() > esfResult.getShooterQualification()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		value = getShooterName().compareTo(esfResult.getShooterName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ESFResult)) {
			return false;
		}

		ESFResult esfResult = (ESFResult)obj;

		long primaryKey = esfResult.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ESFResultModelImpl esfResultModelImpl = this;

		esfResultModelImpl._originalEsfMatchId = esfResultModelImpl._esfMatchId;

		esfResultModelImpl._setOriginalEsfMatchId = false;

		esfResultModelImpl._originalEsfUserId = esfResultModelImpl._esfUserId;

		esfResultModelImpl._setOriginalEsfUserId = false;

		esfResultModelImpl._originalEsfMatchTypeId = esfResultModelImpl._esfMatchTypeId;

		esfResultModelImpl._setOriginalEsfMatchTypeId = false;

		esfResultModelImpl._originalResultClassTeam = esfResultModelImpl._resultClassTeam;

		esfResultModelImpl._setOriginalResultClassTeam = false;

		esfResultModelImpl._originalShooterQualification = esfResultModelImpl._shooterQualification;

		esfResultModelImpl._setOriginalShooterQualification = false;

		esfResultModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ESFResult> toCacheModel() {
		ESFResultCacheModel esfResultCacheModel = new ESFResultCacheModel();

		esfResultCacheModel.esfResultId = getEsfResultId();

		esfResultCacheModel.groupId = getGroupId();

		esfResultCacheModel.companyId = getCompanyId();

		esfResultCacheModel.userId = getUserId();

		esfResultCacheModel.userName = getUserName();

		String userName = esfResultCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			esfResultCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			esfResultCacheModel.createDate = createDate.getTime();
		}
		else {
			esfResultCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			esfResultCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			esfResultCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		esfResultCacheModel.matchYear = getMatchYear();

		esfResultCacheModel.numberMatch = getNumberMatch();

		esfResultCacheModel.esfMatchId = getEsfMatchId();

		esfResultCacheModel.name = getName();

		String name = esfResultCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			esfResultCacheModel.name = null;
		}

		esfResultCacheModel.name2 = getName2();

		String name2 = esfResultCacheModel.name2;

		if ((name2 != null) && (name2.length() == 0)) {
			esfResultCacheModel.name2 = null;
		}

		esfResultCacheModel.esfAssociationId = getEsfAssociationId();

		esfResultCacheModel.sportTypeCode = getSportTypeCode();

		String sportTypeCode = esfResultCacheModel.sportTypeCode;

		if ((sportTypeCode != null) && (sportTypeCode.length() == 0)) {
			esfResultCacheModel.sportTypeCode = null;
		}

		Date startdDate = getStartdDate();

		if (startdDate != null) {
			esfResultCacheModel.startdDate = startdDate.getTime();
		}
		else {
			esfResultCacheModel.startdDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			esfResultCacheModel.endDate = endDate.getTime();
		}
		else {
			esfResultCacheModel.endDate = Long.MIN_VALUE;
		}

		esfResultCacheModel.groupRanking = getGroupRanking();

		String groupRanking = esfResultCacheModel.groupRanking;

		if ((groupRanking != null) && (groupRanking.length() == 0)) {
			esfResultCacheModel.groupRanking = null;
		}

		esfResultCacheModel.descGroupRanking = getDescGroupRanking();

		String descGroupRanking = esfResultCacheModel.descGroupRanking;

		if ((descGroupRanking != null) && (descGroupRanking.length() == 0)) {
			esfResultCacheModel.descGroupRanking = null;
		}

		esfResultCacheModel.position = getPosition();

		esfResultCacheModel.cardNumber = getCardNumber();

		String cardNumber = esfResultCacheModel.cardNumber;

		if ((cardNumber != null) && (cardNumber.length() == 0)) {
			esfResultCacheModel.cardNumber = null;
		}

		esfResultCacheModel.shooterName = getShooterName();

		String shooterName = esfResultCacheModel.shooterName;

		if ((shooterName != null) && (shooterName.length() == 0)) {
			esfResultCacheModel.shooterName = null;
		}

		esfResultCacheModel.nationCode = getNationCode();

		String nationCode = esfResultCacheModel.nationCode;

		if ((nationCode != null) && (nationCode.length() == 0)) {
			esfResultCacheModel.nationCode = null;
		}

		esfResultCacheModel.category = getCategory();

		String category = esfResultCacheModel.category;

		if ((category != null) && (category.length() == 0)) {
			esfResultCacheModel.category = null;
		}

		esfResultCacheModel.qualificationCode = getQualificationCode();

		String qualificationCode = esfResultCacheModel.qualificationCode;

		if ((qualificationCode != null) && (qualificationCode.length() == 0)) {
			esfResultCacheModel.qualificationCode = null;
		}

		esfResultCacheModel.resultS1 = getResultS1();

		esfResultCacheModel.resultS2 = getResultS2();

		esfResultCacheModel.resultS3 = getResultS3();

		esfResultCacheModel.resultS4 = getResultS4();

		esfResultCacheModel.resultS5 = getResultS5();

		esfResultCacheModel.resultS6 = getResultS6();

		esfResultCacheModel.resultS7 = getResultS7();

		esfResultCacheModel.resultS8 = getResultS8();

		esfResultCacheModel.totalS = getTotalS();

		esfResultCacheModel.barrage = getBarrage();

		esfResultCacheModel.finalS = getFinalS();

		esfResultCacheModel.finalTotal = getFinalTotal();

		esfResultCacheModel.american1 = getAmerican1();

		esfResultCacheModel.american2 = getAmerican2();

		esfResultCacheModel.american3 = getAmerican3();

		esfResultCacheModel.rifle = getRifle();

		String rifle = esfResultCacheModel.rifle;

		if ((rifle != null) && (rifle.length() == 0)) {
			esfResultCacheModel.rifle = null;
		}

		esfResultCacheModel.caliber = getCaliber();

		String caliber = esfResultCacheModel.caliber;

		if ((caliber != null) && (caliber.length() == 0)) {
			esfResultCacheModel.caliber = null;
		}

		esfResultCacheModel.catridge = getCatridge();

		String catridge = esfResultCacheModel.catridge;

		if ((catridge != null) && (catridge.length() == 0)) {
			esfResultCacheModel.catridge = null;
		}

		esfResultCacheModel.finalType = getFinalType();

		String finalType = esfResultCacheModel.finalType;

		if ((finalType != null) && (finalType.length() == 0)) {
			esfResultCacheModel.finalType = null;
		}

		esfResultCacheModel.semifinalResult = getSemifinalResult();

		esfResultCacheModel.shootOff1s = getShootOff1s();

		esfResultCacheModel.shootOff2s = getShootOff2s();

		esfResultCacheModel.shootOff3s = getShootOff3s();

		esfResultCacheModel.bronzeResult = getBronzeResult();

		esfResultCacheModel.shootOffBronze = getShootOffBronze();

		esfResultCacheModel.goldResult = getGoldResult();

		esfResultCacheModel.shootOffGold = getShootOffGold();

		esfResultCacheModel.teamCategory = getTeamCategory();

		String teamCategory = esfResultCacheModel.teamCategory;

		if ((teamCategory != null) && (teamCategory.length() == 0)) {
			esfResultCacheModel.teamCategory = null;
		}

		esfResultCacheModel.teamName = getTeamName();

		String teamName = esfResultCacheModel.teamName;

		if ((teamName != null) && (teamName.length() == 0)) {
			esfResultCacheModel.teamName = null;
		}

		esfResultCacheModel.naz_int = getNaz_int();

		String naz_int = esfResultCacheModel.naz_int;

		if ((naz_int != null) && (naz_int.length() == 0)) {
			esfResultCacheModel.naz_int = null;
		}

		esfResultCacheModel.showTypeCode = getShowTypeCode();

		esfResultCacheModel.showType = getShowType();

		String showType = esfResultCacheModel.showType;

		if ((showType != null) && (showType.length() == 0)) {
			esfResultCacheModel.showType = null;
		}

		esfResultCacheModel.esfUserId = getEsfUserId();

		Date variationDate = getVariationDate();

		if (variationDate != null) {
			esfResultCacheModel.variationDate = variationDate.getTime();
		}
		else {
			esfResultCacheModel.variationDate = Long.MIN_VALUE;
		}

		esfResultCacheModel.sent = getSent();

		esfResultCacheModel.youthQualification = getYouthQualification();

		String youthQualification = esfResultCacheModel.youthQualification;

		if ((youthQualification != null) && (youthQualification.length() == 0)) {
			esfResultCacheModel.youthQualification = null;
		}

		esfResultCacheModel.esfMatchTypeId = getEsfMatchTypeId();

		esfResultCacheModel.resultClassTeam = getResultClassTeam();

		esfResultCacheModel.spare1 = getSpare1();

		esfResultCacheModel.spare2 = getSpare2();

		esfResultCacheModel.shooterCode = getShooterCode();

		esfResultCacheModel.shooterQualification = getShooterQualification();

		return esfResultCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(133);

		sb.append("{esfResultId=");
		sb.append(getEsfResultId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", matchYear=");
		sb.append(getMatchYear());
		sb.append(", numberMatch=");
		sb.append(getNumberMatch());
		sb.append(", esfMatchId=");
		sb.append(getEsfMatchId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", name2=");
		sb.append(getName2());
		sb.append(", esfAssociationId=");
		sb.append(getEsfAssociationId());
		sb.append(", sportTypeCode=");
		sb.append(getSportTypeCode());
		sb.append(", startdDate=");
		sb.append(getStartdDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", groupRanking=");
		sb.append(getGroupRanking());
		sb.append(", descGroupRanking=");
		sb.append(getDescGroupRanking());
		sb.append(", position=");
		sb.append(getPosition());
		sb.append(", cardNumber=");
		sb.append(getCardNumber());
		sb.append(", shooterName=");
		sb.append(getShooterName());
		sb.append(", nationCode=");
		sb.append(getNationCode());
		sb.append(", category=");
		sb.append(getCategory());
		sb.append(", qualificationCode=");
		sb.append(getQualificationCode());
		sb.append(", resultS1=");
		sb.append(getResultS1());
		sb.append(", resultS2=");
		sb.append(getResultS2());
		sb.append(", resultS3=");
		sb.append(getResultS3());
		sb.append(", resultS4=");
		sb.append(getResultS4());
		sb.append(", resultS5=");
		sb.append(getResultS5());
		sb.append(", resultS6=");
		sb.append(getResultS6());
		sb.append(", resultS7=");
		sb.append(getResultS7());
		sb.append(", resultS8=");
		sb.append(getResultS8());
		sb.append(", totalS=");
		sb.append(getTotalS());
		sb.append(", barrage=");
		sb.append(getBarrage());
		sb.append(", finalS=");
		sb.append(getFinalS());
		sb.append(", finalTotal=");
		sb.append(getFinalTotal());
		sb.append(", american1=");
		sb.append(getAmerican1());
		sb.append(", american2=");
		sb.append(getAmerican2());
		sb.append(", american3=");
		sb.append(getAmerican3());
		sb.append(", rifle=");
		sb.append(getRifle());
		sb.append(", caliber=");
		sb.append(getCaliber());
		sb.append(", catridge=");
		sb.append(getCatridge());
		sb.append(", finalType=");
		sb.append(getFinalType());
		sb.append(", semifinalResult=");
		sb.append(getSemifinalResult());
		sb.append(", shootOff1s=");
		sb.append(getShootOff1s());
		sb.append(", shootOff2s=");
		sb.append(getShootOff2s());
		sb.append(", shootOff3s=");
		sb.append(getShootOff3s());
		sb.append(", bronzeResult=");
		sb.append(getBronzeResult());
		sb.append(", shootOffBronze=");
		sb.append(getShootOffBronze());
		sb.append(", goldResult=");
		sb.append(getGoldResult());
		sb.append(", shootOffGold=");
		sb.append(getShootOffGold());
		sb.append(", teamCategory=");
		sb.append(getTeamCategory());
		sb.append(", teamName=");
		sb.append(getTeamName());
		sb.append(", naz_int=");
		sb.append(getNaz_int());
		sb.append(", showTypeCode=");
		sb.append(getShowTypeCode());
		sb.append(", showType=");
		sb.append(getShowType());
		sb.append(", esfUserId=");
		sb.append(getEsfUserId());
		sb.append(", variationDate=");
		sb.append(getVariationDate());
		sb.append(", sent=");
		sb.append(getSent());
		sb.append(", youthQualification=");
		sb.append(getYouthQualification());
		sb.append(", esfMatchTypeId=");
		sb.append(getEsfMatchTypeId());
		sb.append(", resultClassTeam=");
		sb.append(getResultClassTeam());
		sb.append(", spare1=");
		sb.append(getSpare1());
		sb.append(", spare2=");
		sb.append(getSpare2());
		sb.append(", shooterCode=");
		sb.append(getShooterCode());
		sb.append(", shooterQualification=");
		sb.append(getShooterQualification());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(202);

		sb.append("<model><model-name>");
		sb.append("it.ethica.esf.model.ESFResult");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>esfResultId</column-name><column-value><![CDATA[");
		sb.append(getEsfResultId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>matchYear</column-name><column-value><![CDATA[");
		sb.append(getMatchYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberMatch</column-name><column-value><![CDATA[");
		sb.append(getNumberMatch());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfMatchId</column-name><column-value><![CDATA[");
		sb.append(getEsfMatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name2</column-name><column-value><![CDATA[");
		sb.append(getName2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfAssociationId</column-name><column-value><![CDATA[");
		sb.append(getEsfAssociationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sportTypeCode</column-name><column-value><![CDATA[");
		sb.append(getSportTypeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startdDate</column-name><column-value><![CDATA[");
		sb.append(getStartdDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupRanking</column-name><column-value><![CDATA[");
		sb.append(getGroupRanking());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>descGroupRanking</column-name><column-value><![CDATA[");
		sb.append(getDescGroupRanking());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>position</column-name><column-value><![CDATA[");
		sb.append(getPosition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cardNumber</column-name><column-value><![CDATA[");
		sb.append(getCardNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shooterName</column-name><column-value><![CDATA[");
		sb.append(getShooterName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nationCode</column-name><column-value><![CDATA[");
		sb.append(getNationCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>category</column-name><column-value><![CDATA[");
		sb.append(getCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>qualificationCode</column-name><column-value><![CDATA[");
		sb.append(getQualificationCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resultS1</column-name><column-value><![CDATA[");
		sb.append(getResultS1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resultS2</column-name><column-value><![CDATA[");
		sb.append(getResultS2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resultS3</column-name><column-value><![CDATA[");
		sb.append(getResultS3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resultS4</column-name><column-value><![CDATA[");
		sb.append(getResultS4());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resultS5</column-name><column-value><![CDATA[");
		sb.append(getResultS5());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resultS6</column-name><column-value><![CDATA[");
		sb.append(getResultS6());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resultS7</column-name><column-value><![CDATA[");
		sb.append(getResultS7());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resultS8</column-name><column-value><![CDATA[");
		sb.append(getResultS8());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalS</column-name><column-value><![CDATA[");
		sb.append(getTotalS());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>barrage</column-name><column-value><![CDATA[");
		sb.append(getBarrage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>finalS</column-name><column-value><![CDATA[");
		sb.append(getFinalS());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>finalTotal</column-name><column-value><![CDATA[");
		sb.append(getFinalTotal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>american1</column-name><column-value><![CDATA[");
		sb.append(getAmerican1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>american2</column-name><column-value><![CDATA[");
		sb.append(getAmerican2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>american3</column-name><column-value><![CDATA[");
		sb.append(getAmerican3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rifle</column-name><column-value><![CDATA[");
		sb.append(getRifle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>caliber</column-name><column-value><![CDATA[");
		sb.append(getCaliber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>catridge</column-name><column-value><![CDATA[");
		sb.append(getCatridge());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>finalType</column-name><column-value><![CDATA[");
		sb.append(getFinalType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>semifinalResult</column-name><column-value><![CDATA[");
		sb.append(getSemifinalResult());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shootOff1s</column-name><column-value><![CDATA[");
		sb.append(getShootOff1s());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shootOff2s</column-name><column-value><![CDATA[");
		sb.append(getShootOff2s());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shootOff3s</column-name><column-value><![CDATA[");
		sb.append(getShootOff3s());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bronzeResult</column-name><column-value><![CDATA[");
		sb.append(getBronzeResult());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shootOffBronze</column-name><column-value><![CDATA[");
		sb.append(getShootOffBronze());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>goldResult</column-name><column-value><![CDATA[");
		sb.append(getGoldResult());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shootOffGold</column-name><column-value><![CDATA[");
		sb.append(getShootOffGold());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>teamCategory</column-name><column-value><![CDATA[");
		sb.append(getTeamCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>teamName</column-name><column-value><![CDATA[");
		sb.append(getTeamName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>naz_int</column-name><column-value><![CDATA[");
		sb.append(getNaz_int());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>showTypeCode</column-name><column-value><![CDATA[");
		sb.append(getShowTypeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>showType</column-name><column-value><![CDATA[");
		sb.append(getShowType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfUserId</column-name><column-value><![CDATA[");
		sb.append(getEsfUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>variationDate</column-name><column-value><![CDATA[");
		sb.append(getVariationDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sent</column-name><column-value><![CDATA[");
		sb.append(getSent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>youthQualification</column-name><column-value><![CDATA[");
		sb.append(getYouthQualification());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfMatchTypeId</column-name><column-value><![CDATA[");
		sb.append(getEsfMatchTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>resultClassTeam</column-name><column-value><![CDATA[");
		sb.append(getResultClassTeam());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spare1</column-name><column-value><![CDATA[");
		sb.append(getSpare1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spare2</column-name><column-value><![CDATA[");
		sb.append(getSpare2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shooterCode</column-name><column-value><![CDATA[");
		sb.append(getShooterCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shooterQualification</column-name><column-value><![CDATA[");
		sb.append(getShooterQualification());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ESFResult.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ESFResult.class
		};
	private long _esfResultId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private int _matchYear;
	private int _numberMatch;
	private long _esfMatchId;
	private long _originalEsfMatchId;
	private boolean _setOriginalEsfMatchId;
	private String _name;
	private String _name2;
	private long _esfAssociationId;
	private String _sportTypeCode;
	private Date _startdDate;
	private Date _endDate;
	private String _groupRanking;
	private String _descGroupRanking;
	private int _position;
	private String _cardNumber;
	private String _shooterName;
	private String _nationCode;
	private String _category;
	private String _qualificationCode;
	private int _resultS1;
	private int _resultS2;
	private int _resultS3;
	private int _resultS4;
	private int _resultS5;
	private int _resultS6;
	private int _resultS7;
	private int _resultS8;
	private int _totalS;
	private int _barrage;
	private int _finalS;
	private int _finalTotal;
	private int _american1;
	private int _american2;
	private int _american3;
	private String _rifle;
	private String _caliber;
	private String _catridge;
	private String _finalType;
	private int _semifinalResult;
	private int _shootOff1s;
	private int _shootOff2s;
	private int _shootOff3s;
	private int _bronzeResult;
	private int _shootOffBronze;
	private int _goldResult;
	private int _shootOffGold;
	private String _teamCategory;
	private String _teamName;
	private String _naz_int;
	private int _showTypeCode;
	private String _showType;
	private long _esfUserId;
	private String _esfUserUuid;
	private long _originalEsfUserId;
	private boolean _setOriginalEsfUserId;
	private Date _variationDate;
	private int _sent;
	private String _youthQualification;
	private long _esfMatchTypeId;
	private long _originalEsfMatchTypeId;
	private boolean _setOriginalEsfMatchTypeId;
	private int _resultClassTeam;
	private int _originalResultClassTeam;
	private boolean _setOriginalResultClassTeam;
	private int _spare1;
	private int _spare2;
	private long _shooterCode;
	private long _shooterQualification;
	private long _originalShooterQualification;
	private boolean _setOriginalShooterQualification;
	private long _columnBitmask;
	private ESFResult _escapedModel;
}
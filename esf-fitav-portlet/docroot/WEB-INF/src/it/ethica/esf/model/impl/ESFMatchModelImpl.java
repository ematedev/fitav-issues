/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.ethica.esf.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import it.ethica.esf.model.ESFMatch;
import it.ethica.esf.model.ESFMatchModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ESFMatch service. Represents a row in the &quot;ESFMatch&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.ethica.esf.model.ESFMatchModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ESFMatchImpl}.
 * </p>
 *
 * @author Ethica
 * @see ESFMatchImpl
 * @see it.ethica.esf.model.ESFMatch
 * @see it.ethica.esf.model.ESFMatchModel
 * @generated
 */
public class ESFMatchModelImpl extends BaseModelImpl<ESFMatch>
	implements ESFMatchModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a e s f match model instance should use the {@link it.ethica.esf.model.ESFMatch} interface instead.
	 */
	public static final String TABLE_NAME = "ESFMatch";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "esfMatchId", Types.BIGINT },
			{ "startDate", Types.TIMESTAMP },
			{ "startHour", Types.VARCHAR },
			{ "esfSportTypeId", Types.BIGINT },
			{ "esfMatchTypeId", Types.BIGINT },
			{ "isDraft", Types.BOOLEAN },
			{ "isTeamMatch", Types.BOOLEAN },
			{ "isIndividualMatch", Types.BOOLEAN },
			{ "isJuniorMatch", Types.BOOLEAN },
			{ "numDisk", Types.INTEGER },
			{ "numDiskTeam", Types.INTEGER },
			{ "esfAssociationId", Types.BIGINT },
			{ "notes", Types.VARCHAR },
			{ "description", Types.BIGINT },
			{ "endDate", Types.TIMESTAMP },
			{ "numFields", Types.INTEGER },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "isSingleMatch", Types.BOOLEAN },
			{ "site", Types.VARCHAR },
			{ "countryId", Types.BIGINT },
			{ "code_", Types.VARCHAR },
			{ "isNational", Types.BOOLEAN },
			{ "HasPenality", Types.BOOLEAN },
			{ "isOlimpicQualificationMatch", Types.BOOLEAN },
			{ "eventType", Types.VARCHAR },
			{ "notNationalAssotiation", Types.VARCHAR },
			{ "isChangeCategoryMatch", Types.BOOLEAN },
			{ "esfNationalSportTypeId", Types.VARCHAR },
			{ "oldCode", Types.VARCHAR },
			{ "matchYear", Types.INTEGER },
			{ "matchYearSeq", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table ESFMatch (uuid_ VARCHAR(75) null,esfMatchId LONG not null primary key,startDate DATE null,startHour VARCHAR(75) null,esfSportTypeId LONG,esfMatchTypeId LONG,isDraft BOOLEAN,isTeamMatch BOOLEAN,isIndividualMatch BOOLEAN,isJuniorMatch BOOLEAN,numDisk INTEGER,numDiskTeam INTEGER,esfAssociationId LONG,notes VARCHAR(75) null,description LONG,endDate DATE null,numFields INTEGER,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,isSingleMatch BOOLEAN,site VARCHAR(75) null,countryId LONG,code_ VARCHAR(75) null,isNational BOOLEAN,HasPenality BOOLEAN,isOlimpicQualificationMatch BOOLEAN,eventType VARCHAR(75) null,notNationalAssotiation VARCHAR(75) null,isChangeCategoryMatch BOOLEAN,esfNationalSportTypeId VARCHAR(75) null,oldCode VARCHAR(75) null,matchYear INTEGER,matchYearSeq INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table ESFMatch";
	public static final String ORDER_BY_JPQL = " ORDER BY esfMatch.esfMatchId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ESFMatch.esfMatchId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.ethica.esf.model.ESFMatch"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.ethica.esf.model.ESFMatch"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.it.ethica.esf.model.ESFMatch"),
			true);
	public static long CODE_COLUMN_BITMASK = 1L;
	public static long COMPANYID_COLUMN_BITMASK = 2L;
	public static long DESCRIPTION_COLUMN_BITMASK = 4L;
	public static long ESFASSOCIATIONID_COLUMN_BITMASK = 8L;
	public static long ESFMATCHTYPEID_COLUMN_BITMASK = 16L;
	public static long ESFSPORTTYPEID_COLUMN_BITMASK = 32L;
	public static long EVENTTYPE_COLUMN_BITMASK = 64L;
	public static long GROUPID_COLUMN_BITMASK = 128L;
	public static long ISCHANGECATEGORYMATCH_COLUMN_BITMASK = 256L;
	public static long ISNATIONAL_COLUMN_BITMASK = 512L;
	public static long MATCHYEAR_COLUMN_BITMASK = 1024L;
	public static long MATCHYEARSEQ_COLUMN_BITMASK = 2048L;
	public static long STARTDATE_COLUMN_BITMASK = 4096L;
	public static long USERID_COLUMN_BITMASK = 8192L;
	public static long UUID_COLUMN_BITMASK = 16384L;
	public static long ESFMATCHID_COLUMN_BITMASK = 32768L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.ethica.esf.model.ESFMatch"));

	public ESFMatchModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _esfMatchId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEsfMatchId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _esfMatchId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ESFMatch.class;
	}

	@Override
	public String getModelClassName() {
		return ESFMatch.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("esfMatchId", getEsfMatchId());
		attributes.put("startDate", getStartDate());
		attributes.put("startHour", getStartHour());
		attributes.put("esfSportTypeId", getEsfSportTypeId());
		attributes.put("esfMatchTypeId", getEsfMatchTypeId());
		attributes.put("isDraft", getIsDraft());
		attributes.put("isTeamMatch", getIsTeamMatch());
		attributes.put("isIndividualMatch", getIsIndividualMatch());
		attributes.put("isJuniorMatch", getIsJuniorMatch());
		attributes.put("numDisk", getNumDisk());
		attributes.put("numDiskTeam", getNumDiskTeam());
		attributes.put("esfAssociationId", getEsfAssociationId());
		attributes.put("notes", getNotes());
		attributes.put("description", getDescription());
		attributes.put("endDate", getEndDate());
		attributes.put("numFields", getNumFields());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("isSingleMatch", getIsSingleMatch());
		attributes.put("site", getSite());
		attributes.put("countryId", getCountryId());
		attributes.put("code", getCode());
		attributes.put("isNational", getIsNational());
		attributes.put("HasPenality", getHasPenality());
		attributes.put("isOlimpicQualificationMatch",
			getIsOlimpicQualificationMatch());
		attributes.put("eventType", getEventType());
		attributes.put("notNationalAssotiation", getNotNationalAssotiation());
		attributes.put("isChangeCategoryMatch", getIsChangeCategoryMatch());
		attributes.put("esfNationalSportTypeId", getEsfNationalSportTypeId());
		attributes.put("oldCode", getOldCode());
		attributes.put("matchYear", getMatchYear());
		attributes.put("matchYearSeq", getMatchYearSeq());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long esfMatchId = (Long)attributes.get("esfMatchId");

		if (esfMatchId != null) {
			setEsfMatchId(esfMatchId);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		String startHour = (String)attributes.get("startHour");

		if (startHour != null) {
			setStartHour(startHour);
		}

		Long esfSportTypeId = (Long)attributes.get("esfSportTypeId");

		if (esfSportTypeId != null) {
			setEsfSportTypeId(esfSportTypeId);
		}

		Long esfMatchTypeId = (Long)attributes.get("esfMatchTypeId");

		if (esfMatchTypeId != null) {
			setEsfMatchTypeId(esfMatchTypeId);
		}

		Boolean isDraft = (Boolean)attributes.get("isDraft");

		if (isDraft != null) {
			setIsDraft(isDraft);
		}

		Boolean isTeamMatch = (Boolean)attributes.get("isTeamMatch");

		if (isTeamMatch != null) {
			setIsTeamMatch(isTeamMatch);
		}

		Boolean isIndividualMatch = (Boolean)attributes.get("isIndividualMatch");

		if (isIndividualMatch != null) {
			setIsIndividualMatch(isIndividualMatch);
		}

		Boolean isJuniorMatch = (Boolean)attributes.get("isJuniorMatch");

		if (isJuniorMatch != null) {
			setIsJuniorMatch(isJuniorMatch);
		}

		Integer numDisk = (Integer)attributes.get("numDisk");

		if (numDisk != null) {
			setNumDisk(numDisk);
		}

		Integer numDiskTeam = (Integer)attributes.get("numDiskTeam");

		if (numDiskTeam != null) {
			setNumDiskTeam(numDiskTeam);
		}

		Long esfAssociationId = (Long)attributes.get("esfAssociationId");

		if (esfAssociationId != null) {
			setEsfAssociationId(esfAssociationId);
		}

		String notes = (String)attributes.get("notes");

		if (notes != null) {
			setNotes(notes);
		}

		Long description = (Long)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		Integer numFields = (Integer)attributes.get("numFields");

		if (numFields != null) {
			setNumFields(numFields);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Boolean isSingleMatch = (Boolean)attributes.get("isSingleMatch");

		if (isSingleMatch != null) {
			setIsSingleMatch(isSingleMatch);
		}

		String site = (String)attributes.get("site");

		if (site != null) {
			setSite(site);
		}

		Long countryId = (Long)attributes.get("countryId");

		if (countryId != null) {
			setCountryId(countryId);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		Boolean isNational = (Boolean)attributes.get("isNational");

		if (isNational != null) {
			setIsNational(isNational);
		}

		Boolean HasPenality = (Boolean)attributes.get("HasPenality");

		if (HasPenality != null) {
			setHasPenality(HasPenality);
		}

		Boolean isOlimpicQualificationMatch = (Boolean)attributes.get(
				"isOlimpicQualificationMatch");

		if (isOlimpicQualificationMatch != null) {
			setIsOlimpicQualificationMatch(isOlimpicQualificationMatch);
		}

		String eventType = (String)attributes.get("eventType");

		if (eventType != null) {
			setEventType(eventType);
		}

		String notNationalAssotiation = (String)attributes.get(
				"notNationalAssotiation");

		if (notNationalAssotiation != null) {
			setNotNationalAssotiation(notNationalAssotiation);
		}

		Boolean isChangeCategoryMatch = (Boolean)attributes.get(
				"isChangeCategoryMatch");

		if (isChangeCategoryMatch != null) {
			setIsChangeCategoryMatch(isChangeCategoryMatch);
		}

		String esfNationalSportTypeId = (String)attributes.get(
				"esfNationalSportTypeId");

		if (esfNationalSportTypeId != null) {
			setEsfNationalSportTypeId(esfNationalSportTypeId);
		}

		String oldCode = (String)attributes.get("oldCode");

		if (oldCode != null) {
			setOldCode(oldCode);
		}

		Integer matchYear = (Integer)attributes.get("matchYear");

		if (matchYear != null) {
			setMatchYear(matchYear);
		}

		Integer matchYearSeq = (Integer)attributes.get("matchYearSeq");

		if (matchYearSeq != null) {
			setMatchYearSeq(matchYearSeq);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getEsfMatchId() {
		return _esfMatchId;
	}

	@Override
	public void setEsfMatchId(long esfMatchId) {
		_esfMatchId = esfMatchId;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_columnBitmask |= STARTDATE_COLUMN_BITMASK;

		if (_originalStartDate == null) {
			_originalStartDate = _startDate;
		}

		_startDate = startDate;
	}

	public Date getOriginalStartDate() {
		return _originalStartDate;
	}

	@Override
	public String getStartHour() {
		if (_startHour == null) {
			return StringPool.BLANK;
		}
		else {
			return _startHour;
		}
	}

	@Override
	public void setStartHour(String startHour) {
		_startHour = startHour;
	}

	@Override
	public long getEsfSportTypeId() {
		return _esfSportTypeId;
	}

	@Override
	public void setEsfSportTypeId(long esfSportTypeId) {
		_columnBitmask |= ESFSPORTTYPEID_COLUMN_BITMASK;

		if (!_setOriginalEsfSportTypeId) {
			_setOriginalEsfSportTypeId = true;

			_originalEsfSportTypeId = _esfSportTypeId;
		}

		_esfSportTypeId = esfSportTypeId;
	}

	public long getOriginalEsfSportTypeId() {
		return _originalEsfSportTypeId;
	}

	@Override
	public long getEsfMatchTypeId() {
		return _esfMatchTypeId;
	}

	@Override
	public void setEsfMatchTypeId(long esfMatchTypeId) {
		_columnBitmask |= ESFMATCHTYPEID_COLUMN_BITMASK;

		if (!_setOriginalEsfMatchTypeId) {
			_setOriginalEsfMatchTypeId = true;

			_originalEsfMatchTypeId = _esfMatchTypeId;
		}

		_esfMatchTypeId = esfMatchTypeId;
	}

	public long getOriginalEsfMatchTypeId() {
		return _originalEsfMatchTypeId;
	}

	@Override
	public boolean getIsDraft() {
		return _isDraft;
	}

	@Override
	public boolean isIsDraft() {
		return _isDraft;
	}

	@Override
	public void setIsDraft(boolean isDraft) {
		_isDraft = isDraft;
	}

	@Override
	public boolean getIsTeamMatch() {
		return _isTeamMatch;
	}

	@Override
	public boolean isIsTeamMatch() {
		return _isTeamMatch;
	}

	@Override
	public void setIsTeamMatch(boolean isTeamMatch) {
		_isTeamMatch = isTeamMatch;
	}

	@Override
	public boolean getIsIndividualMatch() {
		return _isIndividualMatch;
	}

	@Override
	public boolean isIsIndividualMatch() {
		return _isIndividualMatch;
	}

	@Override
	public void setIsIndividualMatch(boolean isIndividualMatch) {
		_isIndividualMatch = isIndividualMatch;
	}

	@Override
	public boolean getIsJuniorMatch() {
		return _isJuniorMatch;
	}

	@Override
	public boolean isIsJuniorMatch() {
		return _isJuniorMatch;
	}

	@Override
	public void setIsJuniorMatch(boolean isJuniorMatch) {
		_isJuniorMatch = isJuniorMatch;
	}

	@Override
	public int getNumDisk() {
		return _numDisk;
	}

	@Override
	public void setNumDisk(int numDisk) {
		_numDisk = numDisk;
	}

	@Override
	public int getNumDiskTeam() {
		return _numDiskTeam;
	}

	@Override
	public void setNumDiskTeam(int numDiskTeam) {
		_numDiskTeam = numDiskTeam;
	}

	@Override
	public long getEsfAssociationId() {
		return _esfAssociationId;
	}

	@Override
	public void setEsfAssociationId(long esfAssociationId) {
		_columnBitmask |= ESFASSOCIATIONID_COLUMN_BITMASK;

		if (!_setOriginalEsfAssociationId) {
			_setOriginalEsfAssociationId = true;

			_originalEsfAssociationId = _esfAssociationId;
		}

		_esfAssociationId = esfAssociationId;
	}

	public long getOriginalEsfAssociationId() {
		return _originalEsfAssociationId;
	}

	@Override
	public String getNotes() {
		if (_notes == null) {
			return StringPool.BLANK;
		}
		else {
			return _notes;
		}
	}

	@Override
	public void setNotes(String notes) {
		_notes = notes;
	}

	@Override
	public long getDescription() {
		return _description;
	}

	@Override
	public void setDescription(long description) {
		_columnBitmask |= DESCRIPTION_COLUMN_BITMASK;

		if (!_setOriginalDescription) {
			_setOriginalDescription = true;

			_originalDescription = _description;
		}

		_description = description;
	}

	public long getOriginalDescription() {
		return _originalDescription;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@Override
	public int getNumFields() {
		return _numFields;
	}

	@Override
	public void setNumFields(int numFields) {
		_numFields = numFields;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public boolean getIsSingleMatch() {
		return _isSingleMatch;
	}

	@Override
	public boolean isIsSingleMatch() {
		return _isSingleMatch;
	}

	@Override
	public void setIsSingleMatch(boolean isSingleMatch) {
		_isSingleMatch = isSingleMatch;
	}

	@Override
	public String getSite() {
		if (_site == null) {
			return StringPool.BLANK;
		}
		else {
			return _site;
		}
	}

	@Override
	public void setSite(String site) {
		_site = site;
	}

	@Override
	public long getCountryId() {
		return _countryId;
	}

	@Override
	public void setCountryId(long countryId) {
		_countryId = countryId;
	}

	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_columnBitmask |= CODE_COLUMN_BITMASK;

		if (_originalCode == null) {
			_originalCode = _code;
		}

		_code = code;
	}

	public String getOriginalCode() {
		return GetterUtil.getString(_originalCode);
	}

	@Override
	public boolean getIsNational() {
		return _isNational;
	}

	@Override
	public boolean isIsNational() {
		return _isNational;
	}

	@Override
	public void setIsNational(boolean isNational) {
		_columnBitmask |= ISNATIONAL_COLUMN_BITMASK;

		if (!_setOriginalIsNational) {
			_setOriginalIsNational = true;

			_originalIsNational = _isNational;
		}

		_isNational = isNational;
	}

	public boolean getOriginalIsNational() {
		return _originalIsNational;
	}

	@Override
	public boolean getHasPenality() {
		return _HasPenality;
	}

	@Override
	public boolean isHasPenality() {
		return _HasPenality;
	}

	@Override
	public void setHasPenality(boolean HasPenality) {
		_HasPenality = HasPenality;
	}

	@Override
	public boolean getIsOlimpicQualificationMatch() {
		return _isOlimpicQualificationMatch;
	}

	@Override
	public boolean isIsOlimpicQualificationMatch() {
		return _isOlimpicQualificationMatch;
	}

	@Override
	public void setIsOlimpicQualificationMatch(
		boolean isOlimpicQualificationMatch) {
		_isOlimpicQualificationMatch = isOlimpicQualificationMatch;
	}

	@Override
	public String getEventType() {
		if (_eventType == null) {
			return StringPool.BLANK;
		}
		else {
			return _eventType;
		}
	}

	@Override
	public void setEventType(String eventType) {
		_columnBitmask |= EVENTTYPE_COLUMN_BITMASK;

		if (_originalEventType == null) {
			_originalEventType = _eventType;
		}

		_eventType = eventType;
	}

	public String getOriginalEventType() {
		return GetterUtil.getString(_originalEventType);
	}

	@Override
	public String getNotNationalAssotiation() {
		if (_notNationalAssotiation == null) {
			return StringPool.BLANK;
		}
		else {
			return _notNationalAssotiation;
		}
	}

	@Override
	public void setNotNationalAssotiation(String notNationalAssotiation) {
		_notNationalAssotiation = notNationalAssotiation;
	}

	@Override
	public boolean getIsChangeCategoryMatch() {
		return _isChangeCategoryMatch;
	}

	@Override
	public boolean isIsChangeCategoryMatch() {
		return _isChangeCategoryMatch;
	}

	@Override
	public void setIsChangeCategoryMatch(boolean isChangeCategoryMatch) {
		_columnBitmask |= ISCHANGECATEGORYMATCH_COLUMN_BITMASK;

		if (!_setOriginalIsChangeCategoryMatch) {
			_setOriginalIsChangeCategoryMatch = true;

			_originalIsChangeCategoryMatch = _isChangeCategoryMatch;
		}

		_isChangeCategoryMatch = isChangeCategoryMatch;
	}

	public boolean getOriginalIsChangeCategoryMatch() {
		return _originalIsChangeCategoryMatch;
	}

	@Override
	public String getEsfNationalSportTypeId() {
		if (_esfNationalSportTypeId == null) {
			return StringPool.BLANK;
		}
		else {
			return _esfNationalSportTypeId;
		}
	}

	@Override
	public void setEsfNationalSportTypeId(String esfNationalSportTypeId) {
		_esfNationalSportTypeId = esfNationalSportTypeId;
	}

	@Override
	public String getOldCode() {
		if (_oldCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _oldCode;
		}
	}

	@Override
	public void setOldCode(String oldCode) {
		_oldCode = oldCode;
	}

	@Override
	public int getMatchYear() {
		return _matchYear;
	}

	@Override
	public void setMatchYear(int matchYear) {
		_columnBitmask |= MATCHYEAR_COLUMN_BITMASK;

		if (!_setOriginalMatchYear) {
			_setOriginalMatchYear = true;

			_originalMatchYear = _matchYear;
		}

		_matchYear = matchYear;
	}

	public int getOriginalMatchYear() {
		return _originalMatchYear;
	}

	@Override
	public int getMatchYearSeq() {
		return _matchYearSeq;
	}

	@Override
	public void setMatchYearSeq(int matchYearSeq) {
		_columnBitmask |= MATCHYEARSEQ_COLUMN_BITMASK;

		if (!_setOriginalMatchYearSeq) {
			_setOriginalMatchYearSeq = true;

			_originalMatchYearSeq = _matchYearSeq;
		}

		_matchYearSeq = matchYearSeq;
	}

	public int getOriginalMatchYearSeq() {
		return _originalMatchYearSeq;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				ESFMatch.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ESFMatch.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ESFMatch toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ESFMatch)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ESFMatchImpl esfMatchImpl = new ESFMatchImpl();

		esfMatchImpl.setUuid(getUuid());
		esfMatchImpl.setEsfMatchId(getEsfMatchId());
		esfMatchImpl.setStartDate(getStartDate());
		esfMatchImpl.setStartHour(getStartHour());
		esfMatchImpl.setEsfSportTypeId(getEsfSportTypeId());
		esfMatchImpl.setEsfMatchTypeId(getEsfMatchTypeId());
		esfMatchImpl.setIsDraft(getIsDraft());
		esfMatchImpl.setIsTeamMatch(getIsTeamMatch());
		esfMatchImpl.setIsIndividualMatch(getIsIndividualMatch());
		esfMatchImpl.setIsJuniorMatch(getIsJuniorMatch());
		esfMatchImpl.setNumDisk(getNumDisk());
		esfMatchImpl.setNumDiskTeam(getNumDiskTeam());
		esfMatchImpl.setEsfAssociationId(getEsfAssociationId());
		esfMatchImpl.setNotes(getNotes());
		esfMatchImpl.setDescription(getDescription());
		esfMatchImpl.setEndDate(getEndDate());
		esfMatchImpl.setNumFields(getNumFields());
		esfMatchImpl.setGroupId(getGroupId());
		esfMatchImpl.setCompanyId(getCompanyId());
		esfMatchImpl.setUserId(getUserId());
		esfMatchImpl.setUserName(getUserName());
		esfMatchImpl.setCreateDate(getCreateDate());
		esfMatchImpl.setModifiedDate(getModifiedDate());
		esfMatchImpl.setIsSingleMatch(getIsSingleMatch());
		esfMatchImpl.setSite(getSite());
		esfMatchImpl.setCountryId(getCountryId());
		esfMatchImpl.setCode(getCode());
		esfMatchImpl.setIsNational(getIsNational());
		esfMatchImpl.setHasPenality(getHasPenality());
		esfMatchImpl.setIsOlimpicQualificationMatch(getIsOlimpicQualificationMatch());
		esfMatchImpl.setEventType(getEventType());
		esfMatchImpl.setNotNationalAssotiation(getNotNationalAssotiation());
		esfMatchImpl.setIsChangeCategoryMatch(getIsChangeCategoryMatch());
		esfMatchImpl.setEsfNationalSportTypeId(getEsfNationalSportTypeId());
		esfMatchImpl.setOldCode(getOldCode());
		esfMatchImpl.setMatchYear(getMatchYear());
		esfMatchImpl.setMatchYearSeq(getMatchYearSeq());

		esfMatchImpl.resetOriginalValues();

		return esfMatchImpl;
	}

	@Override
	public int compareTo(ESFMatch esfMatch) {
		long primaryKey = esfMatch.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ESFMatch)) {
			return false;
		}

		ESFMatch esfMatch = (ESFMatch)obj;

		long primaryKey = esfMatch.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ESFMatchModelImpl esfMatchModelImpl = this;

		esfMatchModelImpl._originalUuid = esfMatchModelImpl._uuid;

		esfMatchModelImpl._originalStartDate = esfMatchModelImpl._startDate;

		esfMatchModelImpl._originalEsfSportTypeId = esfMatchModelImpl._esfSportTypeId;

		esfMatchModelImpl._setOriginalEsfSportTypeId = false;

		esfMatchModelImpl._originalEsfMatchTypeId = esfMatchModelImpl._esfMatchTypeId;

		esfMatchModelImpl._setOriginalEsfMatchTypeId = false;

		esfMatchModelImpl._originalEsfAssociationId = esfMatchModelImpl._esfAssociationId;

		esfMatchModelImpl._setOriginalEsfAssociationId = false;

		esfMatchModelImpl._originalDescription = esfMatchModelImpl._description;

		esfMatchModelImpl._setOriginalDescription = false;

		esfMatchModelImpl._originalGroupId = esfMatchModelImpl._groupId;

		esfMatchModelImpl._setOriginalGroupId = false;

		esfMatchModelImpl._originalCompanyId = esfMatchModelImpl._companyId;

		esfMatchModelImpl._setOriginalCompanyId = false;

		esfMatchModelImpl._originalUserId = esfMatchModelImpl._userId;

		esfMatchModelImpl._setOriginalUserId = false;

		esfMatchModelImpl._originalCode = esfMatchModelImpl._code;

		esfMatchModelImpl._originalIsNational = esfMatchModelImpl._isNational;

		esfMatchModelImpl._setOriginalIsNational = false;

		esfMatchModelImpl._originalEventType = esfMatchModelImpl._eventType;

		esfMatchModelImpl._originalIsChangeCategoryMatch = esfMatchModelImpl._isChangeCategoryMatch;

		esfMatchModelImpl._setOriginalIsChangeCategoryMatch = false;

		esfMatchModelImpl._originalMatchYear = esfMatchModelImpl._matchYear;

		esfMatchModelImpl._setOriginalMatchYear = false;

		esfMatchModelImpl._originalMatchYearSeq = esfMatchModelImpl._matchYearSeq;

		esfMatchModelImpl._setOriginalMatchYearSeq = false;

		esfMatchModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ESFMatch> toCacheModel() {
		ESFMatchCacheModel esfMatchCacheModel = new ESFMatchCacheModel();

		esfMatchCacheModel.uuid = getUuid();

		String uuid = esfMatchCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			esfMatchCacheModel.uuid = null;
		}

		esfMatchCacheModel.esfMatchId = getEsfMatchId();

		Date startDate = getStartDate();

		if (startDate != null) {
			esfMatchCacheModel.startDate = startDate.getTime();
		}
		else {
			esfMatchCacheModel.startDate = Long.MIN_VALUE;
		}

		esfMatchCacheModel.startHour = getStartHour();

		String startHour = esfMatchCacheModel.startHour;

		if ((startHour != null) && (startHour.length() == 0)) {
			esfMatchCacheModel.startHour = null;
		}

		esfMatchCacheModel.esfSportTypeId = getEsfSportTypeId();

		esfMatchCacheModel.esfMatchTypeId = getEsfMatchTypeId();

		esfMatchCacheModel.isDraft = getIsDraft();

		esfMatchCacheModel.isTeamMatch = getIsTeamMatch();

		esfMatchCacheModel.isIndividualMatch = getIsIndividualMatch();

		esfMatchCacheModel.isJuniorMatch = getIsJuniorMatch();

		esfMatchCacheModel.numDisk = getNumDisk();

		esfMatchCacheModel.numDiskTeam = getNumDiskTeam();

		esfMatchCacheModel.esfAssociationId = getEsfAssociationId();

		esfMatchCacheModel.notes = getNotes();

		String notes = esfMatchCacheModel.notes;

		if ((notes != null) && (notes.length() == 0)) {
			esfMatchCacheModel.notes = null;
		}

		esfMatchCacheModel.description = getDescription();

		Date endDate = getEndDate();

		if (endDate != null) {
			esfMatchCacheModel.endDate = endDate.getTime();
		}
		else {
			esfMatchCacheModel.endDate = Long.MIN_VALUE;
		}

		esfMatchCacheModel.numFields = getNumFields();

		esfMatchCacheModel.groupId = getGroupId();

		esfMatchCacheModel.companyId = getCompanyId();

		esfMatchCacheModel.userId = getUserId();

		esfMatchCacheModel.userName = getUserName();

		String userName = esfMatchCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			esfMatchCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			esfMatchCacheModel.createDate = createDate.getTime();
		}
		else {
			esfMatchCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			esfMatchCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			esfMatchCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		esfMatchCacheModel.isSingleMatch = getIsSingleMatch();

		esfMatchCacheModel.site = getSite();

		String site = esfMatchCacheModel.site;

		if ((site != null) && (site.length() == 0)) {
			esfMatchCacheModel.site = null;
		}

		esfMatchCacheModel.countryId = getCountryId();

		esfMatchCacheModel.code = getCode();

		String code = esfMatchCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			esfMatchCacheModel.code = null;
		}

		esfMatchCacheModel.isNational = getIsNational();

		esfMatchCacheModel.HasPenality = getHasPenality();

		esfMatchCacheModel.isOlimpicQualificationMatch = getIsOlimpicQualificationMatch();

		esfMatchCacheModel.eventType = getEventType();

		String eventType = esfMatchCacheModel.eventType;

		if ((eventType != null) && (eventType.length() == 0)) {
			esfMatchCacheModel.eventType = null;
		}

		esfMatchCacheModel.notNationalAssotiation = getNotNationalAssotiation();

		String notNationalAssotiation = esfMatchCacheModel.notNationalAssotiation;

		if ((notNationalAssotiation != null) &&
				(notNationalAssotiation.length() == 0)) {
			esfMatchCacheModel.notNationalAssotiation = null;
		}

		esfMatchCacheModel.isChangeCategoryMatch = getIsChangeCategoryMatch();

		esfMatchCacheModel.esfNationalSportTypeId = getEsfNationalSportTypeId();

		String esfNationalSportTypeId = esfMatchCacheModel.esfNationalSportTypeId;

		if ((esfNationalSportTypeId != null) &&
				(esfNationalSportTypeId.length() == 0)) {
			esfMatchCacheModel.esfNationalSportTypeId = null;
		}

		esfMatchCacheModel.oldCode = getOldCode();

		String oldCode = esfMatchCacheModel.oldCode;

		if ((oldCode != null) && (oldCode.length() == 0)) {
			esfMatchCacheModel.oldCode = null;
		}

		esfMatchCacheModel.matchYear = getMatchYear();

		esfMatchCacheModel.matchYearSeq = getMatchYearSeq();

		return esfMatchCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(75);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", esfMatchId=");
		sb.append(getEsfMatchId());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", startHour=");
		sb.append(getStartHour());
		sb.append(", esfSportTypeId=");
		sb.append(getEsfSportTypeId());
		sb.append(", esfMatchTypeId=");
		sb.append(getEsfMatchTypeId());
		sb.append(", isDraft=");
		sb.append(getIsDraft());
		sb.append(", isTeamMatch=");
		sb.append(getIsTeamMatch());
		sb.append(", isIndividualMatch=");
		sb.append(getIsIndividualMatch());
		sb.append(", isJuniorMatch=");
		sb.append(getIsJuniorMatch());
		sb.append(", numDisk=");
		sb.append(getNumDisk());
		sb.append(", numDiskTeam=");
		sb.append(getNumDiskTeam());
		sb.append(", esfAssociationId=");
		sb.append(getEsfAssociationId());
		sb.append(", notes=");
		sb.append(getNotes());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", numFields=");
		sb.append(getNumFields());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", isSingleMatch=");
		sb.append(getIsSingleMatch());
		sb.append(", site=");
		sb.append(getSite());
		sb.append(", countryId=");
		sb.append(getCountryId());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", isNational=");
		sb.append(getIsNational());
		sb.append(", HasPenality=");
		sb.append(getHasPenality());
		sb.append(", isOlimpicQualificationMatch=");
		sb.append(getIsOlimpicQualificationMatch());
		sb.append(", eventType=");
		sb.append(getEventType());
		sb.append(", notNationalAssotiation=");
		sb.append(getNotNationalAssotiation());
		sb.append(", isChangeCategoryMatch=");
		sb.append(getIsChangeCategoryMatch());
		sb.append(", esfNationalSportTypeId=");
		sb.append(getEsfNationalSportTypeId());
		sb.append(", oldCode=");
		sb.append(getOldCode());
		sb.append(", matchYear=");
		sb.append(getMatchYear());
		sb.append(", matchYearSeq=");
		sb.append(getMatchYearSeq());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(115);

		sb.append("<model><model-name>");
		sb.append("it.ethica.esf.model.ESFMatch");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfMatchId</column-name><column-value><![CDATA[");
		sb.append(getEsfMatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startHour</column-name><column-value><![CDATA[");
		sb.append(getStartHour());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfSportTypeId</column-name><column-value><![CDATA[");
		sb.append(getEsfSportTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfMatchTypeId</column-name><column-value><![CDATA[");
		sb.append(getEsfMatchTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDraft</column-name><column-value><![CDATA[");
		sb.append(getIsDraft());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isTeamMatch</column-name><column-value><![CDATA[");
		sb.append(getIsTeamMatch());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isIndividualMatch</column-name><column-value><![CDATA[");
		sb.append(getIsIndividualMatch());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isJuniorMatch</column-name><column-value><![CDATA[");
		sb.append(getIsJuniorMatch());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numDisk</column-name><column-value><![CDATA[");
		sb.append(getNumDisk());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numDiskTeam</column-name><column-value><![CDATA[");
		sb.append(getNumDiskTeam());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfAssociationId</column-name><column-value><![CDATA[");
		sb.append(getEsfAssociationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notes</column-name><column-value><![CDATA[");
		sb.append(getNotes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numFields</column-name><column-value><![CDATA[");
		sb.append(getNumFields());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isSingleMatch</column-name><column-value><![CDATA[");
		sb.append(getIsSingleMatch());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>site</column-name><column-value><![CDATA[");
		sb.append(getSite());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryId</column-name><column-value><![CDATA[");
		sb.append(getCountryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isNational</column-name><column-value><![CDATA[");
		sb.append(getIsNational());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>HasPenality</column-name><column-value><![CDATA[");
		sb.append(getHasPenality());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isOlimpicQualificationMatch</column-name><column-value><![CDATA[");
		sb.append(getIsOlimpicQualificationMatch());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventType</column-name><column-value><![CDATA[");
		sb.append(getEventType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notNationalAssotiation</column-name><column-value><![CDATA[");
		sb.append(getNotNationalAssotiation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isChangeCategoryMatch</column-name><column-value><![CDATA[");
		sb.append(getIsChangeCategoryMatch());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfNationalSportTypeId</column-name><column-value><![CDATA[");
		sb.append(getEsfNationalSportTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>oldCode</column-name><column-value><![CDATA[");
		sb.append(getOldCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>matchYear</column-name><column-value><![CDATA[");
		sb.append(getMatchYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>matchYearSeq</column-name><column-value><![CDATA[");
		sb.append(getMatchYearSeq());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ESFMatch.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ESFMatch.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _esfMatchId;
	private Date _startDate;
	private Date _originalStartDate;
	private String _startHour;
	private long _esfSportTypeId;
	private long _originalEsfSportTypeId;
	private boolean _setOriginalEsfSportTypeId;
	private long _esfMatchTypeId;
	private long _originalEsfMatchTypeId;
	private boolean _setOriginalEsfMatchTypeId;
	private boolean _isDraft;
	private boolean _isTeamMatch;
	private boolean _isIndividualMatch;
	private boolean _isJuniorMatch;
	private int _numDisk;
	private int _numDiskTeam;
	private long _esfAssociationId;
	private long _originalEsfAssociationId;
	private boolean _setOriginalEsfAssociationId;
	private String _notes;
	private long _description;
	private long _originalDescription;
	private boolean _setOriginalDescription;
	private Date _endDate;
	private int _numFields;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _isSingleMatch;
	private String _site;
	private long _countryId;
	private String _code;
	private String _originalCode;
	private boolean _isNational;
	private boolean _originalIsNational;
	private boolean _setOriginalIsNational;
	private boolean _HasPenality;
	private boolean _isOlimpicQualificationMatch;
	private String _eventType;
	private String _originalEventType;
	private String _notNationalAssotiation;
	private boolean _isChangeCategoryMatch;
	private boolean _originalIsChangeCategoryMatch;
	private boolean _setOriginalIsChangeCategoryMatch;
	private String _esfNationalSportTypeId;
	private String _oldCode;
	private int _matchYear;
	private int _originalMatchYear;
	private boolean _setOriginalMatchYear;
	private int _matchYearSeq;
	private int _originalMatchYearSeq;
	private boolean _setOriginalMatchYearSeq;
	private long _columnBitmask;
	private ESFMatch _escapedModel;
}
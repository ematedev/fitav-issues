/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.ethica.esf.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import it.ethica.esf.model.ESFPhone;
import it.ethica.esf.model.ESFPhoneModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ESFPhone service. Represents a row in the &quot;ESFPhone&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.ethica.esf.model.ESFPhoneModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ESFPhoneImpl}.
 * </p>
 *
 * @author Ethica
 * @see ESFPhoneImpl
 * @see it.ethica.esf.model.ESFPhone
 * @see it.ethica.esf.model.ESFPhoneModel
 * @generated
 */
public class ESFPhoneModelImpl extends BaseModelImpl<ESFPhone>
	implements ESFPhoneModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a e s f phone model instance should use the {@link it.ethica.esf.model.ESFPhone} interface instead.
	 */
	public static final String TABLE_NAME = "ESFPhone";
	public static final Object[][] TABLE_COLUMNS = {
			{ "esfPhoneId", Types.BIGINT },
			{ "listTypeId", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table ESFPhone (esfPhoneId LONG not null primary key,listTypeId INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table ESFPhone";
	public static final String ORDER_BY_JPQL = " ORDER BY esfPhone.esfPhoneId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ESFPhone.esfPhoneId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.ethica.esf.model.ESFPhone"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.ethica.esf.model.ESFPhone"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.ethica.esf.model.ESFPhone"));

	public ESFPhoneModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _esfPhoneId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEsfPhoneId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _esfPhoneId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ESFPhone.class;
	}

	@Override
	public String getModelClassName() {
		return ESFPhone.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("esfPhoneId", getEsfPhoneId());
		attributes.put("listTypeId", getListTypeId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long esfPhoneId = (Long)attributes.get("esfPhoneId");

		if (esfPhoneId != null) {
			setEsfPhoneId(esfPhoneId);
		}

		Integer listTypeId = (Integer)attributes.get("listTypeId");

		if (listTypeId != null) {
			setListTypeId(listTypeId);
		}
	}

	@Override
	public long getEsfPhoneId() {
		return _esfPhoneId;
	}

	@Override
	public void setEsfPhoneId(long esfPhoneId) {
		_esfPhoneId = esfPhoneId;
	}

	@Override
	public int getListTypeId() {
		return _listTypeId;
	}

	@Override
	public void setListTypeId(int listTypeId) {
		_listTypeId = listTypeId;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ESFPhone.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ESFPhone toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ESFPhone)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ESFPhoneImpl esfPhoneImpl = new ESFPhoneImpl();

		esfPhoneImpl.setEsfPhoneId(getEsfPhoneId());
		esfPhoneImpl.setListTypeId(getListTypeId());

		esfPhoneImpl.resetOriginalValues();

		return esfPhoneImpl;
	}

	@Override
	public int compareTo(ESFPhone esfPhone) {
		long primaryKey = esfPhone.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ESFPhone)) {
			return false;
		}

		ESFPhone esfPhone = (ESFPhone)obj;

		long primaryKey = esfPhone.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ESFPhone> toCacheModel() {
		ESFPhoneCacheModel esfPhoneCacheModel = new ESFPhoneCacheModel();

		esfPhoneCacheModel.esfPhoneId = getEsfPhoneId();

		esfPhoneCacheModel.listTypeId = getListTypeId();

		return esfPhoneCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{esfPhoneId=");
		sb.append(getEsfPhoneId());
		sb.append(", listTypeId=");
		sb.append(getListTypeId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("it.ethica.esf.model.ESFPhone");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>esfPhoneId</column-name><column-value><![CDATA[");
		sb.append(getEsfPhoneId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>listTypeId</column-name><column-value><![CDATA[");
		sb.append(getListTypeId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ESFPhone.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ESFPhone.class
		};
	private long _esfPhoneId;
	private int _listTypeId;
	private ESFPhone _escapedModel;
}
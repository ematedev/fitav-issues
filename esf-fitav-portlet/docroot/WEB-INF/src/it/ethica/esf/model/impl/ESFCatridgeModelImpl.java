/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.ethica.esf.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import it.ethica.esf.model.ESFCatridge;
import it.ethica.esf.model.ESFCatridgeModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ESFCatridge service. Represents a row in the &quot;ESFCatridge&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.ethica.esf.model.ESFCatridgeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ESFCatridgeImpl}.
 * </p>
 *
 * @author Ethica
 * @see ESFCatridgeImpl
 * @see it.ethica.esf.model.ESFCatridge
 * @see it.ethica.esf.model.ESFCatridgeModel
 * @generated
 */
public class ESFCatridgeModelImpl extends BaseModelImpl<ESFCatridge>
	implements ESFCatridgeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a e s f catridge model instance should use the {@link it.ethica.esf.model.ESFCatridge} interface instead.
	 */
	public static final String TABLE_NAME = "ESFCatridge";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "esfCatridgeId", Types.BIGINT },
			{ "esfUserId", Types.BIGINT },
			{ "esfGunTypeId", Types.BIGINT },
			{ "catridgeModel", Types.VARCHAR },
			{ "catridgeCaliber", Types.BIGINT },
			{ "note", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ESFCatridge (uuid_ VARCHAR(75) null,esfCatridgeId LONG not null primary key,esfUserId LONG,esfGunTypeId LONG,catridgeModel VARCHAR(75) null,catridgeCaliber LONG,note VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ESFCatridge";
	public static final String ORDER_BY_JPQL = " ORDER BY esfCatridge.esfGunTypeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ESFCatridge.esfGunTypeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.ethica.esf.model.ESFCatridge"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.ethica.esf.model.ESFCatridge"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.it.ethica.esf.model.ESFCatridge"),
			true);
	public static long ESFGUNTYPEID_COLUMN_BITMASK = 1L;
	public static long ESFUSERID_COLUMN_BITMASK = 2L;
	public static long UUID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.ethica.esf.model.ESFCatridge"));

	public ESFCatridgeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _esfCatridgeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEsfCatridgeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _esfCatridgeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ESFCatridge.class;
	}

	@Override
	public String getModelClassName() {
		return ESFCatridge.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("esfCatridgeId", getEsfCatridgeId());
		attributes.put("esfUserId", getEsfUserId());
		attributes.put("esfGunTypeId", getEsfGunTypeId());
		attributes.put("catridgeModel", getCatridgeModel());
		attributes.put("catridgeCaliber", getCatridgeCaliber());
		attributes.put("note", getNote());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long esfCatridgeId = (Long)attributes.get("esfCatridgeId");

		if (esfCatridgeId != null) {
			setEsfCatridgeId(esfCatridgeId);
		}

		Long esfUserId = (Long)attributes.get("esfUserId");

		if (esfUserId != null) {
			setEsfUserId(esfUserId);
		}

		Long esfGunTypeId = (Long)attributes.get("esfGunTypeId");

		if (esfGunTypeId != null) {
			setEsfGunTypeId(esfGunTypeId);
		}

		String catridgeModel = (String)attributes.get("catridgeModel");

		if (catridgeModel != null) {
			setCatridgeModel(catridgeModel);
		}

		Long catridgeCaliber = (Long)attributes.get("catridgeCaliber");

		if (catridgeCaliber != null) {
			setCatridgeCaliber(catridgeCaliber);
		}

		String note = (String)attributes.get("note");

		if (note != null) {
			setNote(note);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getEsfCatridgeId() {
		return _esfCatridgeId;
	}

	@Override
	public void setEsfCatridgeId(long esfCatridgeId) {
		_esfCatridgeId = esfCatridgeId;
	}

	@Override
	public long getEsfUserId() {
		return _esfUserId;
	}

	@Override
	public void setEsfUserId(long esfUserId) {
		_columnBitmask |= ESFUSERID_COLUMN_BITMASK;

		if (!_setOriginalEsfUserId) {
			_setOriginalEsfUserId = true;

			_originalEsfUserId = _esfUserId;
		}

		_esfUserId = esfUserId;
	}

	@Override
	public String getEsfUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getEsfUserId(), "uuid", _esfUserUuid);
	}

	@Override
	public void setEsfUserUuid(String esfUserUuid) {
		_esfUserUuid = esfUserUuid;
	}

	public long getOriginalEsfUserId() {
		return _originalEsfUserId;
	}

	@Override
	public long getEsfGunTypeId() {
		return _esfGunTypeId;
	}

	@Override
	public void setEsfGunTypeId(long esfGunTypeId) {
		_columnBitmask = -1L;

		if (!_setOriginalEsfGunTypeId) {
			_setOriginalEsfGunTypeId = true;

			_originalEsfGunTypeId = _esfGunTypeId;
		}

		_esfGunTypeId = esfGunTypeId;
	}

	public long getOriginalEsfGunTypeId() {
		return _originalEsfGunTypeId;
	}

	@Override
	public String getCatridgeModel() {
		if (_catridgeModel == null) {
			return StringPool.BLANK;
		}
		else {
			return _catridgeModel;
		}
	}

	@Override
	public void setCatridgeModel(String catridgeModel) {
		_catridgeModel = catridgeModel;
	}

	@Override
	public long getCatridgeCaliber() {
		return _catridgeCaliber;
	}

	@Override
	public void setCatridgeCaliber(long catridgeCaliber) {
		_catridgeCaliber = catridgeCaliber;
	}

	@Override
	public String getNote() {
		if (_note == null) {
			return StringPool.BLANK;
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ESFCatridge.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ESFCatridge toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ESFCatridge)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ESFCatridgeImpl esfCatridgeImpl = new ESFCatridgeImpl();

		esfCatridgeImpl.setUuid(getUuid());
		esfCatridgeImpl.setEsfCatridgeId(getEsfCatridgeId());
		esfCatridgeImpl.setEsfUserId(getEsfUserId());
		esfCatridgeImpl.setEsfGunTypeId(getEsfGunTypeId());
		esfCatridgeImpl.setCatridgeModel(getCatridgeModel());
		esfCatridgeImpl.setCatridgeCaliber(getCatridgeCaliber());
		esfCatridgeImpl.setNote(getNote());

		esfCatridgeImpl.resetOriginalValues();

		return esfCatridgeImpl;
	}

	@Override
	public int compareTo(ESFCatridge esfCatridge) {
		int value = 0;

		if (getEsfGunTypeId() < esfCatridge.getEsfGunTypeId()) {
			value = -1;
		}
		else if (getEsfGunTypeId() > esfCatridge.getEsfGunTypeId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ESFCatridge)) {
			return false;
		}

		ESFCatridge esfCatridge = (ESFCatridge)obj;

		long primaryKey = esfCatridge.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ESFCatridgeModelImpl esfCatridgeModelImpl = this;

		esfCatridgeModelImpl._originalUuid = esfCatridgeModelImpl._uuid;

		esfCatridgeModelImpl._originalEsfUserId = esfCatridgeModelImpl._esfUserId;

		esfCatridgeModelImpl._setOriginalEsfUserId = false;

		esfCatridgeModelImpl._originalEsfGunTypeId = esfCatridgeModelImpl._esfGunTypeId;

		esfCatridgeModelImpl._setOriginalEsfGunTypeId = false;

		esfCatridgeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ESFCatridge> toCacheModel() {
		ESFCatridgeCacheModel esfCatridgeCacheModel = new ESFCatridgeCacheModel();

		esfCatridgeCacheModel.uuid = getUuid();

		String uuid = esfCatridgeCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			esfCatridgeCacheModel.uuid = null;
		}

		esfCatridgeCacheModel.esfCatridgeId = getEsfCatridgeId();

		esfCatridgeCacheModel.esfUserId = getEsfUserId();

		esfCatridgeCacheModel.esfGunTypeId = getEsfGunTypeId();

		esfCatridgeCacheModel.catridgeModel = getCatridgeModel();

		String catridgeModel = esfCatridgeCacheModel.catridgeModel;

		if ((catridgeModel != null) && (catridgeModel.length() == 0)) {
			esfCatridgeCacheModel.catridgeModel = null;
		}

		esfCatridgeCacheModel.catridgeCaliber = getCatridgeCaliber();

		esfCatridgeCacheModel.note = getNote();

		String note = esfCatridgeCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			esfCatridgeCacheModel.note = null;
		}

		return esfCatridgeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", esfCatridgeId=");
		sb.append(getEsfCatridgeId());
		sb.append(", esfUserId=");
		sb.append(getEsfUserId());
		sb.append(", esfGunTypeId=");
		sb.append(getEsfGunTypeId());
		sb.append(", catridgeModel=");
		sb.append(getCatridgeModel());
		sb.append(", catridgeCaliber=");
		sb.append(getCatridgeCaliber());
		sb.append(", note=");
		sb.append(getNote());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("it.ethica.esf.model.ESFCatridge");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfCatridgeId</column-name><column-value><![CDATA[");
		sb.append(getEsfCatridgeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfUserId</column-name><column-value><![CDATA[");
		sb.append(getEsfUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfGunTypeId</column-name><column-value><![CDATA[");
		sb.append(getEsfGunTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>catridgeModel</column-name><column-value><![CDATA[");
		sb.append(getCatridgeModel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>catridgeCaliber</column-name><column-value><![CDATA[");
		sb.append(getCatridgeCaliber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note</column-name><column-value><![CDATA[");
		sb.append(getNote());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ESFCatridge.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ESFCatridge.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _esfCatridgeId;
	private long _esfUserId;
	private String _esfUserUuid;
	private long _originalEsfUserId;
	private boolean _setOriginalEsfUserId;
	private long _esfGunTypeId;
	private long _originalEsfGunTypeId;
	private boolean _setOriginalEsfGunTypeId;
	private String _catridgeModel;
	private long _catridgeCaliber;
	private String _note;
	private long _columnBitmask;
	private ESFCatridge _escapedModel;
}
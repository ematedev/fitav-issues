/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.ethica.esf.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import it.ethica.esf.model.ESFRadunoFiles;
import it.ethica.esf.model.ESFRadunoFilesModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ESFRadunoFiles service. Represents a row in the &quot;ESFRadunoFiles&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.ethica.esf.model.ESFRadunoFilesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ESFRadunoFilesImpl}.
 * </p>
 *
 * @author Ethica
 * @see ESFRadunoFilesImpl
 * @see it.ethica.esf.model.ESFRadunoFiles
 * @see it.ethica.esf.model.ESFRadunoFilesModel
 * @generated
 */
public class ESFRadunoFilesModelImpl extends BaseModelImpl<ESFRadunoFiles>
	implements ESFRadunoFilesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a e s f raduno files model instance should use the {@link it.ethica.esf.model.ESFRadunoFiles} interface instead.
	 */
	public static final String TABLE_NAME = "ESFRadunoFiles";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_esf_raduno_files", Types.BIGINT },
			{ "id_esf_raduno", Types.BIGINT },
			{ "nome", Types.VARCHAR },
			{ "path_", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ESFRadunoFiles (id_esf_raduno_files LONG not null primary key IDENTITY,id_esf_raduno LONG,nome VARCHAR(75) null,path_ VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ESFRadunoFiles";
	public static final String ORDER_BY_JPQL = " ORDER BY esfRadunoFiles.id_esf_raduno_files ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ESFRadunoFiles.id_esf_raduno_files ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.ethica.esf.model.ESFRadunoFiles"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.ethica.esf.model.ESFRadunoFiles"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.it.ethica.esf.model.ESFRadunoFiles"),
			true);
	public static long ID_ESF_RADUNO_COLUMN_BITMASK = 1L;
	public static long ID_ESF_RADUNO_FILES_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.ethica.esf.model.ESFRadunoFiles"));

	public ESFRadunoFilesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id_esf_raduno_files;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId_esf_raduno_files(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id_esf_raduno_files;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ESFRadunoFiles.class;
	}

	@Override
	public String getModelClassName() {
		return ESFRadunoFiles.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id_esf_raduno_files", getId_esf_raduno_files());
		attributes.put("id_esf_raduno", getId_esf_raduno());
		attributes.put("nome", getNome());
		attributes.put("path", getPath());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id_esf_raduno_files = (Long)attributes.get("id_esf_raduno_files");

		if (id_esf_raduno_files != null) {
			setId_esf_raduno_files(id_esf_raduno_files);
		}

		Long id_esf_raduno = (Long)attributes.get("id_esf_raduno");

		if (id_esf_raduno != null) {
			setId_esf_raduno(id_esf_raduno);
		}

		String nome = (String)attributes.get("nome");

		if (nome != null) {
			setNome(nome);
		}

		String path = (String)attributes.get("path");

		if (path != null) {
			setPath(path);
		}
	}

	@Override
	public long getId_esf_raduno_files() {
		return _id_esf_raduno_files;
	}

	@Override
	public void setId_esf_raduno_files(long id_esf_raduno_files) {
		_id_esf_raduno_files = id_esf_raduno_files;
	}

	@Override
	public long getId_esf_raduno() {
		return _id_esf_raduno;
	}

	@Override
	public void setId_esf_raduno(long id_esf_raduno) {
		_columnBitmask |= ID_ESF_RADUNO_COLUMN_BITMASK;

		if (!_setOriginalId_esf_raduno) {
			_setOriginalId_esf_raduno = true;

			_originalId_esf_raduno = _id_esf_raduno;
		}

		_id_esf_raduno = id_esf_raduno;
	}

	public long getOriginalId_esf_raduno() {
		return _originalId_esf_raduno;
	}

	@Override
	public String getNome() {
		if (_nome == null) {
			return StringPool.BLANK;
		}
		else {
			return _nome;
		}
	}

	@Override
	public void setNome(String nome) {
		_nome = nome;
	}

	@Override
	public String getPath() {
		if (_path == null) {
			return StringPool.BLANK;
		}
		else {
			return _path;
		}
	}

	@Override
	public void setPath(String path) {
		_path = path;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ESFRadunoFiles.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ESFRadunoFiles toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ESFRadunoFiles)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ESFRadunoFilesImpl esfRadunoFilesImpl = new ESFRadunoFilesImpl();

		esfRadunoFilesImpl.setId_esf_raduno_files(getId_esf_raduno_files());
		esfRadunoFilesImpl.setId_esf_raduno(getId_esf_raduno());
		esfRadunoFilesImpl.setNome(getNome());
		esfRadunoFilesImpl.setPath(getPath());

		esfRadunoFilesImpl.resetOriginalValues();

		return esfRadunoFilesImpl;
	}

	@Override
	public int compareTo(ESFRadunoFiles esfRadunoFiles) {
		long primaryKey = esfRadunoFiles.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ESFRadunoFiles)) {
			return false;
		}

		ESFRadunoFiles esfRadunoFiles = (ESFRadunoFiles)obj;

		long primaryKey = esfRadunoFiles.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ESFRadunoFilesModelImpl esfRadunoFilesModelImpl = this;

		esfRadunoFilesModelImpl._originalId_esf_raduno = esfRadunoFilesModelImpl._id_esf_raduno;

		esfRadunoFilesModelImpl._setOriginalId_esf_raduno = false;

		esfRadunoFilesModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ESFRadunoFiles> toCacheModel() {
		ESFRadunoFilesCacheModel esfRadunoFilesCacheModel = new ESFRadunoFilesCacheModel();

		esfRadunoFilesCacheModel.id_esf_raduno_files = getId_esf_raduno_files();

		esfRadunoFilesCacheModel.id_esf_raduno = getId_esf_raduno();

		esfRadunoFilesCacheModel.nome = getNome();

		String nome = esfRadunoFilesCacheModel.nome;

		if ((nome != null) && (nome.length() == 0)) {
			esfRadunoFilesCacheModel.nome = null;
		}

		esfRadunoFilesCacheModel.path = getPath();

		String path = esfRadunoFilesCacheModel.path;

		if ((path != null) && (path.length() == 0)) {
			esfRadunoFilesCacheModel.path = null;
		}

		return esfRadunoFilesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{id_esf_raduno_files=");
		sb.append(getId_esf_raduno_files());
		sb.append(", id_esf_raduno=");
		sb.append(getId_esf_raduno());
		sb.append(", nome=");
		sb.append(getNome());
		sb.append(", path=");
		sb.append(getPath());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("it.ethica.esf.model.ESFRadunoFiles");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id_esf_raduno_files</column-name><column-value><![CDATA[");
		sb.append(getId_esf_raduno_files());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_esf_raduno</column-name><column-value><![CDATA[");
		sb.append(getId_esf_raduno());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nome</column-name><column-value><![CDATA[");
		sb.append(getNome());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>path</column-name><column-value><![CDATA[");
		sb.append(getPath());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ESFRadunoFiles.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ESFRadunoFiles.class
		};
	private long _id_esf_raduno_files;
	private long _id_esf_raduno;
	private long _originalId_esf_raduno;
	private boolean _setOriginalId_esf_raduno;
	private String _nome;
	private String _path;
	private long _columnBitmask;
	private ESFRadunoFiles _escapedModel;
}
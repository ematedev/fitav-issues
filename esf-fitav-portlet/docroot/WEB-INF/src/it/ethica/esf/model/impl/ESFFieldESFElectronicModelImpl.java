/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.ethica.esf.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import it.ethica.esf.model.ESFFieldESFElectronic;
import it.ethica.esf.model.ESFFieldESFElectronicModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ESFFieldESFElectronic service. Represents a row in the &quot;ESFFieldESFElectronic&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.ethica.esf.model.ESFFieldESFElectronicModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ESFFieldESFElectronicImpl}.
 * </p>
 *
 * @author Ethica
 * @see ESFFieldESFElectronicImpl
 * @see it.ethica.esf.model.ESFFieldESFElectronic
 * @see it.ethica.esf.model.ESFFieldESFElectronicModel
 * @generated
 */
@JSON(strict = true)
public class ESFFieldESFElectronicModelImpl extends BaseModelImpl<ESFFieldESFElectronic>
	implements ESFFieldESFElectronicModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a e s f field e s f electronic model instance should use the {@link it.ethica.esf.model.ESFFieldESFElectronic} interface instead.
	 */
	public static final String TABLE_NAME = "ESFFieldESFElectronic";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "brandId", Types.BIGINT },
			{ "electronicId", Types.BIGINT },
			{ "fieldId", Types.BIGINT },
			{ "description", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ESFFieldESFElectronic (id_ LONG not null primary key,brandId LONG,electronicId LONG,fieldId LONG,description VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ESFFieldESFElectronic";
	public static final String ORDER_BY_JPQL = " ORDER BY esfFieldESFElectronic.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ESFFieldESFElectronic.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.ethica.esf.model.ESFFieldESFElectronic"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.ethica.esf.model.ESFFieldESFElectronic"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.it.ethica.esf.model.ESFFieldESFElectronic"),
			true);
	public static long BRANDID_COLUMN_BITMASK = 1L;
	public static long ELECTRONICID_COLUMN_BITMASK = 2L;
	public static long FIELDID_COLUMN_BITMASK = 4L;
	public static long ID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.ethica.esf.model.ESFFieldESFElectronic"));

	public ESFFieldESFElectronicModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ESFFieldESFElectronic.class;
	}

	@Override
	public String getModelClassName() {
		return ESFFieldESFElectronic.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("brandId", getBrandId());
		attributes.put("electronicId", getElectronicId());
		attributes.put("fieldId", getFieldId());
		attributes.put("description", getDescription());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long brandId = (Long)attributes.get("brandId");

		if (brandId != null) {
			setBrandId(brandId);
		}

		Long electronicId = (Long)attributes.get("electronicId");

		if (electronicId != null) {
			setElectronicId(electronicId);
		}

		Long fieldId = (Long)attributes.get("fieldId");

		if (fieldId != null) {
			setFieldId(fieldId);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}
	}

	@JSON
	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@JSON
	@Override
	public long getBrandId() {
		return _brandId;
	}

	@Override
	public void setBrandId(long brandId) {
		_columnBitmask |= BRANDID_COLUMN_BITMASK;

		if (!_setOriginalBrandId) {
			_setOriginalBrandId = true;

			_originalBrandId = _brandId;
		}

		_brandId = brandId;
	}

	public long getOriginalBrandId() {
		return _originalBrandId;
	}

	@JSON
	@Override
	public long getElectronicId() {
		return _electronicId;
	}

	@Override
	public void setElectronicId(long electronicId) {
		_columnBitmask |= ELECTRONICID_COLUMN_BITMASK;

		if (!_setOriginalElectronicId) {
			_setOriginalElectronicId = true;

			_originalElectronicId = _electronicId;
		}

		_electronicId = electronicId;
	}

	public long getOriginalElectronicId() {
		return _originalElectronicId;
	}

	@JSON
	@Override
	public long getFieldId() {
		return _fieldId;
	}

	@Override
	public void setFieldId(long fieldId) {
		_columnBitmask |= FIELDID_COLUMN_BITMASK;

		if (!_setOriginalFieldId) {
			_setOriginalFieldId = true;

			_originalFieldId = _fieldId;
		}

		_fieldId = fieldId;
	}

	public long getOriginalFieldId() {
		return _originalFieldId;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ESFFieldESFElectronic.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ESFFieldESFElectronic toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ESFFieldESFElectronic)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ESFFieldESFElectronicImpl esfFieldESFElectronicImpl = new ESFFieldESFElectronicImpl();

		esfFieldESFElectronicImpl.setId(getId());
		esfFieldESFElectronicImpl.setBrandId(getBrandId());
		esfFieldESFElectronicImpl.setElectronicId(getElectronicId());
		esfFieldESFElectronicImpl.setFieldId(getFieldId());
		esfFieldESFElectronicImpl.setDescription(getDescription());

		esfFieldESFElectronicImpl.resetOriginalValues();

		return esfFieldESFElectronicImpl;
	}

	@Override
	public int compareTo(ESFFieldESFElectronic esfFieldESFElectronic) {
		long primaryKey = esfFieldESFElectronic.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ESFFieldESFElectronic)) {
			return false;
		}

		ESFFieldESFElectronic esfFieldESFElectronic = (ESFFieldESFElectronic)obj;

		long primaryKey = esfFieldESFElectronic.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ESFFieldESFElectronicModelImpl esfFieldESFElectronicModelImpl = this;

		esfFieldESFElectronicModelImpl._originalBrandId = esfFieldESFElectronicModelImpl._brandId;

		esfFieldESFElectronicModelImpl._setOriginalBrandId = false;

		esfFieldESFElectronicModelImpl._originalElectronicId = esfFieldESFElectronicModelImpl._electronicId;

		esfFieldESFElectronicModelImpl._setOriginalElectronicId = false;

		esfFieldESFElectronicModelImpl._originalFieldId = esfFieldESFElectronicModelImpl._fieldId;

		esfFieldESFElectronicModelImpl._setOriginalFieldId = false;

		esfFieldESFElectronicModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ESFFieldESFElectronic> toCacheModel() {
		ESFFieldESFElectronicCacheModel esfFieldESFElectronicCacheModel = new ESFFieldESFElectronicCacheModel();

		esfFieldESFElectronicCacheModel.id = getId();

		esfFieldESFElectronicCacheModel.brandId = getBrandId();

		esfFieldESFElectronicCacheModel.electronicId = getElectronicId();

		esfFieldESFElectronicCacheModel.fieldId = getFieldId();

		esfFieldESFElectronicCacheModel.description = getDescription();

		String description = esfFieldESFElectronicCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			esfFieldESFElectronicCacheModel.description = null;
		}

		return esfFieldESFElectronicCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", brandId=");
		sb.append(getBrandId());
		sb.append(", electronicId=");
		sb.append(getElectronicId());
		sb.append(", fieldId=");
		sb.append(getFieldId());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("it.ethica.esf.model.ESFFieldESFElectronic");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>brandId</column-name><column-value><![CDATA[");
		sb.append(getBrandId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>electronicId</column-name><column-value><![CDATA[");
		sb.append(getElectronicId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fieldId</column-name><column-value><![CDATA[");
		sb.append(getFieldId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ESFFieldESFElectronic.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ESFFieldESFElectronic.class
		};
	private long _id;
	private long _brandId;
	private long _originalBrandId;
	private boolean _setOriginalBrandId;
	private long _electronicId;
	private long _originalElectronicId;
	private boolean _setOriginalElectronicId;
	private long _fieldId;
	private long _originalFieldId;
	private boolean _setOriginalFieldId;
	private String _description;
	private long _columnBitmask;
	private ESFFieldESFElectronic _escapedModel;
}
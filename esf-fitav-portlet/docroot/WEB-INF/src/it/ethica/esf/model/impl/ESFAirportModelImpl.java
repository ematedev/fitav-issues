/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.ethica.esf.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import it.ethica.esf.model.ESFAirport;
import it.ethica.esf.model.ESFAirportModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ESFAirport service. Represents a row in the &quot;ESFAirport&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.ethica.esf.model.ESFAirportModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ESFAirportImpl}.
 * </p>
 *
 * @author Ethica
 * @see ESFAirportImpl
 * @see it.ethica.esf.model.ESFAirport
 * @see it.ethica.esf.model.ESFAirportModel
 * @generated
 */
public class ESFAirportModelImpl extends BaseModelImpl<ESFAirport>
	implements ESFAirportModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a e s f airport model instance should use the {@link it.ethica.esf.model.ESFAirport} interface instead.
	 */
	public static final String TABLE_NAME = "ESFAirport";
	public static final Object[][] TABLE_COLUMNS = {
			{ "esfAirportId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "city", Types.VARCHAR },
			{ "country", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ESFAirport (esfAirportId LONG not null primary key,name VARCHAR(75) null,city VARCHAR(75) null,country VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ESFAirport";
	public static final String ORDER_BY_JPQL = " ORDER BY esfAirport.esfAirportId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ESFAirport.esfAirportId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.ethica.esf.model.ESFAirport"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.ethica.esf.model.ESFAirport"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.ethica.esf.model.ESFAirport"));

	public ESFAirportModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _esfAirportId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEsfAirportId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _esfAirportId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ESFAirport.class;
	}

	@Override
	public String getModelClassName() {
		return ESFAirport.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("esfAirportId", getEsfAirportId());
		attributes.put("name", getName());
		attributes.put("city", getCity());
		attributes.put("country", getCountry());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long esfAirportId = (Long)attributes.get("esfAirportId");

		if (esfAirportId != null) {
			setEsfAirportId(esfAirportId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String city = (String)attributes.get("city");

		if (city != null) {
			setCity(city);
		}

		String country = (String)attributes.get("country");

		if (country != null) {
			setCountry(country);
		}
	}

	@Override
	public long getEsfAirportId() {
		return _esfAirportId;
	}

	@Override
	public void setEsfAirportId(long esfAirportId) {
		_esfAirportId = esfAirportId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getCity() {
		if (_city == null) {
			return StringPool.BLANK;
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@Override
	public String getCountry() {
		if (_country == null) {
			return StringPool.BLANK;
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		_country = country;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ESFAirport.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ESFAirport toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ESFAirport)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ESFAirportImpl esfAirportImpl = new ESFAirportImpl();

		esfAirportImpl.setEsfAirportId(getEsfAirportId());
		esfAirportImpl.setName(getName());
		esfAirportImpl.setCity(getCity());
		esfAirportImpl.setCountry(getCountry());

		esfAirportImpl.resetOriginalValues();

		return esfAirportImpl;
	}

	@Override
	public int compareTo(ESFAirport esfAirport) {
		long primaryKey = esfAirport.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ESFAirport)) {
			return false;
		}

		ESFAirport esfAirport = (ESFAirport)obj;

		long primaryKey = esfAirport.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ESFAirport> toCacheModel() {
		ESFAirportCacheModel esfAirportCacheModel = new ESFAirportCacheModel();

		esfAirportCacheModel.esfAirportId = getEsfAirportId();

		esfAirportCacheModel.name = getName();

		String name = esfAirportCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			esfAirportCacheModel.name = null;
		}

		esfAirportCacheModel.city = getCity();

		String city = esfAirportCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			esfAirportCacheModel.city = null;
		}

		esfAirportCacheModel.country = getCountry();

		String country = esfAirportCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			esfAirportCacheModel.country = null;
		}

		return esfAirportCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{esfAirportId=");
		sb.append(getEsfAirportId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", city=");
		sb.append(getCity());
		sb.append(", country=");
		sb.append(getCountry());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("it.ethica.esf.model.ESFAirport");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>esfAirportId</column-name><column-value><![CDATA[");
		sb.append(getEsfAirportId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>city</column-name><column-value><![CDATA[");
		sb.append(getCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>country</column-name><column-value><![CDATA[");
		sb.append(getCountry());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ESFAirport.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ESFAirport.class
		};
	private long _esfAirportId;
	private String _name;
	private String _city;
	private String _country;
	private ESFAirport _escapedModel;
}
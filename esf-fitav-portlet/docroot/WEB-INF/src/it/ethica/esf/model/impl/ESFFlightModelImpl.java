/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.ethica.esf.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import it.ethica.esf.model.ESFFlight;
import it.ethica.esf.model.ESFFlightModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ESFFlight service. Represents a row in the &quot;ESFFlight&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.ethica.esf.model.ESFFlightModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ESFFlightImpl}.
 * </p>
 *
 * @author Ethica
 * @see ESFFlightImpl
 * @see it.ethica.esf.model.ESFFlight
 * @see it.ethica.esf.model.ESFFlightModel
 * @generated
 */
public class ESFFlightModelImpl extends BaseModelImpl<ESFFlight>
	implements ESFFlightModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a e s f flight model instance should use the {@link it.ethica.esf.model.ESFFlight} interface instead.
	 */
	public static final String TABLE_NAME = "ESFFlight";
	public static final Object[][] TABLE_COLUMNS = {
			{ "esfFlightId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "leaveDate", Types.TIMESTAMP },
			{ "leaveHour", Types.VARCHAR },
			{ "arriveDate", Types.TIMESTAMP },
			{ "arriveHour", Types.VARCHAR },
			{ "flightCode", Types.VARCHAR },
			{ "companyName", Types.VARCHAR },
			{ "departureAirport", Types.VARCHAR },
			{ "arrivalAirport", Types.VARCHAR },
			{ "esfMatchId", Types.BIGINT },
			{ "esfUserId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table ESFFlight (esfFlightId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,leaveDate DATE null,leaveHour VARCHAR(75) null,arriveDate DATE null,arriveHour VARCHAR(75) null,flightCode VARCHAR(75) null,companyName VARCHAR(75) null,departureAirport VARCHAR(75) null,arrivalAirport VARCHAR(75) null,esfMatchId LONG,esfUserId LONG)";
	public static final String TABLE_SQL_DROP = "drop table ESFFlight";
	public static final String ORDER_BY_JPQL = " ORDER BY esfFlight.esfFlightId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ESFFlight.esfFlightId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.ethica.esf.model.ESFFlight"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.ethica.esf.model.ESFFlight"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.it.ethica.esf.model.ESFFlight"),
			true);
	public static long COMPANYNAME_COLUMN_BITMASK = 1L;
	public static long DEPARTUREAIRPORT_COLUMN_BITMASK = 2L;
	public static long ESFMATCHID_COLUMN_BITMASK = 4L;
	public static long ESFUSERID_COLUMN_BITMASK = 8L;
	public static long FLIGHTCODE_COLUMN_BITMASK = 16L;
	public static long LEAVEDATE_COLUMN_BITMASK = 32L;
	public static long LEAVEHOUR_COLUMN_BITMASK = 64L;
	public static long ESFFLIGHTID_COLUMN_BITMASK = 128L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.ethica.esf.model.ESFFlight"));

	public ESFFlightModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _esfFlightId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEsfFlightId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _esfFlightId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ESFFlight.class;
	}

	@Override
	public String getModelClassName() {
		return ESFFlight.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("esfFlightId", getEsfFlightId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("leaveDate", getLeaveDate());
		attributes.put("leaveHour", getLeaveHour());
		attributes.put("arriveDate", getArriveDate());
		attributes.put("arriveHour", getArriveHour());
		attributes.put("flightCode", getFlightCode());
		attributes.put("companyName", getCompanyName());
		attributes.put("departureAirport", getDepartureAirport());
		attributes.put("arrivalAirport", getArrivalAirport());
		attributes.put("esfMatchId", getEsfMatchId());
		attributes.put("esfUserId", getEsfUserId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long esfFlightId = (Long)attributes.get("esfFlightId");

		if (esfFlightId != null) {
			setEsfFlightId(esfFlightId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Date leaveDate = (Date)attributes.get("leaveDate");

		if (leaveDate != null) {
			setLeaveDate(leaveDate);
		}

		String leaveHour = (String)attributes.get("leaveHour");

		if (leaveHour != null) {
			setLeaveHour(leaveHour);
		}

		Date arriveDate = (Date)attributes.get("arriveDate");

		if (arriveDate != null) {
			setArriveDate(arriveDate);
		}

		String arriveHour = (String)attributes.get("arriveHour");

		if (arriveHour != null) {
			setArriveHour(arriveHour);
		}

		String flightCode = (String)attributes.get("flightCode");

		if (flightCode != null) {
			setFlightCode(flightCode);
		}

		String companyName = (String)attributes.get("companyName");

		if (companyName != null) {
			setCompanyName(companyName);
		}

		String departureAirport = (String)attributes.get("departureAirport");

		if (departureAirport != null) {
			setDepartureAirport(departureAirport);
		}

		String arrivalAirport = (String)attributes.get("arrivalAirport");

		if (arrivalAirport != null) {
			setArrivalAirport(arrivalAirport);
		}

		Long esfMatchId = (Long)attributes.get("esfMatchId");

		if (esfMatchId != null) {
			setEsfMatchId(esfMatchId);
		}

		Long esfUserId = (Long)attributes.get("esfUserId");

		if (esfUserId != null) {
			setEsfUserId(esfUserId);
		}
	}

	@Override
	public long getEsfFlightId() {
		return _esfFlightId;
	}

	@Override
	public void setEsfFlightId(long esfFlightId) {
		_esfFlightId = esfFlightId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public Date getLeaveDate() {
		return _leaveDate;
	}

	@Override
	public void setLeaveDate(Date leaveDate) {
		_columnBitmask |= LEAVEDATE_COLUMN_BITMASK;

		if (_originalLeaveDate == null) {
			_originalLeaveDate = _leaveDate;
		}

		_leaveDate = leaveDate;
	}

	public Date getOriginalLeaveDate() {
		return _originalLeaveDate;
	}

	@Override
	public String getLeaveHour() {
		if (_leaveHour == null) {
			return StringPool.BLANK;
		}
		else {
			return _leaveHour;
		}
	}

	@Override
	public void setLeaveHour(String leaveHour) {
		_columnBitmask |= LEAVEHOUR_COLUMN_BITMASK;

		if (_originalLeaveHour == null) {
			_originalLeaveHour = _leaveHour;
		}

		_leaveHour = leaveHour;
	}

	public String getOriginalLeaveHour() {
		return GetterUtil.getString(_originalLeaveHour);
	}

	@Override
	public Date getArriveDate() {
		return _arriveDate;
	}

	@Override
	public void setArriveDate(Date arriveDate) {
		_arriveDate = arriveDate;
	}

	@Override
	public String getArriveHour() {
		if (_arriveHour == null) {
			return StringPool.BLANK;
		}
		else {
			return _arriveHour;
		}
	}

	@Override
	public void setArriveHour(String arriveHour) {
		_arriveHour = arriveHour;
	}

	@Override
	public String getFlightCode() {
		if (_flightCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _flightCode;
		}
	}

	@Override
	public void setFlightCode(String flightCode) {
		_columnBitmask |= FLIGHTCODE_COLUMN_BITMASK;

		if (_originalFlightCode == null) {
			_originalFlightCode = _flightCode;
		}

		_flightCode = flightCode;
	}

	public String getOriginalFlightCode() {
		return GetterUtil.getString(_originalFlightCode);
	}

	@Override
	public String getCompanyName() {
		if (_companyName == null) {
			return StringPool.BLANK;
		}
		else {
			return _companyName;
		}
	}

	@Override
	public void setCompanyName(String companyName) {
		_columnBitmask |= COMPANYNAME_COLUMN_BITMASK;

		if (_originalCompanyName == null) {
			_originalCompanyName = _companyName;
		}

		_companyName = companyName;
	}

	public String getOriginalCompanyName() {
		return GetterUtil.getString(_originalCompanyName);
	}

	@Override
	public String getDepartureAirport() {
		if (_departureAirport == null) {
			return StringPool.BLANK;
		}
		else {
			return _departureAirport;
		}
	}

	@Override
	public void setDepartureAirport(String departureAirport) {
		_columnBitmask |= DEPARTUREAIRPORT_COLUMN_BITMASK;

		if (_originalDepartureAirport == null) {
			_originalDepartureAirport = _departureAirport;
		}

		_departureAirport = departureAirport;
	}

	public String getOriginalDepartureAirport() {
		return GetterUtil.getString(_originalDepartureAirport);
	}

	@Override
	public String getArrivalAirport() {
		if (_arrivalAirport == null) {
			return StringPool.BLANK;
		}
		else {
			return _arrivalAirport;
		}
	}

	@Override
	public void setArrivalAirport(String arrivalAirport) {
		_arrivalAirport = arrivalAirport;
	}

	@Override
	public long getEsfMatchId() {
		return _esfMatchId;
	}

	@Override
	public void setEsfMatchId(long esfMatchId) {
		_columnBitmask |= ESFMATCHID_COLUMN_BITMASK;

		if (!_setOriginalEsfMatchId) {
			_setOriginalEsfMatchId = true;

			_originalEsfMatchId = _esfMatchId;
		}

		_esfMatchId = esfMatchId;
	}

	public long getOriginalEsfMatchId() {
		return _originalEsfMatchId;
	}

	@Override
	public long getEsfUserId() {
		return _esfUserId;
	}

	@Override
	public void setEsfUserId(long esfUserId) {
		_columnBitmask |= ESFUSERID_COLUMN_BITMASK;

		if (!_setOriginalEsfUserId) {
			_setOriginalEsfUserId = true;

			_originalEsfUserId = _esfUserId;
		}

		_esfUserId = esfUserId;
	}

	@Override
	public String getEsfUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getEsfUserId(), "uuid", _esfUserUuid);
	}

	@Override
	public void setEsfUserUuid(String esfUserUuid) {
		_esfUserUuid = esfUserUuid;
	}

	public long getOriginalEsfUserId() {
		return _originalEsfUserId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ESFFlight.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ESFFlight toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ESFFlight)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ESFFlightImpl esfFlightImpl = new ESFFlightImpl();

		esfFlightImpl.setEsfFlightId(getEsfFlightId());
		esfFlightImpl.setGroupId(getGroupId());
		esfFlightImpl.setCompanyId(getCompanyId());
		esfFlightImpl.setUserId(getUserId());
		esfFlightImpl.setUserName(getUserName());
		esfFlightImpl.setCreateDate(getCreateDate());
		esfFlightImpl.setModifiedDate(getModifiedDate());
		esfFlightImpl.setLeaveDate(getLeaveDate());
		esfFlightImpl.setLeaveHour(getLeaveHour());
		esfFlightImpl.setArriveDate(getArriveDate());
		esfFlightImpl.setArriveHour(getArriveHour());
		esfFlightImpl.setFlightCode(getFlightCode());
		esfFlightImpl.setCompanyName(getCompanyName());
		esfFlightImpl.setDepartureAirport(getDepartureAirport());
		esfFlightImpl.setArrivalAirport(getArrivalAirport());
		esfFlightImpl.setEsfMatchId(getEsfMatchId());
		esfFlightImpl.setEsfUserId(getEsfUserId());

		esfFlightImpl.resetOriginalValues();

		return esfFlightImpl;
	}

	@Override
	public int compareTo(ESFFlight esfFlight) {
		long primaryKey = esfFlight.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ESFFlight)) {
			return false;
		}

		ESFFlight esfFlight = (ESFFlight)obj;

		long primaryKey = esfFlight.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ESFFlightModelImpl esfFlightModelImpl = this;

		esfFlightModelImpl._originalLeaveDate = esfFlightModelImpl._leaveDate;

		esfFlightModelImpl._originalLeaveHour = esfFlightModelImpl._leaveHour;

		esfFlightModelImpl._originalFlightCode = esfFlightModelImpl._flightCode;

		esfFlightModelImpl._originalCompanyName = esfFlightModelImpl._companyName;

		esfFlightModelImpl._originalDepartureAirport = esfFlightModelImpl._departureAirport;

		esfFlightModelImpl._originalEsfMatchId = esfFlightModelImpl._esfMatchId;

		esfFlightModelImpl._setOriginalEsfMatchId = false;

		esfFlightModelImpl._originalEsfUserId = esfFlightModelImpl._esfUserId;

		esfFlightModelImpl._setOriginalEsfUserId = false;

		esfFlightModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ESFFlight> toCacheModel() {
		ESFFlightCacheModel esfFlightCacheModel = new ESFFlightCacheModel();

		esfFlightCacheModel.esfFlightId = getEsfFlightId();

		esfFlightCacheModel.groupId = getGroupId();

		esfFlightCacheModel.companyId = getCompanyId();

		esfFlightCacheModel.userId = getUserId();

		esfFlightCacheModel.userName = getUserName();

		String userName = esfFlightCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			esfFlightCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			esfFlightCacheModel.createDate = createDate.getTime();
		}
		else {
			esfFlightCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			esfFlightCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			esfFlightCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date leaveDate = getLeaveDate();

		if (leaveDate != null) {
			esfFlightCacheModel.leaveDate = leaveDate.getTime();
		}
		else {
			esfFlightCacheModel.leaveDate = Long.MIN_VALUE;
		}

		esfFlightCacheModel.leaveHour = getLeaveHour();

		String leaveHour = esfFlightCacheModel.leaveHour;

		if ((leaveHour != null) && (leaveHour.length() == 0)) {
			esfFlightCacheModel.leaveHour = null;
		}

		Date arriveDate = getArriveDate();

		if (arriveDate != null) {
			esfFlightCacheModel.arriveDate = arriveDate.getTime();
		}
		else {
			esfFlightCacheModel.arriveDate = Long.MIN_VALUE;
		}

		esfFlightCacheModel.arriveHour = getArriveHour();

		String arriveHour = esfFlightCacheModel.arriveHour;

		if ((arriveHour != null) && (arriveHour.length() == 0)) {
			esfFlightCacheModel.arriveHour = null;
		}

		esfFlightCacheModel.flightCode = getFlightCode();

		String flightCode = esfFlightCacheModel.flightCode;

		if ((flightCode != null) && (flightCode.length() == 0)) {
			esfFlightCacheModel.flightCode = null;
		}

		esfFlightCacheModel.companyName = getCompanyName();

		String companyName = esfFlightCacheModel.companyName;

		if ((companyName != null) && (companyName.length() == 0)) {
			esfFlightCacheModel.companyName = null;
		}

		esfFlightCacheModel.departureAirport = getDepartureAirport();

		String departureAirport = esfFlightCacheModel.departureAirport;

		if ((departureAirport != null) && (departureAirport.length() == 0)) {
			esfFlightCacheModel.departureAirport = null;
		}

		esfFlightCacheModel.arrivalAirport = getArrivalAirport();

		String arrivalAirport = esfFlightCacheModel.arrivalAirport;

		if ((arrivalAirport != null) && (arrivalAirport.length() == 0)) {
			esfFlightCacheModel.arrivalAirport = null;
		}

		esfFlightCacheModel.esfMatchId = getEsfMatchId();

		esfFlightCacheModel.esfUserId = getEsfUserId();

		return esfFlightCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{esfFlightId=");
		sb.append(getEsfFlightId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", leaveDate=");
		sb.append(getLeaveDate());
		sb.append(", leaveHour=");
		sb.append(getLeaveHour());
		sb.append(", arriveDate=");
		sb.append(getArriveDate());
		sb.append(", arriveHour=");
		sb.append(getArriveHour());
		sb.append(", flightCode=");
		sb.append(getFlightCode());
		sb.append(", companyName=");
		sb.append(getCompanyName());
		sb.append(", departureAirport=");
		sb.append(getDepartureAirport());
		sb.append(", arrivalAirport=");
		sb.append(getArrivalAirport());
		sb.append(", esfMatchId=");
		sb.append(getEsfMatchId());
		sb.append(", esfUserId=");
		sb.append(getEsfUserId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("it.ethica.esf.model.ESFFlight");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>esfFlightId</column-name><column-value><![CDATA[");
		sb.append(getEsfFlightId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leaveDate</column-name><column-value><![CDATA[");
		sb.append(getLeaveDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leaveHour</column-name><column-value><![CDATA[");
		sb.append(getLeaveHour());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>arriveDate</column-name><column-value><![CDATA[");
		sb.append(getArriveDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>arriveHour</column-name><column-value><![CDATA[");
		sb.append(getArriveHour());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flightCode</column-name><column-value><![CDATA[");
		sb.append(getFlightCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyName</column-name><column-value><![CDATA[");
		sb.append(getCompanyName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>departureAirport</column-name><column-value><![CDATA[");
		sb.append(getDepartureAirport());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>arrivalAirport</column-name><column-value><![CDATA[");
		sb.append(getArrivalAirport());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfMatchId</column-name><column-value><![CDATA[");
		sb.append(getEsfMatchId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfUserId</column-name><column-value><![CDATA[");
		sb.append(getEsfUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ESFFlight.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ESFFlight.class
		};
	private long _esfFlightId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private Date _leaveDate;
	private Date _originalLeaveDate;
	private String _leaveHour;
	private String _originalLeaveHour;
	private Date _arriveDate;
	private String _arriveHour;
	private String _flightCode;
	private String _originalFlightCode;
	private String _companyName;
	private String _originalCompanyName;
	private String _departureAirport;
	private String _originalDepartureAirport;
	private String _arrivalAirport;
	private long _esfMatchId;
	private long _originalEsfMatchId;
	private boolean _setOriginalEsfMatchId;
	private long _esfUserId;
	private String _esfUserUuid;
	private long _originalEsfUserId;
	private boolean _setOriginalEsfUserId;
	private long _columnBitmask;
	private ESFFlight _escapedModel;
}
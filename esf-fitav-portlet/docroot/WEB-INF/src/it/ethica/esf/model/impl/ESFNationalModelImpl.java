/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.ethica.esf.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import it.ethica.esf.model.ESFNational;
import it.ethica.esf.model.ESFNationalModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ESFNational service. Represents a row in the &quot;ESFNational&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.ethica.esf.model.ESFNationalModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ESFNationalImpl}.
 * </p>
 *
 * @author Ethica
 * @see ESFNationalImpl
 * @see it.ethica.esf.model.ESFNational
 * @see it.ethica.esf.model.ESFNationalModel
 * @generated
 */
public class ESFNationalModelImpl extends BaseModelImpl<ESFNational>
	implements ESFNationalModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a e s f national model instance should use the {@link it.ethica.esf.model.ESFNational} interface instead.
	 */
	public static final String TABLE_NAME = "ESFNational";
	public static final Object[][] TABLE_COLUMNS = {
			{ "esfNationalId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "esfUserId", Types.BIGINT },
			{ "esfSportTypeId", Types.BIGINT },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "BDODate", Types.TIMESTAMP },
			{ "idInternational", Types.VARCHAR },
			{ "isUniversity", Types.BOOLEAN },
			{ "isNational", Types.BOOLEAN },
			{ "deliberate", Types.VARCHAR },
			{ "deliberateDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table ESFNational (esfNationalId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,esfUserId LONG,esfSportTypeId LONG,startDate DATE null,endDate DATE null,BDODate DATE null,idInternational VARCHAR(75) null,isUniversity BOOLEAN,isNational BOOLEAN,deliberate VARCHAR(75) null,deliberateDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table ESFNational";
	public static final String ORDER_BY_JPQL = " ORDER BY esfNational.esfNationalId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ESFNational.esfNationalId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.ethica.esf.model.ESFNational"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.ethica.esf.model.ESFNational"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.it.ethica.esf.model.ESFNational"),
			true);
	public static long ENDDATE_COLUMN_BITMASK = 1L;
	public static long ESFSPORTTYPEID_COLUMN_BITMASK = 2L;
	public static long ESFUSERID_COLUMN_BITMASK = 4L;
	public static long STARTDATE_COLUMN_BITMASK = 8L;
	public static long ESFNATIONALID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.ethica.esf.model.ESFNational"));

	public ESFNationalModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _esfNationalId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEsfNationalId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _esfNationalId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ESFNational.class;
	}

	@Override
	public String getModelClassName() {
		return ESFNational.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("esfNationalId", getEsfNationalId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("esfUserId", getEsfUserId());
		attributes.put("esfSportTypeId", getEsfSportTypeId());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("BDODate", getBDODate());
		attributes.put("idInternational", getIdInternational());
		attributes.put("isUniversity", getIsUniversity());
		attributes.put("isNational", getIsNational());
		attributes.put("deliberate", getDeliberate());
		attributes.put("deliberateDate", getDeliberateDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long esfNationalId = (Long)attributes.get("esfNationalId");

		if (esfNationalId != null) {
			setEsfNationalId(esfNationalId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long esfUserId = (Long)attributes.get("esfUserId");

		if (esfUserId != null) {
			setEsfUserId(esfUserId);
		}

		Long esfSportTypeId = (Long)attributes.get("esfSportTypeId");

		if (esfSportTypeId != null) {
			setEsfSportTypeId(esfSportTypeId);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		Date BDODate = (Date)attributes.get("BDODate");

		if (BDODate != null) {
			setBDODate(BDODate);
		}

		String idInternational = (String)attributes.get("idInternational");

		if (idInternational != null) {
			setIdInternational(idInternational);
		}

		Boolean isUniversity = (Boolean)attributes.get("isUniversity");

		if (isUniversity != null) {
			setIsUniversity(isUniversity);
		}

		Boolean isNational = (Boolean)attributes.get("isNational");

		if (isNational != null) {
			setIsNational(isNational);
		}

		String deliberate = (String)attributes.get("deliberate");

		if (deliberate != null) {
			setDeliberate(deliberate);
		}

		Date deliberateDate = (Date)attributes.get("deliberateDate");

		if (deliberateDate != null) {
			setDeliberateDate(deliberateDate);
		}
	}

	@Override
	public long getEsfNationalId() {
		return _esfNationalId;
	}

	@Override
	public void setEsfNationalId(long esfNationalId) {
		_esfNationalId = esfNationalId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getEsfUserId() {
		return _esfUserId;
	}

	@Override
	public void setEsfUserId(long esfUserId) {
		_columnBitmask |= ESFUSERID_COLUMN_BITMASK;

		if (!_setOriginalEsfUserId) {
			_setOriginalEsfUserId = true;

			_originalEsfUserId = _esfUserId;
		}

		_esfUserId = esfUserId;
	}

	@Override
	public String getEsfUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getEsfUserId(), "uuid", _esfUserUuid);
	}

	@Override
	public void setEsfUserUuid(String esfUserUuid) {
		_esfUserUuid = esfUserUuid;
	}

	public long getOriginalEsfUserId() {
		return _originalEsfUserId;
	}

	@Override
	public long getEsfSportTypeId() {
		return _esfSportTypeId;
	}

	@Override
	public void setEsfSportTypeId(long esfSportTypeId) {
		_columnBitmask |= ESFSPORTTYPEID_COLUMN_BITMASK;

		if (!_setOriginalEsfSportTypeId) {
			_setOriginalEsfSportTypeId = true;

			_originalEsfSportTypeId = _esfSportTypeId;
		}

		_esfSportTypeId = esfSportTypeId;
	}

	public long getOriginalEsfSportTypeId() {
		return _originalEsfSportTypeId;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_columnBitmask |= STARTDATE_COLUMN_BITMASK;

		if (_originalStartDate == null) {
			_originalStartDate = _startDate;
		}

		_startDate = startDate;
	}

	public Date getOriginalStartDate() {
		return _originalStartDate;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_columnBitmask |= ENDDATE_COLUMN_BITMASK;

		if (_originalEndDate == null) {
			_originalEndDate = _endDate;
		}

		_endDate = endDate;
	}

	public Date getOriginalEndDate() {
		return _originalEndDate;
	}

	@Override
	public Date getBDODate() {
		return _BDODate;
	}

	@Override
	public void setBDODate(Date BDODate) {
		_BDODate = BDODate;
	}

	@Override
	public String getIdInternational() {
		if (_idInternational == null) {
			return StringPool.BLANK;
		}
		else {
			return _idInternational;
		}
	}

	@Override
	public void setIdInternational(String idInternational) {
		_idInternational = idInternational;
	}

	@Override
	public boolean getIsUniversity() {
		return _isUniversity;
	}

	@Override
	public boolean isIsUniversity() {
		return _isUniversity;
	}

	@Override
	public void setIsUniversity(boolean isUniversity) {
		_isUniversity = isUniversity;
	}

	@Override
	public boolean getIsNational() {
		return _isNational;
	}

	@Override
	public boolean isIsNational() {
		return _isNational;
	}

	@Override
	public void setIsNational(boolean isNational) {
		_isNational = isNational;
	}

	@Override
	public String getDeliberate() {
		if (_deliberate == null) {
			return StringPool.BLANK;
		}
		else {
			return _deliberate;
		}
	}

	@Override
	public void setDeliberate(String deliberate) {
		_deliberate = deliberate;
	}

	@Override
	public Date getDeliberateDate() {
		return _deliberateDate;
	}

	@Override
	public void setDeliberateDate(Date deliberateDate) {
		_deliberateDate = deliberateDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ESFNational.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ESFNational toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ESFNational)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ESFNationalImpl esfNationalImpl = new ESFNationalImpl();

		esfNationalImpl.setEsfNationalId(getEsfNationalId());
		esfNationalImpl.setGroupId(getGroupId());
		esfNationalImpl.setCompanyId(getCompanyId());
		esfNationalImpl.setUserId(getUserId());
		esfNationalImpl.setUserName(getUserName());
		esfNationalImpl.setCreateDate(getCreateDate());
		esfNationalImpl.setModifiedDate(getModifiedDate());
		esfNationalImpl.setEsfUserId(getEsfUserId());
		esfNationalImpl.setEsfSportTypeId(getEsfSportTypeId());
		esfNationalImpl.setStartDate(getStartDate());
		esfNationalImpl.setEndDate(getEndDate());
		esfNationalImpl.setBDODate(getBDODate());
		esfNationalImpl.setIdInternational(getIdInternational());
		esfNationalImpl.setIsUniversity(getIsUniversity());
		esfNationalImpl.setIsNational(getIsNational());
		esfNationalImpl.setDeliberate(getDeliberate());
		esfNationalImpl.setDeliberateDate(getDeliberateDate());

		esfNationalImpl.resetOriginalValues();

		return esfNationalImpl;
	}

	@Override
	public int compareTo(ESFNational esfNational) {
		long primaryKey = esfNational.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ESFNational)) {
			return false;
		}

		ESFNational esfNational = (ESFNational)obj;

		long primaryKey = esfNational.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ESFNationalModelImpl esfNationalModelImpl = this;

		esfNationalModelImpl._originalEsfUserId = esfNationalModelImpl._esfUserId;

		esfNationalModelImpl._setOriginalEsfUserId = false;

		esfNationalModelImpl._originalEsfSportTypeId = esfNationalModelImpl._esfSportTypeId;

		esfNationalModelImpl._setOriginalEsfSportTypeId = false;

		esfNationalModelImpl._originalStartDate = esfNationalModelImpl._startDate;

		esfNationalModelImpl._originalEndDate = esfNationalModelImpl._endDate;

		esfNationalModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ESFNational> toCacheModel() {
		ESFNationalCacheModel esfNationalCacheModel = new ESFNationalCacheModel();

		esfNationalCacheModel.esfNationalId = getEsfNationalId();

		esfNationalCacheModel.groupId = getGroupId();

		esfNationalCacheModel.companyId = getCompanyId();

		esfNationalCacheModel.userId = getUserId();

		esfNationalCacheModel.userName = getUserName();

		String userName = esfNationalCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			esfNationalCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			esfNationalCacheModel.createDate = createDate.getTime();
		}
		else {
			esfNationalCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			esfNationalCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			esfNationalCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		esfNationalCacheModel.esfUserId = getEsfUserId();

		esfNationalCacheModel.esfSportTypeId = getEsfSportTypeId();

		Date startDate = getStartDate();

		if (startDate != null) {
			esfNationalCacheModel.startDate = startDate.getTime();
		}
		else {
			esfNationalCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			esfNationalCacheModel.endDate = endDate.getTime();
		}
		else {
			esfNationalCacheModel.endDate = Long.MIN_VALUE;
		}

		Date BDODate = getBDODate();

		if (BDODate != null) {
			esfNationalCacheModel.BDODate = BDODate.getTime();
		}
		else {
			esfNationalCacheModel.BDODate = Long.MIN_VALUE;
		}

		esfNationalCacheModel.idInternational = getIdInternational();

		String idInternational = esfNationalCacheModel.idInternational;

		if ((idInternational != null) && (idInternational.length() == 0)) {
			esfNationalCacheModel.idInternational = null;
		}

		esfNationalCacheModel.isUniversity = getIsUniversity();

		esfNationalCacheModel.isNational = getIsNational();

		esfNationalCacheModel.deliberate = getDeliberate();

		String deliberate = esfNationalCacheModel.deliberate;

		if ((deliberate != null) && (deliberate.length() == 0)) {
			esfNationalCacheModel.deliberate = null;
		}

		Date deliberateDate = getDeliberateDate();

		if (deliberateDate != null) {
			esfNationalCacheModel.deliberateDate = deliberateDate.getTime();
		}
		else {
			esfNationalCacheModel.deliberateDate = Long.MIN_VALUE;
		}

		return esfNationalCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{esfNationalId=");
		sb.append(getEsfNationalId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", esfUserId=");
		sb.append(getEsfUserId());
		sb.append(", esfSportTypeId=");
		sb.append(getEsfSportTypeId());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", BDODate=");
		sb.append(getBDODate());
		sb.append(", idInternational=");
		sb.append(getIdInternational());
		sb.append(", isUniversity=");
		sb.append(getIsUniversity());
		sb.append(", isNational=");
		sb.append(getIsNational());
		sb.append(", deliberate=");
		sb.append(getDeliberate());
		sb.append(", deliberateDate=");
		sb.append(getDeliberateDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("it.ethica.esf.model.ESFNational");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>esfNationalId</column-name><column-value><![CDATA[");
		sb.append(getEsfNationalId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfUserId</column-name><column-value><![CDATA[");
		sb.append(getEsfUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfSportTypeId</column-name><column-value><![CDATA[");
		sb.append(getEsfSportTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>BDODate</column-name><column-value><![CDATA[");
		sb.append(getBDODate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idInternational</column-name><column-value><![CDATA[");
		sb.append(getIdInternational());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isUniversity</column-name><column-value><![CDATA[");
		sb.append(getIsUniversity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isNational</column-name><column-value><![CDATA[");
		sb.append(getIsNational());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deliberate</column-name><column-value><![CDATA[");
		sb.append(getDeliberate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deliberateDate</column-name><column-value><![CDATA[");
		sb.append(getDeliberateDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ESFNational.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ESFNational.class
		};
	private long _esfNationalId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _esfUserId;
	private String _esfUserUuid;
	private long _originalEsfUserId;
	private boolean _setOriginalEsfUserId;
	private long _esfSportTypeId;
	private long _originalEsfSportTypeId;
	private boolean _setOriginalEsfSportTypeId;
	private Date _startDate;
	private Date _originalStartDate;
	private Date _endDate;
	private Date _originalEndDate;
	private Date _BDODate;
	private String _idInternational;
	private boolean _isUniversity;
	private boolean _isNational;
	private String _deliberate;
	private Date _deliberateDate;
	private long _columnBitmask;
	private ESFNational _escapedModel;
}
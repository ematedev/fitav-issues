/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.ethica.esf.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import it.ethica.esf.model.Province;
import it.ethica.esf.model.ProvinceModel;
import it.ethica.esf.service.persistence.ProvincePK;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Province service. Represents a row in the &quot;Province&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.ethica.esf.model.ProvinceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProvinceImpl}.
 * </p>
 *
 * @author Ethica
 * @see ProvinceImpl
 * @see it.ethica.esf.model.Province
 * @see it.ethica.esf.model.ProvinceModel
 * @generated
 */
public class ProvinceModelImpl extends BaseModelImpl<Province>
	implements ProvinceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a province model instance should use the {@link it.ethica.esf.model.Province} interface instead.
	 */
	public static final String TABLE_NAME = "Province";
	public static final Object[][] TABLE_COLUMNS = {
			{ "idProvince", Types.VARCHAR },
			{ "idRegion", Types.VARCHAR },
			{ "idCountry", Types.VARCHAR },
			{ "name", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table Province (idProvince VARCHAR(75) not null,idRegion VARCHAR(75) not null,idCountry VARCHAR(75) not null,name VARCHAR(75) null,primary key (idProvince, idRegion, idCountry))";
	public static final String TABLE_SQL_DROP = "drop table Province";
	public static final String ORDER_BY_JPQL = " ORDER BY province.id.idProvince ASC, province.id.idRegion ASC, province.id.idCountry ASC";
	public static final String ORDER_BY_SQL = " ORDER BY Province.idProvince ASC, Province.idRegion ASC, Province.idCountry ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.ethica.esf.model.Province"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.ethica.esf.model.Province"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.it.ethica.esf.model.Province"),
			true);
	public static long IDCOUNTRY_COLUMN_BITMASK = 1L;
	public static long IDREGION_COLUMN_BITMASK = 2L;
	public static long IDPROVINCE_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.ethica.esf.model.Province"));

	public ProvinceModelImpl() {
	}

	@Override
	public ProvincePK getPrimaryKey() {
		return new ProvincePK(_idProvince, _idRegion, _idCountry);
	}

	@Override
	public void setPrimaryKey(ProvincePK primaryKey) {
		setIdProvince(primaryKey.idProvince);
		setIdRegion(primaryKey.idRegion);
		setIdCountry(primaryKey.idCountry);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new ProvincePK(_idProvince, _idRegion, _idCountry);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((ProvincePK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Province.class;
	}

	@Override
	public String getModelClassName() {
		return Province.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("idProvince", getIdProvince());
		attributes.put("idRegion", getIdRegion());
		attributes.put("idCountry", getIdCountry());
		attributes.put("name", getName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String idProvince = (String)attributes.get("idProvince");

		if (idProvince != null) {
			setIdProvince(idProvince);
		}

		String idRegion = (String)attributes.get("idRegion");

		if (idRegion != null) {
			setIdRegion(idRegion);
		}

		String idCountry = (String)attributes.get("idCountry");

		if (idCountry != null) {
			setIdCountry(idCountry);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}
	}

	@Override
	public String getIdProvince() {
		if (_idProvince == null) {
			return StringPool.BLANK;
		}
		else {
			return _idProvince;
		}
	}

	@Override
	public void setIdProvince(String idProvince) {
		_idProvince = idProvince;
	}

	@Override
	public String getIdRegion() {
		if (_idRegion == null) {
			return StringPool.BLANK;
		}
		else {
			return _idRegion;
		}
	}

	@Override
	public void setIdRegion(String idRegion) {
		_columnBitmask |= IDREGION_COLUMN_BITMASK;

		if (_originalIdRegion == null) {
			_originalIdRegion = _idRegion;
		}

		_idRegion = idRegion;
	}

	public String getOriginalIdRegion() {
		return GetterUtil.getString(_originalIdRegion);
	}

	@Override
	public String getIdCountry() {
		if (_idCountry == null) {
			return StringPool.BLANK;
		}
		else {
			return _idCountry;
		}
	}

	@Override
	public void setIdCountry(String idCountry) {
		_columnBitmask |= IDCOUNTRY_COLUMN_BITMASK;

		if (_originalIdCountry == null) {
			_originalIdCountry = _idCountry;
		}

		_idCountry = idCountry;
	}

	public String getOriginalIdCountry() {
		return GetterUtil.getString(_originalIdCountry);
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Province toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Province)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProvinceImpl provinceImpl = new ProvinceImpl();

		provinceImpl.setIdProvince(getIdProvince());
		provinceImpl.setIdRegion(getIdRegion());
		provinceImpl.setIdCountry(getIdCountry());
		provinceImpl.setName(getName());

		provinceImpl.resetOriginalValues();

		return provinceImpl;
	}

	@Override
	public int compareTo(Province province) {
		ProvincePK primaryKey = province.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Province)) {
			return false;
		}

		Province province = (Province)obj;

		ProvincePK primaryKey = province.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		ProvinceModelImpl provinceModelImpl = this;

		provinceModelImpl._originalIdRegion = provinceModelImpl._idRegion;

		provinceModelImpl._originalIdCountry = provinceModelImpl._idCountry;

		provinceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Province> toCacheModel() {
		ProvinceCacheModel provinceCacheModel = new ProvinceCacheModel();

		provinceCacheModel.idProvince = getIdProvince();

		String idProvince = provinceCacheModel.idProvince;

		if ((idProvince != null) && (idProvince.length() == 0)) {
			provinceCacheModel.idProvince = null;
		}

		provinceCacheModel.idRegion = getIdRegion();

		String idRegion = provinceCacheModel.idRegion;

		if ((idRegion != null) && (idRegion.length() == 0)) {
			provinceCacheModel.idRegion = null;
		}

		provinceCacheModel.idCountry = getIdCountry();

		String idCountry = provinceCacheModel.idCountry;

		if ((idCountry != null) && (idCountry.length() == 0)) {
			provinceCacheModel.idCountry = null;
		}

		provinceCacheModel.name = getName();

		String name = provinceCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			provinceCacheModel.name = null;
		}

		return provinceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{idProvince=");
		sb.append(getIdProvince());
		sb.append(", idRegion=");
		sb.append(getIdRegion());
		sb.append(", idCountry=");
		sb.append(getIdCountry());
		sb.append(", name=");
		sb.append(getName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("it.ethica.esf.model.Province");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>idProvince</column-name><column-value><![CDATA[");
		sb.append(getIdProvince());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idRegion</column-name><column-value><![CDATA[");
		sb.append(getIdRegion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idCountry</column-name><column-value><![CDATA[");
		sb.append(getIdCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Province.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Province.class
		};
	private String _idProvince;
	private String _idRegion;
	private String _originalIdRegion;
	private String _idCountry;
	private String _originalIdCountry;
	private String _name;
	private long _columnBitmask;
	private Province _escapedModel;
}
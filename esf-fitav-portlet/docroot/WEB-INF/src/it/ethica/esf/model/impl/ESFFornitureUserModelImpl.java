/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.ethica.esf.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import it.ethica.esf.model.ESFFornitureUser;
import it.ethica.esf.model.ESFFornitureUserModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ESFFornitureUser service. Represents a row in the &quot;ESFFornitureUser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.ethica.esf.model.ESFFornitureUserModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ESFFornitureUserImpl}.
 * </p>
 *
 * @author Ethica
 * @see ESFFornitureUserImpl
 * @see it.ethica.esf.model.ESFFornitureUser
 * @see it.ethica.esf.model.ESFFornitureUserModel
 * @generated
 */
@JSON(strict = true)
public class ESFFornitureUserModelImpl extends BaseModelImpl<ESFFornitureUser>
	implements ESFFornitureUserModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a e s f forniture user model instance should use the {@link it.ethica.esf.model.ESFFornitureUser} interface instead.
	 */
	public static final String TABLE_NAME = "ESFFornitureUser";
	public static final Object[][] TABLE_COLUMNS = {
			{ "esfIDForniture", Types.BIGINT },
			{ "esfIdUser", Types.BIGINT },
			{ "esfQuantity", Types.BIGINT },
			{ "esfDateAssign", Types.TIMESTAMP },
			{ "esfFornitureUserID", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table ESFFornitureUser (esfIDForniture LONG,esfIdUser LONG,esfQuantity LONG,esfDateAssign DATE null,esfFornitureUserID LONG not null primary key)";
	public static final String TABLE_SQL_DROP = "drop table ESFFornitureUser";
	public static final String ORDER_BY_JPQL = " ORDER BY esfFornitureUser.esfFornitureUserID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ESFFornitureUser.esfFornitureUserID ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.ethica.esf.model.ESFFornitureUser"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.ethica.esf.model.ESFFornitureUser"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.ethica.esf.model.ESFFornitureUser"));

	public ESFFornitureUserModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _esfFornitureUserID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEsfFornitureUserID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _esfFornitureUserID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ESFFornitureUser.class;
	}

	@Override
	public String getModelClassName() {
		return ESFFornitureUser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("esfIDForniture", getEsfIDForniture());
		attributes.put("esfIdUser", getEsfIdUser());
		attributes.put("esfQuantity", getEsfQuantity());
		attributes.put("esfDateAssign", getEsfDateAssign());
		attributes.put("esfFornitureUserID", getEsfFornitureUserID());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long esfIDForniture = (Long)attributes.get("esfIDForniture");

		if (esfIDForniture != null) {
			setEsfIDForniture(esfIDForniture);
		}

		Long esfIdUser = (Long)attributes.get("esfIdUser");

		if (esfIdUser != null) {
			setEsfIdUser(esfIdUser);
		}

		Long esfQuantity = (Long)attributes.get("esfQuantity");

		if (esfQuantity != null) {
			setEsfQuantity(esfQuantity);
		}

		Date esfDateAssign = (Date)attributes.get("esfDateAssign");

		if (esfDateAssign != null) {
			setEsfDateAssign(esfDateAssign);
		}

		Long esfFornitureUserID = (Long)attributes.get("esfFornitureUserID");

		if (esfFornitureUserID != null) {
			setEsfFornitureUserID(esfFornitureUserID);
		}
	}

	@JSON
	@Override
	public long getEsfIDForniture() {
		return _esfIDForniture;
	}

	@Override
	public void setEsfIDForniture(long esfIDForniture) {
		_esfIDForniture = esfIDForniture;
	}

	@JSON
	@Override
	public long getEsfIdUser() {
		return _esfIdUser;
	}

	@Override
	public void setEsfIdUser(long esfIdUser) {
		_esfIdUser = esfIdUser;
	}

	@JSON
	@Override
	public long getEsfQuantity() {
		return _esfQuantity;
	}

	@Override
	public void setEsfQuantity(long esfQuantity) {
		_esfQuantity = esfQuantity;
	}

	@JSON
	@Override
	public Date getEsfDateAssign() {
		return _esfDateAssign;
	}

	@Override
	public void setEsfDateAssign(Date esfDateAssign) {
		_esfDateAssign = esfDateAssign;
	}

	@JSON
	@Override
	public long getEsfFornitureUserID() {
		return _esfFornitureUserID;
	}

	@Override
	public void setEsfFornitureUserID(long esfFornitureUserID) {
		_esfFornitureUserID = esfFornitureUserID;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ESFFornitureUser.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ESFFornitureUser toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ESFFornitureUser)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ESFFornitureUserImpl esfFornitureUserImpl = new ESFFornitureUserImpl();

		esfFornitureUserImpl.setEsfIDForniture(getEsfIDForniture());
		esfFornitureUserImpl.setEsfIdUser(getEsfIdUser());
		esfFornitureUserImpl.setEsfQuantity(getEsfQuantity());
		esfFornitureUserImpl.setEsfDateAssign(getEsfDateAssign());
		esfFornitureUserImpl.setEsfFornitureUserID(getEsfFornitureUserID());

		esfFornitureUserImpl.resetOriginalValues();

		return esfFornitureUserImpl;
	}

	@Override
	public int compareTo(ESFFornitureUser esfFornitureUser) {
		long primaryKey = esfFornitureUser.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ESFFornitureUser)) {
			return false;
		}

		ESFFornitureUser esfFornitureUser = (ESFFornitureUser)obj;

		long primaryKey = esfFornitureUser.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<ESFFornitureUser> toCacheModel() {
		ESFFornitureUserCacheModel esfFornitureUserCacheModel = new ESFFornitureUserCacheModel();

		esfFornitureUserCacheModel.esfIDForniture = getEsfIDForniture();

		esfFornitureUserCacheModel.esfIdUser = getEsfIdUser();

		esfFornitureUserCacheModel.esfQuantity = getEsfQuantity();

		Date esfDateAssign = getEsfDateAssign();

		if (esfDateAssign != null) {
			esfFornitureUserCacheModel.esfDateAssign = esfDateAssign.getTime();
		}
		else {
			esfFornitureUserCacheModel.esfDateAssign = Long.MIN_VALUE;
		}

		esfFornitureUserCacheModel.esfFornitureUserID = getEsfFornitureUserID();

		return esfFornitureUserCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{esfIDForniture=");
		sb.append(getEsfIDForniture());
		sb.append(", esfIdUser=");
		sb.append(getEsfIdUser());
		sb.append(", esfQuantity=");
		sb.append(getEsfQuantity());
		sb.append(", esfDateAssign=");
		sb.append(getEsfDateAssign());
		sb.append(", esfFornitureUserID=");
		sb.append(getEsfFornitureUserID());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("it.ethica.esf.model.ESFFornitureUser");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>esfIDForniture</column-name><column-value><![CDATA[");
		sb.append(getEsfIDForniture());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfIdUser</column-name><column-value><![CDATA[");
		sb.append(getEsfIdUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfQuantity</column-name><column-value><![CDATA[");
		sb.append(getEsfQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfDateAssign</column-name><column-value><![CDATA[");
		sb.append(getEsfDateAssign());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfFornitureUserID</column-name><column-value><![CDATA[");
		sb.append(getEsfFornitureUserID());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ESFFornitureUser.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ESFFornitureUser.class
		};
	private long _esfIDForniture;
	private long _esfIdUser;
	private long _esfQuantity;
	private Date _esfDateAssign;
	private long _esfFornitureUserID;
	private ESFFornitureUser _escapedModel;
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.ethica.esf.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import it.ethica.esf.model.ESFCane;
import it.ethica.esf.model.ESFCaneModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ESFCane service. Represents a row in the &quot;ESFCane&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.ethica.esf.model.ESFCaneModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ESFCaneImpl}.
 * </p>
 *
 * @author Ethica
 * @see ESFCaneImpl
 * @see it.ethica.esf.model.ESFCane
 * @see it.ethica.esf.model.ESFCaneModel
 * @generated
 */
public class ESFCaneModelImpl extends BaseModelImpl<ESFCane>
	implements ESFCaneModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a e s f cane model instance should use the {@link it.ethica.esf.model.ESFCane} interface instead.
	 */
	public static final String TABLE_NAME = "ESFCane";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "esfCaneId", Types.BIGINT },
			{ "esfUserId", Types.BIGINT },
			{ "code_", Types.VARCHAR },
			{ "esfGunKindId", Types.BIGINT },
			{ "esfOrganizationId", Types.BIGINT },
			{ "caneCaliber", Types.BIGINT },
			{ "isFavoriteGun", Types.BOOLEAN },
			{ "typeId", Types.INTEGER },
			{ "measures", Types.VARCHAR },
			{ "shooterId", Types.BIGINT },
			{ "esfGunTypeId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table ESFCane (uuid_ VARCHAR(75) null,esfCaneId LONG not null primary key,esfUserId LONG,code_ VARCHAR(75) null,esfGunKindId LONG,esfOrganizationId LONG,caneCaliber LONG,isFavoriteGun BOOLEAN,typeId INTEGER,measures VARCHAR(75) null,shooterId LONG,esfGunTypeId LONG)";
	public static final String TABLE_SQL_DROP = "drop table ESFCane";
	public static final String ORDER_BY_JPQL = " ORDER BY esfCane.code ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ESFCane.code_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.ethica.esf.model.ESFCane"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.ethica.esf.model.ESFCane"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.it.ethica.esf.model.ESFCane"),
			true);
	public static long CODE_COLUMN_BITMASK = 1L;
	public static long ESFGUNKINDID_COLUMN_BITMASK = 2L;
	public static long ESFORGANIZATIONID_COLUMN_BITMASK = 4L;
	public static long ESFUSERID_COLUMN_BITMASK = 8L;
	public static long UUID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.ethica.esf.model.ESFCane"));

	public ESFCaneModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _esfCaneId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEsfCaneId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _esfCaneId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ESFCane.class;
	}

	@Override
	public String getModelClassName() {
		return ESFCane.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("esfCaneId", getEsfCaneId());
		attributes.put("esfUserId", getEsfUserId());
		attributes.put("code", getCode());
		attributes.put("esfGunKindId", getEsfGunKindId());
		attributes.put("esfOrganizationId", getEsfOrganizationId());
		attributes.put("caneCaliber", getCaneCaliber());
		attributes.put("isFavoriteGun", getIsFavoriteGun());
		attributes.put("typeId", getTypeId());
		attributes.put("measures", getMeasures());
		attributes.put("shooterId", getShooterId());
		attributes.put("esfGunTypeId", getEsfGunTypeId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long esfCaneId = (Long)attributes.get("esfCaneId");

		if (esfCaneId != null) {
			setEsfCaneId(esfCaneId);
		}

		Long esfUserId = (Long)attributes.get("esfUserId");

		if (esfUserId != null) {
			setEsfUserId(esfUserId);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		Long esfGunKindId = (Long)attributes.get("esfGunKindId");

		if (esfGunKindId != null) {
			setEsfGunKindId(esfGunKindId);
		}

		Long esfOrganizationId = (Long)attributes.get("esfOrganizationId");

		if (esfOrganizationId != null) {
			setEsfOrganizationId(esfOrganizationId);
		}

		Long caneCaliber = (Long)attributes.get("caneCaliber");

		if (caneCaliber != null) {
			setCaneCaliber(caneCaliber);
		}

		Boolean isFavoriteGun = (Boolean)attributes.get("isFavoriteGun");

		if (isFavoriteGun != null) {
			setIsFavoriteGun(isFavoriteGun);
		}

		Integer typeId = (Integer)attributes.get("typeId");

		if (typeId != null) {
			setTypeId(typeId);
		}

		String measures = (String)attributes.get("measures");

		if (measures != null) {
			setMeasures(measures);
		}

		Long shooterId = (Long)attributes.get("shooterId");

		if (shooterId != null) {
			setShooterId(shooterId);
		}

		Long esfGunTypeId = (Long)attributes.get("esfGunTypeId");

		if (esfGunTypeId != null) {
			setEsfGunTypeId(esfGunTypeId);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getEsfCaneId() {
		return _esfCaneId;
	}

	@Override
	public void setEsfCaneId(long esfCaneId) {
		_esfCaneId = esfCaneId;
	}

	@Override
	public long getEsfUserId() {
		return _esfUserId;
	}

	@Override
	public void setEsfUserId(long esfUserId) {
		_columnBitmask |= ESFUSERID_COLUMN_BITMASK;

		if (!_setOriginalEsfUserId) {
			_setOriginalEsfUserId = true;

			_originalEsfUserId = _esfUserId;
		}

		_esfUserId = esfUserId;
	}

	@Override
	public String getEsfUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getEsfUserId(), "uuid", _esfUserUuid);
	}

	@Override
	public void setEsfUserUuid(String esfUserUuid) {
		_esfUserUuid = esfUserUuid;
	}

	public long getOriginalEsfUserId() {
		return _originalEsfUserId;
	}

	@Override
	public String getCode() {
		if (_code == null) {
			return StringPool.BLANK;
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_columnBitmask = -1L;

		if (_originalCode == null) {
			_originalCode = _code;
		}

		_code = code;
	}

	public String getOriginalCode() {
		return GetterUtil.getString(_originalCode);
	}

	@Override
	public long getEsfGunKindId() {
		return _esfGunKindId;
	}

	@Override
	public void setEsfGunKindId(long esfGunKindId) {
		_columnBitmask |= ESFGUNKINDID_COLUMN_BITMASK;

		if (!_setOriginalEsfGunKindId) {
			_setOriginalEsfGunKindId = true;

			_originalEsfGunKindId = _esfGunKindId;
		}

		_esfGunKindId = esfGunKindId;
	}

	public long getOriginalEsfGunKindId() {
		return _originalEsfGunKindId;
	}

	@Override
	public long getEsfOrganizationId() {
		return _esfOrganizationId;
	}

	@Override
	public void setEsfOrganizationId(long esfOrganizationId) {
		_columnBitmask |= ESFORGANIZATIONID_COLUMN_BITMASK;

		if (!_setOriginalEsfOrganizationId) {
			_setOriginalEsfOrganizationId = true;

			_originalEsfOrganizationId = _esfOrganizationId;
		}

		_esfOrganizationId = esfOrganizationId;
	}

	public long getOriginalEsfOrganizationId() {
		return _originalEsfOrganizationId;
	}

	@Override
	public long getCaneCaliber() {
		return _caneCaliber;
	}

	@Override
	public void setCaneCaliber(long caneCaliber) {
		_caneCaliber = caneCaliber;
	}

	@Override
	public boolean getIsFavoriteGun() {
		return _isFavoriteGun;
	}

	@Override
	public boolean isIsFavoriteGun() {
		return _isFavoriteGun;
	}

	@Override
	public void setIsFavoriteGun(boolean isFavoriteGun) {
		_isFavoriteGun = isFavoriteGun;
	}

	@Override
	public int getTypeId() {
		return _typeId;
	}

	@Override
	public void setTypeId(int typeId) {
		_typeId = typeId;
	}

	@Override
	public String getMeasures() {
		if (_measures == null) {
			return StringPool.BLANK;
		}
		else {
			return _measures;
		}
	}

	@Override
	public void setMeasures(String measures) {
		_measures = measures;
	}

	@Override
	public long getShooterId() {
		return _shooterId;
	}

	@Override
	public void setShooterId(long shooterId) {
		_shooterId = shooterId;
	}

	@Override
	public long getEsfGunTypeId() {
		return _esfGunTypeId;
	}

	@Override
	public void setEsfGunTypeId(long esfGunTypeId) {
		_esfGunTypeId = esfGunTypeId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ESFCane.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ESFCane toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ESFCane)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ESFCaneImpl esfCaneImpl = new ESFCaneImpl();

		esfCaneImpl.setUuid(getUuid());
		esfCaneImpl.setEsfCaneId(getEsfCaneId());
		esfCaneImpl.setEsfUserId(getEsfUserId());
		esfCaneImpl.setCode(getCode());
		esfCaneImpl.setEsfGunKindId(getEsfGunKindId());
		esfCaneImpl.setEsfOrganizationId(getEsfOrganizationId());
		esfCaneImpl.setCaneCaliber(getCaneCaliber());
		esfCaneImpl.setIsFavoriteGun(getIsFavoriteGun());
		esfCaneImpl.setTypeId(getTypeId());
		esfCaneImpl.setMeasures(getMeasures());
		esfCaneImpl.setShooterId(getShooterId());
		esfCaneImpl.setEsfGunTypeId(getEsfGunTypeId());

		esfCaneImpl.resetOriginalValues();

		return esfCaneImpl;
	}

	@Override
	public int compareTo(ESFCane esfCane) {
		int value = 0;

		value = getCode().compareTo(esfCane.getCode());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ESFCane)) {
			return false;
		}

		ESFCane esfCane = (ESFCane)obj;

		long primaryKey = esfCane.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ESFCaneModelImpl esfCaneModelImpl = this;

		esfCaneModelImpl._originalUuid = esfCaneModelImpl._uuid;

		esfCaneModelImpl._originalEsfUserId = esfCaneModelImpl._esfUserId;

		esfCaneModelImpl._setOriginalEsfUserId = false;

		esfCaneModelImpl._originalCode = esfCaneModelImpl._code;

		esfCaneModelImpl._originalEsfGunKindId = esfCaneModelImpl._esfGunKindId;

		esfCaneModelImpl._setOriginalEsfGunKindId = false;

		esfCaneModelImpl._originalEsfOrganizationId = esfCaneModelImpl._esfOrganizationId;

		esfCaneModelImpl._setOriginalEsfOrganizationId = false;

		esfCaneModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ESFCane> toCacheModel() {
		ESFCaneCacheModel esfCaneCacheModel = new ESFCaneCacheModel();

		esfCaneCacheModel.uuid = getUuid();

		String uuid = esfCaneCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			esfCaneCacheModel.uuid = null;
		}

		esfCaneCacheModel.esfCaneId = getEsfCaneId();

		esfCaneCacheModel.esfUserId = getEsfUserId();

		esfCaneCacheModel.code = getCode();

		String code = esfCaneCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			esfCaneCacheModel.code = null;
		}

		esfCaneCacheModel.esfGunKindId = getEsfGunKindId();

		esfCaneCacheModel.esfOrganizationId = getEsfOrganizationId();

		esfCaneCacheModel.caneCaliber = getCaneCaliber();

		esfCaneCacheModel.isFavoriteGun = getIsFavoriteGun();

		esfCaneCacheModel.typeId = getTypeId();

		esfCaneCacheModel.measures = getMeasures();

		String measures = esfCaneCacheModel.measures;

		if ((measures != null) && (measures.length() == 0)) {
			esfCaneCacheModel.measures = null;
		}

		esfCaneCacheModel.shooterId = getShooterId();

		esfCaneCacheModel.esfGunTypeId = getEsfGunTypeId();

		return esfCaneCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", esfCaneId=");
		sb.append(getEsfCaneId());
		sb.append(", esfUserId=");
		sb.append(getEsfUserId());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", esfGunKindId=");
		sb.append(getEsfGunKindId());
		sb.append(", esfOrganizationId=");
		sb.append(getEsfOrganizationId());
		sb.append(", caneCaliber=");
		sb.append(getCaneCaliber());
		sb.append(", isFavoriteGun=");
		sb.append(getIsFavoriteGun());
		sb.append(", typeId=");
		sb.append(getTypeId());
		sb.append(", measures=");
		sb.append(getMeasures());
		sb.append(", shooterId=");
		sb.append(getShooterId());
		sb.append(", esfGunTypeId=");
		sb.append(getEsfGunTypeId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("it.ethica.esf.model.ESFCane");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfCaneId</column-name><column-value><![CDATA[");
		sb.append(getEsfCaneId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfUserId</column-name><column-value><![CDATA[");
		sb.append(getEsfUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfGunKindId</column-name><column-value><![CDATA[");
		sb.append(getEsfGunKindId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfOrganizationId</column-name><column-value><![CDATA[");
		sb.append(getEsfOrganizationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>caneCaliber</column-name><column-value><![CDATA[");
		sb.append(getCaneCaliber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isFavoriteGun</column-name><column-value><![CDATA[");
		sb.append(getIsFavoriteGun());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeId</column-name><column-value><![CDATA[");
		sb.append(getTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>measures</column-name><column-value><![CDATA[");
		sb.append(getMeasures());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shooterId</column-name><column-value><![CDATA[");
		sb.append(getShooterId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfGunTypeId</column-name><column-value><![CDATA[");
		sb.append(getEsfGunTypeId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ESFCane.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ESFCane.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _esfCaneId;
	private long _esfUserId;
	private String _esfUserUuid;
	private long _originalEsfUserId;
	private boolean _setOriginalEsfUserId;
	private String _code;
	private String _originalCode;
	private long _esfGunKindId;
	private long _originalEsfGunKindId;
	private boolean _setOriginalEsfGunKindId;
	private long _esfOrganizationId;
	private long _originalEsfOrganizationId;
	private boolean _setOriginalEsfOrganizationId;
	private long _caneCaliber;
	private boolean _isFavoriteGun;
	private int _typeId;
	private String _measures;
	private long _shooterId;
	private long _esfGunTypeId;
	private long _columnBitmask;
	private ESFCane _escapedModel;
}
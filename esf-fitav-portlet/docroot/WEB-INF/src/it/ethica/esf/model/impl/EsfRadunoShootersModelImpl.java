/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.ethica.esf.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import it.ethica.esf.model.EsfRadunoShooters;
import it.ethica.esf.model.EsfRadunoShootersModel;
import it.ethica.esf.service.persistence.EsfRadunoShootersPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the EsfRadunoShooters service. Represents a row in the &quot;EsfRadunoShooters&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.ethica.esf.model.EsfRadunoShootersModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EsfRadunoShootersImpl}.
 * </p>
 *
 * @author Ethica
 * @see EsfRadunoShootersImpl
 * @see it.ethica.esf.model.EsfRadunoShooters
 * @see it.ethica.esf.model.EsfRadunoShootersModel
 * @generated
 */
public class EsfRadunoShootersModelImpl extends BaseModelImpl<EsfRadunoShooters>
	implements EsfRadunoShootersModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a esf raduno shooters model instance should use the {@link it.ethica.esf.model.EsfRadunoShooters} interface instead.
	 */
	public static final String TABLE_NAME = "EsfRadunoShooters";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_esf_raduno_shooters", Types.BIGINT },
			{ "id_esf_raduno", Types.BIGINT },
			{ "userId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table EsfRadunoShooters (id_esf_raduno_shooters LONG not null,id_esf_raduno LONG not null,userId LONG not null,primary key (id_esf_raduno_shooters, id_esf_raduno, userId))";
	public static final String TABLE_SQL_DROP = "drop table EsfRadunoShooters";
	public static final String ORDER_BY_JPQL = " ORDER BY esfRadunoShooters.id.id_esf_raduno_shooters ASC, esfRadunoShooters.id.id_esf_raduno ASC, esfRadunoShooters.id.userId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY EsfRadunoShooters.id_esf_raduno_shooters ASC, EsfRadunoShooters.id_esf_raduno ASC, EsfRadunoShooters.userId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.ethica.esf.model.EsfRadunoShooters"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.ethica.esf.model.EsfRadunoShooters"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.it.ethica.esf.model.EsfRadunoShooters"),
			true);
	public static long ID_ESF_RADUNO_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static long ID_ESF_RADUNO_SHOOTERS_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.ethica.esf.model.EsfRadunoShooters"));

	public EsfRadunoShootersModelImpl() {
	}

	@Override
	public EsfRadunoShootersPK getPrimaryKey() {
		return new EsfRadunoShootersPK(_id_esf_raduno_shooters, _id_esf_raduno,
			_userId);
	}

	@Override
	public void setPrimaryKey(EsfRadunoShootersPK primaryKey) {
		setId_esf_raduno_shooters(primaryKey.id_esf_raduno_shooters);
		setId_esf_raduno(primaryKey.id_esf_raduno);
		setUserId(primaryKey.userId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new EsfRadunoShootersPK(_id_esf_raduno_shooters, _id_esf_raduno,
			_userId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((EsfRadunoShootersPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return EsfRadunoShooters.class;
	}

	@Override
	public String getModelClassName() {
		return EsfRadunoShooters.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id_esf_raduno_shooters", getId_esf_raduno_shooters());
		attributes.put("id_esf_raduno", getId_esf_raduno());
		attributes.put("userId", getUserId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id_esf_raduno_shooters = (Long)attributes.get(
				"id_esf_raduno_shooters");

		if (id_esf_raduno_shooters != null) {
			setId_esf_raduno_shooters(id_esf_raduno_shooters);
		}

		Long id_esf_raduno = (Long)attributes.get("id_esf_raduno");

		if (id_esf_raduno != null) {
			setId_esf_raduno(id_esf_raduno);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}
	}

	@Override
	public long getId_esf_raduno_shooters() {
		return _id_esf_raduno_shooters;
	}

	@Override
	public void setId_esf_raduno_shooters(long id_esf_raduno_shooters) {
		_id_esf_raduno_shooters = id_esf_raduno_shooters;
	}

	@Override
	public long getId_esf_raduno() {
		return _id_esf_raduno;
	}

	@Override
	public void setId_esf_raduno(long id_esf_raduno) {
		_columnBitmask |= ID_ESF_RADUNO_COLUMN_BITMASK;

		if (!_setOriginalId_esf_raduno) {
			_setOriginalId_esf_raduno = true;

			_originalId_esf_raduno = _id_esf_raduno;
		}

		_id_esf_raduno = id_esf_raduno;
	}

	public long getOriginalId_esf_raduno() {
		return _originalId_esf_raduno;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public EsfRadunoShooters toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EsfRadunoShooters)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EsfRadunoShootersImpl esfRadunoShootersImpl = new EsfRadunoShootersImpl();

		esfRadunoShootersImpl.setId_esf_raduno_shooters(getId_esf_raduno_shooters());
		esfRadunoShootersImpl.setId_esf_raduno(getId_esf_raduno());
		esfRadunoShootersImpl.setUserId(getUserId());

		esfRadunoShootersImpl.resetOriginalValues();

		return esfRadunoShootersImpl;
	}

	@Override
	public int compareTo(EsfRadunoShooters esfRadunoShooters) {
		EsfRadunoShootersPK primaryKey = esfRadunoShooters.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EsfRadunoShooters)) {
			return false;
		}

		EsfRadunoShooters esfRadunoShooters = (EsfRadunoShooters)obj;

		EsfRadunoShootersPK primaryKey = esfRadunoShooters.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		EsfRadunoShootersModelImpl esfRadunoShootersModelImpl = this;

		esfRadunoShootersModelImpl._originalId_esf_raduno = esfRadunoShootersModelImpl._id_esf_raduno;

		esfRadunoShootersModelImpl._setOriginalId_esf_raduno = false;

		esfRadunoShootersModelImpl._originalUserId = esfRadunoShootersModelImpl._userId;

		esfRadunoShootersModelImpl._setOriginalUserId = false;

		esfRadunoShootersModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EsfRadunoShooters> toCacheModel() {
		EsfRadunoShootersCacheModel esfRadunoShootersCacheModel = new EsfRadunoShootersCacheModel();

		esfRadunoShootersCacheModel.id_esf_raduno_shooters = getId_esf_raduno_shooters();

		esfRadunoShootersCacheModel.id_esf_raduno = getId_esf_raduno();

		esfRadunoShootersCacheModel.userId = getUserId();

		return esfRadunoShootersCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{id_esf_raduno_shooters=");
		sb.append(getId_esf_raduno_shooters());
		sb.append(", id_esf_raduno=");
		sb.append(getId_esf_raduno());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("it.ethica.esf.model.EsfRadunoShooters");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id_esf_raduno_shooters</column-name><column-value><![CDATA[");
		sb.append(getId_esf_raduno_shooters());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_esf_raduno</column-name><column-value><![CDATA[");
		sb.append(getId_esf_raduno());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EsfRadunoShooters.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			EsfRadunoShooters.class
		};
	private long _id_esf_raduno_shooters;
	private long _id_esf_raduno;
	private long _originalId_esf_raduno;
	private boolean _setOriginalId_esf_raduno;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _columnBitmask;
	private EsfRadunoShooters _escapedModel;
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.ethica.esf.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import it.ethica.esf.model.ESFRadunoSottotipiRaduno;
import it.ethica.esf.model.ESFRadunoSottotipiRadunoModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ESFRadunoSottotipiRaduno service. Represents a row in the &quot;ESFRadunoSottotipiRaduno&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.ethica.esf.model.ESFRadunoSottotipiRadunoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ESFRadunoSottotipiRadunoImpl}.
 * </p>
 *
 * @author Ethica
 * @see ESFRadunoSottotipiRadunoImpl
 * @see it.ethica.esf.model.ESFRadunoSottotipiRaduno
 * @see it.ethica.esf.model.ESFRadunoSottotipiRadunoModel
 * @generated
 */
public class ESFRadunoSottotipiRadunoModelImpl extends BaseModelImpl<ESFRadunoSottotipiRaduno>
	implements ESFRadunoSottotipiRadunoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a e s f raduno sottotipi raduno model instance should use the {@link it.ethica.esf.model.ESFRadunoSottotipiRaduno} interface instead.
	 */
	public static final String TABLE_NAME = "ESFRadunoSottotipiRaduno";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_esf_raduno_sottotipi_raduno", Types.BIGINT },
			{ "id_esf_raduno", Types.BIGINT },
			{ "id_esf_raduno_sottotipo", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table ESFRadunoSottotipiRaduno (id_esf_raduno_sottotipi_raduno LONG not null primary key IDENTITY,id_esf_raduno LONG,id_esf_raduno_sottotipo LONG)";
	public static final String TABLE_SQL_DROP = "drop table ESFRadunoSottotipiRaduno";
	public static final String ORDER_BY_JPQL = " ORDER BY esfRadunoSottotipiRaduno.id_esf_raduno_sottotipi_raduno ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ESFRadunoSottotipiRaduno.id_esf_raduno_sottotipi_raduno ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.ethica.esf.model.ESFRadunoSottotipiRaduno"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.ethica.esf.model.ESFRadunoSottotipiRaduno"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.it.ethica.esf.model.ESFRadunoSottotipiRaduno"),
			true);
	public static long ID_ESF_RADUNO_COLUMN_BITMASK = 1L;
	public static long ID_ESF_RADUNO_SOTTOTIPI_RADUNO_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.ethica.esf.model.ESFRadunoSottotipiRaduno"));

	public ESFRadunoSottotipiRadunoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id_esf_raduno_sottotipi_raduno;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId_esf_raduno_sottotipi_raduno(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id_esf_raduno_sottotipi_raduno;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ESFRadunoSottotipiRaduno.class;
	}

	@Override
	public String getModelClassName() {
		return ESFRadunoSottotipiRaduno.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id_esf_raduno_sottotipi_raduno",
			getId_esf_raduno_sottotipi_raduno());
		attributes.put("id_esf_raduno", getId_esf_raduno());
		attributes.put("id_esf_raduno_sottotipo", getId_esf_raduno_sottotipo());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id_esf_raduno_sottotipi_raduno = (Long)attributes.get(
				"id_esf_raduno_sottotipi_raduno");

		if (id_esf_raduno_sottotipi_raduno != null) {
			setId_esf_raduno_sottotipi_raduno(id_esf_raduno_sottotipi_raduno);
		}

		Long id_esf_raduno = (Long)attributes.get("id_esf_raduno");

		if (id_esf_raduno != null) {
			setId_esf_raduno(id_esf_raduno);
		}

		Long id_esf_raduno_sottotipo = (Long)attributes.get(
				"id_esf_raduno_sottotipo");

		if (id_esf_raduno_sottotipo != null) {
			setId_esf_raduno_sottotipo(id_esf_raduno_sottotipo);
		}
	}

	@Override
	public long getId_esf_raduno_sottotipi_raduno() {
		return _id_esf_raduno_sottotipi_raduno;
	}

	@Override
	public void setId_esf_raduno_sottotipi_raduno(
		long id_esf_raduno_sottotipi_raduno) {
		_id_esf_raduno_sottotipi_raduno = id_esf_raduno_sottotipi_raduno;
	}

	@Override
	public long getId_esf_raduno() {
		return _id_esf_raduno;
	}

	@Override
	public void setId_esf_raduno(long id_esf_raduno) {
		_columnBitmask |= ID_ESF_RADUNO_COLUMN_BITMASK;

		if (!_setOriginalId_esf_raduno) {
			_setOriginalId_esf_raduno = true;

			_originalId_esf_raduno = _id_esf_raduno;
		}

		_id_esf_raduno = id_esf_raduno;
	}

	public long getOriginalId_esf_raduno() {
		return _originalId_esf_raduno;
	}

	@Override
	public long getId_esf_raduno_sottotipo() {
		return _id_esf_raduno_sottotipo;
	}

	@Override
	public void setId_esf_raduno_sottotipo(long id_esf_raduno_sottotipo) {
		_id_esf_raduno_sottotipo = id_esf_raduno_sottotipo;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ESFRadunoSottotipiRaduno.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ESFRadunoSottotipiRaduno toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ESFRadunoSottotipiRaduno)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ESFRadunoSottotipiRadunoImpl esfRadunoSottotipiRadunoImpl = new ESFRadunoSottotipiRadunoImpl();

		esfRadunoSottotipiRadunoImpl.setId_esf_raduno_sottotipi_raduno(getId_esf_raduno_sottotipi_raduno());
		esfRadunoSottotipiRadunoImpl.setId_esf_raduno(getId_esf_raduno());
		esfRadunoSottotipiRadunoImpl.setId_esf_raduno_sottotipo(getId_esf_raduno_sottotipo());

		esfRadunoSottotipiRadunoImpl.resetOriginalValues();

		return esfRadunoSottotipiRadunoImpl;
	}

	@Override
	public int compareTo(ESFRadunoSottotipiRaduno esfRadunoSottotipiRaduno) {
		long primaryKey = esfRadunoSottotipiRaduno.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ESFRadunoSottotipiRaduno)) {
			return false;
		}

		ESFRadunoSottotipiRaduno esfRadunoSottotipiRaduno = (ESFRadunoSottotipiRaduno)obj;

		long primaryKey = esfRadunoSottotipiRaduno.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ESFRadunoSottotipiRadunoModelImpl esfRadunoSottotipiRadunoModelImpl = this;

		esfRadunoSottotipiRadunoModelImpl._originalId_esf_raduno = esfRadunoSottotipiRadunoModelImpl._id_esf_raduno;

		esfRadunoSottotipiRadunoModelImpl._setOriginalId_esf_raduno = false;

		esfRadunoSottotipiRadunoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ESFRadunoSottotipiRaduno> toCacheModel() {
		ESFRadunoSottotipiRadunoCacheModel esfRadunoSottotipiRadunoCacheModel = new ESFRadunoSottotipiRadunoCacheModel();

		esfRadunoSottotipiRadunoCacheModel.id_esf_raduno_sottotipi_raduno = getId_esf_raduno_sottotipi_raduno();

		esfRadunoSottotipiRadunoCacheModel.id_esf_raduno = getId_esf_raduno();

		esfRadunoSottotipiRadunoCacheModel.id_esf_raduno_sottotipo = getId_esf_raduno_sottotipo();

		return esfRadunoSottotipiRadunoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{id_esf_raduno_sottotipi_raduno=");
		sb.append(getId_esf_raduno_sottotipi_raduno());
		sb.append(", id_esf_raduno=");
		sb.append(getId_esf_raduno());
		sb.append(", id_esf_raduno_sottotipo=");
		sb.append(getId_esf_raduno_sottotipo());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("it.ethica.esf.model.ESFRadunoSottotipiRaduno");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id_esf_raduno_sottotipi_raduno</column-name><column-value><![CDATA[");
		sb.append(getId_esf_raduno_sottotipi_raduno());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_esf_raduno</column-name><column-value><![CDATA[");
		sb.append(getId_esf_raduno());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>id_esf_raduno_sottotipo</column-name><column-value><![CDATA[");
		sb.append(getId_esf_raduno_sottotipo());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ESFRadunoSottotipiRaduno.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ESFRadunoSottotipiRaduno.class
		};
	private long _id_esf_raduno_sottotipi_raduno;
	private long _id_esf_raduno;
	private long _originalId_esf_raduno;
	private boolean _setOriginalId_esf_raduno;
	private long _id_esf_raduno_sottotipo;
	private long _columnBitmask;
	private ESFRadunoSottotipiRaduno _escapedModel;
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.ethica.esf.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import it.ethica.esf.model.ESFTournament;
import it.ethica.esf.model.ESFTournamentModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ESFTournament service. Represents a row in the &quot;ESFTournament&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.ethica.esf.model.ESFTournamentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ESFTournamentImpl}.
 * </p>
 *
 * @author Ethica
 * @see ESFTournamentImpl
 * @see it.ethica.esf.model.ESFTournament
 * @see it.ethica.esf.model.ESFTournamentModel
 * @generated
 */
public class ESFTournamentModelImpl extends BaseModelImpl<ESFTournament>
	implements ESFTournamentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a e s f tournament model instance should use the {@link it.ethica.esf.model.ESFTournament} interface instead.
	 */
	public static final String TABLE_NAME = "ESFTournament";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "esfTournamentId", Types.BIGINT },
			{ "esfOrganizationId", Types.BIGINT },
			{ "title", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "maxnum", Types.BIGINT },
			{ "minnum", Types.BIGINT },
			{ "isSingleMatch", Types.BOOLEAN },
			{ "isTeamMatch", Types.BOOLEAN },
			{ "isIndividualMatch", Types.BOOLEAN },
			{ "isJuniorMatch", Types.BOOLEAN },
			{ "isNationalMatch", Types.BOOLEAN },
			{ "isFinal", Types.BOOLEAN },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table ESFTournament (uuid_ VARCHAR(75) null,esfTournamentId LONG not null primary key,esfOrganizationId LONG,title VARCHAR(75) null,description VARCHAR(75) null,maxnum LONG,minnum LONG,isSingleMatch BOOLEAN,isTeamMatch BOOLEAN,isIndividualMatch BOOLEAN,isJuniorMatch BOOLEAN,isNationalMatch BOOLEAN,isFinal BOOLEAN,startDate DATE null,endDate DATE null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table ESFTournament";
	public static final String ORDER_BY_JPQL = " ORDER BY esfTournament.esfTournamentId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ESFTournament.esfTournamentId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.ethica.esf.model.ESFTournament"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.ethica.esf.model.ESFTournament"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.it.ethica.esf.model.ESFTournament"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long UUID_COLUMN_BITMASK = 4L;
	public static long ESFTOURNAMENTID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.ethica.esf.model.ESFTournament"));

	public ESFTournamentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _esfTournamentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEsfTournamentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _esfTournamentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ESFTournament.class;
	}

	@Override
	public String getModelClassName() {
		return ESFTournament.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("esfTournamentId", getEsfTournamentId());
		attributes.put("esfOrganizationId", getEsfOrganizationId());
		attributes.put("title", getTitle());
		attributes.put("description", getDescription());
		attributes.put("maxnum", getMaxnum());
		attributes.put("minnum", getMinnum());
		attributes.put("isSingleMatch", getIsSingleMatch());
		attributes.put("isTeamMatch", getIsTeamMatch());
		attributes.put("isIndividualMatch", getIsIndividualMatch());
		attributes.put("isJuniorMatch", getIsJuniorMatch());
		attributes.put("isNationalMatch", getIsNationalMatch());
		attributes.put("isFinal", getIsFinal());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long esfTournamentId = (Long)attributes.get("esfTournamentId");

		if (esfTournamentId != null) {
			setEsfTournamentId(esfTournamentId);
		}

		Long esfOrganizationId = (Long)attributes.get("esfOrganizationId");

		if (esfOrganizationId != null) {
			setEsfOrganizationId(esfOrganizationId);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Long maxnum = (Long)attributes.get("maxnum");

		if (maxnum != null) {
			setMaxnum(maxnum);
		}

		Long minnum = (Long)attributes.get("minnum");

		if (minnum != null) {
			setMinnum(minnum);
		}

		Boolean isSingleMatch = (Boolean)attributes.get("isSingleMatch");

		if (isSingleMatch != null) {
			setIsSingleMatch(isSingleMatch);
		}

		Boolean isTeamMatch = (Boolean)attributes.get("isTeamMatch");

		if (isTeamMatch != null) {
			setIsTeamMatch(isTeamMatch);
		}

		Boolean isIndividualMatch = (Boolean)attributes.get("isIndividualMatch");

		if (isIndividualMatch != null) {
			setIsIndividualMatch(isIndividualMatch);
		}

		Boolean isJuniorMatch = (Boolean)attributes.get("isJuniorMatch");

		if (isJuniorMatch != null) {
			setIsJuniorMatch(isJuniorMatch);
		}

		Boolean isNationalMatch = (Boolean)attributes.get("isNationalMatch");

		if (isNationalMatch != null) {
			setIsNationalMatch(isNationalMatch);
		}

		Boolean isFinal = (Boolean)attributes.get("isFinal");

		if (isFinal != null) {
			setIsFinal(isFinal);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getEsfTournamentId() {
		return _esfTournamentId;
	}

	@Override
	public void setEsfTournamentId(long esfTournamentId) {
		_esfTournamentId = esfTournamentId;
	}

	@Override
	public long getEsfOrganizationId() {
		return _esfOrganizationId;
	}

	@Override
	public void setEsfOrganizationId(long esfOrganizationId) {
		_esfOrganizationId = esfOrganizationId;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public long getMaxnum() {
		return _maxnum;
	}

	@Override
	public void setMaxnum(long maxnum) {
		_maxnum = maxnum;
	}

	@Override
	public long getMinnum() {
		return _minnum;
	}

	@Override
	public void setMinnum(long minnum) {
		_minnum = minnum;
	}

	@Override
	public boolean getIsSingleMatch() {
		return _isSingleMatch;
	}

	@Override
	public boolean isIsSingleMatch() {
		return _isSingleMatch;
	}

	@Override
	public void setIsSingleMatch(boolean isSingleMatch) {
		_isSingleMatch = isSingleMatch;
	}

	@Override
	public boolean getIsTeamMatch() {
		return _isTeamMatch;
	}

	@Override
	public boolean isIsTeamMatch() {
		return _isTeamMatch;
	}

	@Override
	public void setIsTeamMatch(boolean isTeamMatch) {
		_isTeamMatch = isTeamMatch;
	}

	@Override
	public boolean getIsIndividualMatch() {
		return _isIndividualMatch;
	}

	@Override
	public boolean isIsIndividualMatch() {
		return _isIndividualMatch;
	}

	@Override
	public void setIsIndividualMatch(boolean isIndividualMatch) {
		_isIndividualMatch = isIndividualMatch;
	}

	@Override
	public boolean getIsJuniorMatch() {
		return _isJuniorMatch;
	}

	@Override
	public boolean isIsJuniorMatch() {
		return _isJuniorMatch;
	}

	@Override
	public void setIsJuniorMatch(boolean isJuniorMatch) {
		_isJuniorMatch = isJuniorMatch;
	}

	@Override
	public boolean getIsNationalMatch() {
		return _isNationalMatch;
	}

	@Override
	public boolean isIsNationalMatch() {
		return _isNationalMatch;
	}

	@Override
	public void setIsNationalMatch(boolean isNationalMatch) {
		_isNationalMatch = isNationalMatch;
	}

	@Override
	public boolean getIsFinal() {
		return _isFinal;
	}

	@Override
	public boolean isIsFinal() {
		return _isFinal;
	}

	@Override
	public void setIsFinal(boolean isFinal) {
		_isFinal = isFinal;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				ESFTournament.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ESFTournament.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ESFTournament toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ESFTournament)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ESFTournamentImpl esfTournamentImpl = new ESFTournamentImpl();

		esfTournamentImpl.setUuid(getUuid());
		esfTournamentImpl.setEsfTournamentId(getEsfTournamentId());
		esfTournamentImpl.setEsfOrganizationId(getEsfOrganizationId());
		esfTournamentImpl.setTitle(getTitle());
		esfTournamentImpl.setDescription(getDescription());
		esfTournamentImpl.setMaxnum(getMaxnum());
		esfTournamentImpl.setMinnum(getMinnum());
		esfTournamentImpl.setIsSingleMatch(getIsSingleMatch());
		esfTournamentImpl.setIsTeamMatch(getIsTeamMatch());
		esfTournamentImpl.setIsIndividualMatch(getIsIndividualMatch());
		esfTournamentImpl.setIsJuniorMatch(getIsJuniorMatch());
		esfTournamentImpl.setIsNationalMatch(getIsNationalMatch());
		esfTournamentImpl.setIsFinal(getIsFinal());
		esfTournamentImpl.setStartDate(getStartDate());
		esfTournamentImpl.setEndDate(getEndDate());
		esfTournamentImpl.setGroupId(getGroupId());
		esfTournamentImpl.setCompanyId(getCompanyId());
		esfTournamentImpl.setUserId(getUserId());
		esfTournamentImpl.setUserName(getUserName());
		esfTournamentImpl.setCreateDate(getCreateDate());
		esfTournamentImpl.setModifiedDate(getModifiedDate());

		esfTournamentImpl.resetOriginalValues();

		return esfTournamentImpl;
	}

	@Override
	public int compareTo(ESFTournament esfTournament) {
		long primaryKey = esfTournament.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ESFTournament)) {
			return false;
		}

		ESFTournament esfTournament = (ESFTournament)obj;

		long primaryKey = esfTournament.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ESFTournamentModelImpl esfTournamentModelImpl = this;

		esfTournamentModelImpl._originalUuid = esfTournamentModelImpl._uuid;

		esfTournamentModelImpl._originalGroupId = esfTournamentModelImpl._groupId;

		esfTournamentModelImpl._setOriginalGroupId = false;

		esfTournamentModelImpl._originalCompanyId = esfTournamentModelImpl._companyId;

		esfTournamentModelImpl._setOriginalCompanyId = false;

		esfTournamentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ESFTournament> toCacheModel() {
		ESFTournamentCacheModel esfTournamentCacheModel = new ESFTournamentCacheModel();

		esfTournamentCacheModel.uuid = getUuid();

		String uuid = esfTournamentCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			esfTournamentCacheModel.uuid = null;
		}

		esfTournamentCacheModel.esfTournamentId = getEsfTournamentId();

		esfTournamentCacheModel.esfOrganizationId = getEsfOrganizationId();

		esfTournamentCacheModel.title = getTitle();

		String title = esfTournamentCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			esfTournamentCacheModel.title = null;
		}

		esfTournamentCacheModel.description = getDescription();

		String description = esfTournamentCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			esfTournamentCacheModel.description = null;
		}

		esfTournamentCacheModel.maxnum = getMaxnum();

		esfTournamentCacheModel.minnum = getMinnum();

		esfTournamentCacheModel.isSingleMatch = getIsSingleMatch();

		esfTournamentCacheModel.isTeamMatch = getIsTeamMatch();

		esfTournamentCacheModel.isIndividualMatch = getIsIndividualMatch();

		esfTournamentCacheModel.isJuniorMatch = getIsJuniorMatch();

		esfTournamentCacheModel.isNationalMatch = getIsNationalMatch();

		esfTournamentCacheModel.isFinal = getIsFinal();

		Date startDate = getStartDate();

		if (startDate != null) {
			esfTournamentCacheModel.startDate = startDate.getTime();
		}
		else {
			esfTournamentCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			esfTournamentCacheModel.endDate = endDate.getTime();
		}
		else {
			esfTournamentCacheModel.endDate = Long.MIN_VALUE;
		}

		esfTournamentCacheModel.groupId = getGroupId();

		esfTournamentCacheModel.companyId = getCompanyId();

		esfTournamentCacheModel.userId = getUserId();

		esfTournamentCacheModel.userName = getUserName();

		String userName = esfTournamentCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			esfTournamentCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			esfTournamentCacheModel.createDate = createDate.getTime();
		}
		else {
			esfTournamentCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			esfTournamentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			esfTournamentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return esfTournamentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(43);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", esfTournamentId=");
		sb.append(getEsfTournamentId());
		sb.append(", esfOrganizationId=");
		sb.append(getEsfOrganizationId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", maxnum=");
		sb.append(getMaxnum());
		sb.append(", minnum=");
		sb.append(getMinnum());
		sb.append(", isSingleMatch=");
		sb.append(getIsSingleMatch());
		sb.append(", isTeamMatch=");
		sb.append(getIsTeamMatch());
		sb.append(", isIndividualMatch=");
		sb.append(getIsIndividualMatch());
		sb.append(", isJuniorMatch=");
		sb.append(getIsJuniorMatch());
		sb.append(", isNationalMatch=");
		sb.append(getIsNationalMatch());
		sb.append(", isFinal=");
		sb.append(getIsFinal());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(67);

		sb.append("<model><model-name>");
		sb.append("it.ethica.esf.model.ESFTournament");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfTournamentId</column-name><column-value><![CDATA[");
		sb.append(getEsfTournamentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfOrganizationId</column-name><column-value><![CDATA[");
		sb.append(getEsfOrganizationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxnum</column-name><column-value><![CDATA[");
		sb.append(getMaxnum());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>minnum</column-name><column-value><![CDATA[");
		sb.append(getMinnum());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isSingleMatch</column-name><column-value><![CDATA[");
		sb.append(getIsSingleMatch());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isTeamMatch</column-name><column-value><![CDATA[");
		sb.append(getIsTeamMatch());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isIndividualMatch</column-name><column-value><![CDATA[");
		sb.append(getIsIndividualMatch());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isJuniorMatch</column-name><column-value><![CDATA[");
		sb.append(getIsJuniorMatch());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isNationalMatch</column-name><column-value><![CDATA[");
		sb.append(getIsNationalMatch());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isFinal</column-name><column-value><![CDATA[");
		sb.append(getIsFinal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ESFTournament.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ESFTournament.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _esfTournamentId;
	private long _esfOrganizationId;
	private String _title;
	private String _description;
	private long _maxnum;
	private long _minnum;
	private boolean _isSingleMatch;
	private boolean _isTeamMatch;
	private boolean _isIndividualMatch;
	private boolean _isJuniorMatch;
	private boolean _isNationalMatch;
	private boolean _isFinal;
	private Date _startDate;
	private Date _endDate;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _columnBitmask;
	private ESFTournament _escapedModel;
}
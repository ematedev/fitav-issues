/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.ethica.esf.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import it.ethica.esf.model.ESFCity;
import it.ethica.esf.model.ESFCityModel;
import it.ethica.esf.service.persistence.ESFCityPK;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ESFCity service. Represents a row in the &quot;ESFCity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.ethica.esf.model.ESFCityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ESFCityImpl}.
 * </p>
 *
 * @author Ethica
 * @see ESFCityImpl
 * @see it.ethica.esf.model.ESFCity
 * @see it.ethica.esf.model.ESFCityModel
 * @generated
 */
@JSON(strict = true)
public class ESFCityModelImpl extends BaseModelImpl<ESFCity>
	implements ESFCityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a e s f city model instance should use the {@link it.ethica.esf.model.ESFCity} interface instead.
	 */
	public static final String TABLE_NAME = "ESFCity";
	public static final Object[][] TABLE_COLUMNS = {
			{ "idCity", Types.BIGINT },
			{ "idProvince", Types.VARCHAR },
			{ "idRegion", Types.VARCHAR },
			{ "idCountry", Types.VARCHAR },
			{ "zip", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "latitude", Types.DOUBLE },
			{ "longitude", Types.DOUBLE },
			{ "altitude", Types.DOUBLE },
			{ "website", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ESFCity (idCity LONG not null,idProvince VARCHAR(75) not null,idRegion VARCHAR(75) not null,idCountry VARCHAR(75) not null,zip LONG,name VARCHAR(75) null,latitude DOUBLE,longitude DOUBLE,altitude DOUBLE,website VARCHAR(75) null,primary key (idCity, idProvince, idRegion, idCountry))";
	public static final String TABLE_SQL_DROP = "drop table ESFCity";
	public static final String ORDER_BY_JPQL = " ORDER BY esfCity.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ESFCity.name ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.ethica.esf.model.ESFCity"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.ethica.esf.model.ESFCity"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.it.ethica.esf.model.ESFCity"),
			true);
	public static long IDCOUNTRY_COLUMN_BITMASK = 1L;
	public static long IDPROVINCE_COLUMN_BITMASK = 2L;
	public static long IDREGION_COLUMN_BITMASK = 4L;
	public static long NAME_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.ethica.esf.model.ESFCity"));

	public ESFCityModelImpl() {
	}

	@Override
	public ESFCityPK getPrimaryKey() {
		return new ESFCityPK(_idCity, _idProvince, _idRegion, _idCountry);
	}

	@Override
	public void setPrimaryKey(ESFCityPK primaryKey) {
		setIdCity(primaryKey.idCity);
		setIdProvince(primaryKey.idProvince);
		setIdRegion(primaryKey.idRegion);
		setIdCountry(primaryKey.idCountry);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new ESFCityPK(_idCity, _idProvince, _idRegion, _idCountry);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((ESFCityPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return ESFCity.class;
	}

	@Override
	public String getModelClassName() {
		return ESFCity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("idCity", getIdCity());
		attributes.put("idProvince", getIdProvince());
		attributes.put("idRegion", getIdRegion());
		attributes.put("idCountry", getIdCountry());
		attributes.put("zip", getZip());
		attributes.put("name", getName());
		attributes.put("latitude", getLatitude());
		attributes.put("longitude", getLongitude());
		attributes.put("altitude", getAltitude());
		attributes.put("website", getWebsite());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long idCity = (Long)attributes.get("idCity");

		if (idCity != null) {
			setIdCity(idCity);
		}

		String idProvince = (String)attributes.get("idProvince");

		if (idProvince != null) {
			setIdProvince(idProvince);
		}

		String idRegion = (String)attributes.get("idRegion");

		if (idRegion != null) {
			setIdRegion(idRegion);
		}

		String idCountry = (String)attributes.get("idCountry");

		if (idCountry != null) {
			setIdCountry(idCountry);
		}

		Long zip = (Long)attributes.get("zip");

		if (zip != null) {
			setZip(zip);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Double latitude = (Double)attributes.get("latitude");

		if (latitude != null) {
			setLatitude(latitude);
		}

		Double longitude = (Double)attributes.get("longitude");

		if (longitude != null) {
			setLongitude(longitude);
		}

		Double altitude = (Double)attributes.get("altitude");

		if (altitude != null) {
			setAltitude(altitude);
		}

		String website = (String)attributes.get("website");

		if (website != null) {
			setWebsite(website);
		}
	}

	@JSON
	@Override
	public long getIdCity() {
		return _idCity;
	}

	@Override
	public void setIdCity(long idCity) {
		_idCity = idCity;
	}

	@JSON
	@Override
	public String getIdProvince() {
		if (_idProvince == null) {
			return StringPool.BLANK;
		}
		else {
			return _idProvince;
		}
	}

	@Override
	public void setIdProvince(String idProvince) {
		_columnBitmask |= IDPROVINCE_COLUMN_BITMASK;

		if (_originalIdProvince == null) {
			_originalIdProvince = _idProvince;
		}

		_idProvince = idProvince;
	}

	public String getOriginalIdProvince() {
		return GetterUtil.getString(_originalIdProvince);
	}

	@JSON
	@Override
	public String getIdRegion() {
		if (_idRegion == null) {
			return StringPool.BLANK;
		}
		else {
			return _idRegion;
		}
	}

	@Override
	public void setIdRegion(String idRegion) {
		_columnBitmask |= IDREGION_COLUMN_BITMASK;

		if (_originalIdRegion == null) {
			_originalIdRegion = _idRegion;
		}

		_idRegion = idRegion;
	}

	public String getOriginalIdRegion() {
		return GetterUtil.getString(_originalIdRegion);
	}

	@JSON
	@Override
	public String getIdCountry() {
		if (_idCountry == null) {
			return StringPool.BLANK;
		}
		else {
			return _idCountry;
		}
	}

	@Override
	public void setIdCountry(String idCountry) {
		_columnBitmask |= IDCOUNTRY_COLUMN_BITMASK;

		if (_originalIdCountry == null) {
			_originalIdCountry = _idCountry;
		}

		_idCountry = idCountry;
	}

	public String getOriginalIdCountry() {
		return GetterUtil.getString(_originalIdCountry);
	}

	@JSON
	@Override
	public long getZip() {
		return _zip;
	}

	@Override
	public void setZip(long zip) {
		_zip = zip;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		if (_originalName == null) {
			_originalName = _name;
		}

		_name = name;
	}

	public String getOriginalName() {
		return GetterUtil.getString(_originalName);
	}

	@JSON
	@Override
	public double getLatitude() {
		return _latitude;
	}

	@Override
	public void setLatitude(double latitude) {
		_latitude = latitude;
	}

	@JSON
	@Override
	public double getLongitude() {
		return _longitude;
	}

	@Override
	public void setLongitude(double longitude) {
		_longitude = longitude;
	}

	@JSON
	@Override
	public double getAltitude() {
		return _altitude;
	}

	@Override
	public void setAltitude(double altitude) {
		_altitude = altitude;
	}

	@JSON
	@Override
	public String getWebsite() {
		if (_website == null) {
			return StringPool.BLANK;
		}
		else {
			return _website;
		}
	}

	@Override
	public void setWebsite(String website) {
		_website = website;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ESFCity toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ESFCity)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ESFCityImpl esfCityImpl = new ESFCityImpl();

		esfCityImpl.setIdCity(getIdCity());
		esfCityImpl.setIdProvince(getIdProvince());
		esfCityImpl.setIdRegion(getIdRegion());
		esfCityImpl.setIdCountry(getIdCountry());
		esfCityImpl.setZip(getZip());
		esfCityImpl.setName(getName());
		esfCityImpl.setLatitude(getLatitude());
		esfCityImpl.setLongitude(getLongitude());
		esfCityImpl.setAltitude(getAltitude());
		esfCityImpl.setWebsite(getWebsite());

		esfCityImpl.resetOriginalValues();

		return esfCityImpl;
	}

	@Override
	public int compareTo(ESFCity esfCity) {
		int value = 0;

		value = getName().compareTo(esfCity.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ESFCity)) {
			return false;
		}

		ESFCity esfCity = (ESFCity)obj;

		ESFCityPK primaryKey = esfCity.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		ESFCityModelImpl esfCityModelImpl = this;

		esfCityModelImpl._originalIdProvince = esfCityModelImpl._idProvince;

		esfCityModelImpl._originalIdRegion = esfCityModelImpl._idRegion;

		esfCityModelImpl._originalIdCountry = esfCityModelImpl._idCountry;

		esfCityModelImpl._originalName = esfCityModelImpl._name;

		esfCityModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ESFCity> toCacheModel() {
		ESFCityCacheModel esfCityCacheModel = new ESFCityCacheModel();

		esfCityCacheModel.idCity = getIdCity();

		esfCityCacheModel.idProvince = getIdProvince();

		String idProvince = esfCityCacheModel.idProvince;

		if ((idProvince != null) && (idProvince.length() == 0)) {
			esfCityCacheModel.idProvince = null;
		}

		esfCityCacheModel.idRegion = getIdRegion();

		String idRegion = esfCityCacheModel.idRegion;

		if ((idRegion != null) && (idRegion.length() == 0)) {
			esfCityCacheModel.idRegion = null;
		}

		esfCityCacheModel.idCountry = getIdCountry();

		String idCountry = esfCityCacheModel.idCountry;

		if ((idCountry != null) && (idCountry.length() == 0)) {
			esfCityCacheModel.idCountry = null;
		}

		esfCityCacheModel.zip = getZip();

		esfCityCacheModel.name = getName();

		String name = esfCityCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			esfCityCacheModel.name = null;
		}

		esfCityCacheModel.latitude = getLatitude();

		esfCityCacheModel.longitude = getLongitude();

		esfCityCacheModel.altitude = getAltitude();

		esfCityCacheModel.website = getWebsite();

		String website = esfCityCacheModel.website;

		if ((website != null) && (website.length() == 0)) {
			esfCityCacheModel.website = null;
		}

		return esfCityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{idCity=");
		sb.append(getIdCity());
		sb.append(", idProvince=");
		sb.append(getIdProvince());
		sb.append(", idRegion=");
		sb.append(getIdRegion());
		sb.append(", idCountry=");
		sb.append(getIdCountry());
		sb.append(", zip=");
		sb.append(getZip());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", latitude=");
		sb.append(getLatitude());
		sb.append(", longitude=");
		sb.append(getLongitude());
		sb.append(", altitude=");
		sb.append(getAltitude());
		sb.append(", website=");
		sb.append(getWebsite());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("it.ethica.esf.model.ESFCity");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>idCity</column-name><column-value><![CDATA[");
		sb.append(getIdCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idProvince</column-name><column-value><![CDATA[");
		sb.append(getIdProvince());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idRegion</column-name><column-value><![CDATA[");
		sb.append(getIdRegion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idCountry</column-name><column-value><![CDATA[");
		sb.append(getIdCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>zip</column-name><column-value><![CDATA[");
		sb.append(getZip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>latitude</column-name><column-value><![CDATA[");
		sb.append(getLatitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>longitude</column-name><column-value><![CDATA[");
		sb.append(getLongitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>altitude</column-name><column-value><![CDATA[");
		sb.append(getAltitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>website</column-name><column-value><![CDATA[");
		sb.append(getWebsite());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ESFCity.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ESFCity.class
		};
	private long _idCity;
	private String _idProvince;
	private String _originalIdProvince;
	private String _idRegion;
	private String _originalIdRegion;
	private String _idCountry;
	private String _originalIdCountry;
	private long _zip;
	private String _name;
	private String _originalName;
	private double _latitude;
	private double _longitude;
	private double _altitude;
	private String _website;
	private long _columnBitmask;
	private ESFCity _escapedModel;
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.ethica.esf.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import it.ethica.esf.model.ESFShootingDirector;
import it.ethica.esf.model.ESFShootingDirectorModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ESFShootingDirector service. Represents a row in the &quot;ESFShootingDirector&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link it.ethica.esf.model.ESFShootingDirectorModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ESFShootingDirectorImpl}.
 * </p>
 *
 * @author Ethica
 * @see ESFShootingDirectorImpl
 * @see it.ethica.esf.model.ESFShootingDirector
 * @see it.ethica.esf.model.ESFShootingDirectorModel
 * @generated
 */
public class ESFShootingDirectorModelImpl extends BaseModelImpl<ESFShootingDirector>
	implements ESFShootingDirectorModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a e s f shooting director model instance should use the {@link it.ethica.esf.model.ESFShootingDirector} interface instead.
	 */
	public static final String TABLE_NAME = "ESFShootingDirector";
	public static final Object[][] TABLE_COLUMNS = {
			{ "esfShootingDirectorId", Types.BIGINT },
			{ "esfCodeData", Types.VARCHAR },
			{ "esfStartData", Types.TIMESTAMP },
			{ "esfEndData", Types.TIMESTAMP },
			{ "esfUserId", Types.BIGINT },
			{ "codeUser", Types.BIGINT },
			{ "shootingDirectorQualificationId", Types.BIGINT },
			{ "sportTypeId", Types.BIGINT },
			{ "regionId", Types.VARCHAR },
			{ "provinceId", Types.VARCHAR },
			{ "flagCrea", Types.VARCHAR },
			{ "DateVar", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table ESFShootingDirector (esfShootingDirectorId LONG not null primary key,esfCodeData VARCHAR(75) null,esfStartData DATE null,esfEndData DATE null,esfUserId LONG,codeUser LONG,shootingDirectorQualificationId LONG,sportTypeId LONG,regionId VARCHAR(75) null,provinceId VARCHAR(75) null,flagCrea VARCHAR(75) null,DateVar DATE null)";
	public static final String TABLE_SQL_DROP = "drop table ESFShootingDirector";
	public static final String ORDER_BY_JPQL = " ORDER BY esfShootingDirector.shootingDirectorQualificationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY ESFShootingDirector.shootingDirectorQualificationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.it.ethica.esf.model.ESFShootingDirector"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.it.ethica.esf.model.ESFShootingDirector"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.it.ethica.esf.model.ESFShootingDirector"),
			true);
	public static long ESFUSERID_COLUMN_BITMASK = 1L;
	public static long PROVINCEID_COLUMN_BITMASK = 2L;
	public static long REGIONID_COLUMN_BITMASK = 4L;
	public static long SHOOTINGDIRECTORQUALIFICATIONID_COLUMN_BITMASK = 8L;
	public static long SPORTTYPEID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.it.ethica.esf.model.ESFShootingDirector"));

	public ESFShootingDirectorModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _esfShootingDirectorId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setEsfShootingDirectorId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _esfShootingDirectorId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ESFShootingDirector.class;
	}

	@Override
	public String getModelClassName() {
		return ESFShootingDirector.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("esfShootingDirectorId", getEsfShootingDirectorId());
		attributes.put("esfCodeData", getEsfCodeData());
		attributes.put("esfStartData", getEsfStartData());
		attributes.put("esfEndData", getEsfEndData());
		attributes.put("esfUserId", getEsfUserId());
		attributes.put("codeUser", getCodeUser());
		attributes.put("shootingDirectorQualificationId",
			getShootingDirectorQualificationId());
		attributes.put("sportTypeId", getSportTypeId());
		attributes.put("regionId", getRegionId());
		attributes.put("provinceId", getProvinceId());
		attributes.put("flagCrea", getFlagCrea());
		attributes.put("DateVar", getDateVar());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long esfShootingDirectorId = (Long)attributes.get(
				"esfShootingDirectorId");

		if (esfShootingDirectorId != null) {
			setEsfShootingDirectorId(esfShootingDirectorId);
		}

		String esfCodeData = (String)attributes.get("esfCodeData");

		if (esfCodeData != null) {
			setEsfCodeData(esfCodeData);
		}

		Date esfStartData = (Date)attributes.get("esfStartData");

		if (esfStartData != null) {
			setEsfStartData(esfStartData);
		}

		Date esfEndData = (Date)attributes.get("esfEndData");

		if (esfEndData != null) {
			setEsfEndData(esfEndData);
		}

		Long esfUserId = (Long)attributes.get("esfUserId");

		if (esfUserId != null) {
			setEsfUserId(esfUserId);
		}

		Long codeUser = (Long)attributes.get("codeUser");

		if (codeUser != null) {
			setCodeUser(codeUser);
		}

		Long shootingDirectorQualificationId = (Long)attributes.get(
				"shootingDirectorQualificationId");

		if (shootingDirectorQualificationId != null) {
			setShootingDirectorQualificationId(shootingDirectorQualificationId);
		}

		Long sportTypeId = (Long)attributes.get("sportTypeId");

		if (sportTypeId != null) {
			setSportTypeId(sportTypeId);
		}

		String regionId = (String)attributes.get("regionId");

		if (regionId != null) {
			setRegionId(regionId);
		}

		String provinceId = (String)attributes.get("provinceId");

		if (provinceId != null) {
			setProvinceId(provinceId);
		}

		String flagCrea = (String)attributes.get("flagCrea");

		if (flagCrea != null) {
			setFlagCrea(flagCrea);
		}

		Date DateVar = (Date)attributes.get("DateVar");

		if (DateVar != null) {
			setDateVar(DateVar);
		}
	}

	@Override
	public long getEsfShootingDirectorId() {
		return _esfShootingDirectorId;
	}

	@Override
	public void setEsfShootingDirectorId(long esfShootingDirectorId) {
		_esfShootingDirectorId = esfShootingDirectorId;
	}

	@Override
	public String getEsfCodeData() {
		if (_esfCodeData == null) {
			return StringPool.BLANK;
		}
		else {
			return _esfCodeData;
		}
	}

	@Override
	public void setEsfCodeData(String esfCodeData) {
		_esfCodeData = esfCodeData;
	}

	@Override
	public Date getEsfStartData() {
		return _esfStartData;
	}

	@Override
	public void setEsfStartData(Date esfStartData) {
		_esfStartData = esfStartData;
	}

	@Override
	public Date getEsfEndData() {
		return _esfEndData;
	}

	@Override
	public void setEsfEndData(Date esfEndData) {
		_esfEndData = esfEndData;
	}

	@Override
	public long getEsfUserId() {
		return _esfUserId;
	}

	@Override
	public void setEsfUserId(long esfUserId) {
		_columnBitmask |= ESFUSERID_COLUMN_BITMASK;

		if (!_setOriginalEsfUserId) {
			_setOriginalEsfUserId = true;

			_originalEsfUserId = _esfUserId;
		}

		_esfUserId = esfUserId;
	}

	@Override
	public String getEsfUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getEsfUserId(), "uuid", _esfUserUuid);
	}

	@Override
	public void setEsfUserUuid(String esfUserUuid) {
		_esfUserUuid = esfUserUuid;
	}

	public long getOriginalEsfUserId() {
		return _originalEsfUserId;
	}

	@Override
	public long getCodeUser() {
		return _codeUser;
	}

	@Override
	public void setCodeUser(long codeUser) {
		_codeUser = codeUser;
	}

	@Override
	public long getShootingDirectorQualificationId() {
		return _shootingDirectorQualificationId;
	}

	@Override
	public void setShootingDirectorQualificationId(
		long shootingDirectorQualificationId) {
		_columnBitmask = -1L;

		if (!_setOriginalShootingDirectorQualificationId) {
			_setOriginalShootingDirectorQualificationId = true;

			_originalShootingDirectorQualificationId = _shootingDirectorQualificationId;
		}

		_shootingDirectorQualificationId = shootingDirectorQualificationId;
	}

	public long getOriginalShootingDirectorQualificationId() {
		return _originalShootingDirectorQualificationId;
	}

	@Override
	public long getSportTypeId() {
		return _sportTypeId;
	}

	@Override
	public void setSportTypeId(long sportTypeId) {
		_columnBitmask |= SPORTTYPEID_COLUMN_BITMASK;

		if (!_setOriginalSportTypeId) {
			_setOriginalSportTypeId = true;

			_originalSportTypeId = _sportTypeId;
		}

		_sportTypeId = sportTypeId;
	}

	public long getOriginalSportTypeId() {
		return _originalSportTypeId;
	}

	@Override
	public String getRegionId() {
		if (_regionId == null) {
			return StringPool.BLANK;
		}
		else {
			return _regionId;
		}
	}

	@Override
	public void setRegionId(String regionId) {
		_columnBitmask |= REGIONID_COLUMN_BITMASK;

		if (_originalRegionId == null) {
			_originalRegionId = _regionId;
		}

		_regionId = regionId;
	}

	public String getOriginalRegionId() {
		return GetterUtil.getString(_originalRegionId);
	}

	@Override
	public String getProvinceId() {
		if (_provinceId == null) {
			return StringPool.BLANK;
		}
		else {
			return _provinceId;
		}
	}

	@Override
	public void setProvinceId(String provinceId) {
		_columnBitmask |= PROVINCEID_COLUMN_BITMASK;

		if (_originalProvinceId == null) {
			_originalProvinceId = _provinceId;
		}

		_provinceId = provinceId;
	}

	public String getOriginalProvinceId() {
		return GetterUtil.getString(_originalProvinceId);
	}

	@Override
	public String getFlagCrea() {
		if (_flagCrea == null) {
			return StringPool.BLANK;
		}
		else {
			return _flagCrea;
		}
	}

	@Override
	public void setFlagCrea(String flagCrea) {
		_flagCrea = flagCrea;
	}

	@Override
	public Date getDateVar() {
		return _DateVar;
	}

	@Override
	public void setDateVar(Date DateVar) {
		_DateVar = DateVar;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ESFShootingDirector.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ESFShootingDirector toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ESFShootingDirector)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ESFShootingDirectorImpl esfShootingDirectorImpl = new ESFShootingDirectorImpl();

		esfShootingDirectorImpl.setEsfShootingDirectorId(getEsfShootingDirectorId());
		esfShootingDirectorImpl.setEsfCodeData(getEsfCodeData());
		esfShootingDirectorImpl.setEsfStartData(getEsfStartData());
		esfShootingDirectorImpl.setEsfEndData(getEsfEndData());
		esfShootingDirectorImpl.setEsfUserId(getEsfUserId());
		esfShootingDirectorImpl.setCodeUser(getCodeUser());
		esfShootingDirectorImpl.setShootingDirectorQualificationId(getShootingDirectorQualificationId());
		esfShootingDirectorImpl.setSportTypeId(getSportTypeId());
		esfShootingDirectorImpl.setRegionId(getRegionId());
		esfShootingDirectorImpl.setProvinceId(getProvinceId());
		esfShootingDirectorImpl.setFlagCrea(getFlagCrea());
		esfShootingDirectorImpl.setDateVar(getDateVar());

		esfShootingDirectorImpl.resetOriginalValues();

		return esfShootingDirectorImpl;
	}

	@Override
	public int compareTo(ESFShootingDirector esfShootingDirector) {
		int value = 0;

		if (getShootingDirectorQualificationId() < esfShootingDirector.getShootingDirectorQualificationId()) {
			value = -1;
		}
		else if (getShootingDirectorQualificationId() > esfShootingDirector.getShootingDirectorQualificationId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ESFShootingDirector)) {
			return false;
		}

		ESFShootingDirector esfShootingDirector = (ESFShootingDirector)obj;

		long primaryKey = esfShootingDirector.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ESFShootingDirectorModelImpl esfShootingDirectorModelImpl = this;

		esfShootingDirectorModelImpl._originalEsfUserId = esfShootingDirectorModelImpl._esfUserId;

		esfShootingDirectorModelImpl._setOriginalEsfUserId = false;

		esfShootingDirectorModelImpl._originalShootingDirectorQualificationId = esfShootingDirectorModelImpl._shootingDirectorQualificationId;

		esfShootingDirectorModelImpl._setOriginalShootingDirectorQualificationId = false;

		esfShootingDirectorModelImpl._originalSportTypeId = esfShootingDirectorModelImpl._sportTypeId;

		esfShootingDirectorModelImpl._setOriginalSportTypeId = false;

		esfShootingDirectorModelImpl._originalRegionId = esfShootingDirectorModelImpl._regionId;

		esfShootingDirectorModelImpl._originalProvinceId = esfShootingDirectorModelImpl._provinceId;

		esfShootingDirectorModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ESFShootingDirector> toCacheModel() {
		ESFShootingDirectorCacheModel esfShootingDirectorCacheModel = new ESFShootingDirectorCacheModel();

		esfShootingDirectorCacheModel.esfShootingDirectorId = getEsfShootingDirectorId();

		esfShootingDirectorCacheModel.esfCodeData = getEsfCodeData();

		String esfCodeData = esfShootingDirectorCacheModel.esfCodeData;

		if ((esfCodeData != null) && (esfCodeData.length() == 0)) {
			esfShootingDirectorCacheModel.esfCodeData = null;
		}

		Date esfStartData = getEsfStartData();

		if (esfStartData != null) {
			esfShootingDirectorCacheModel.esfStartData = esfStartData.getTime();
		}
		else {
			esfShootingDirectorCacheModel.esfStartData = Long.MIN_VALUE;
		}

		Date esfEndData = getEsfEndData();

		if (esfEndData != null) {
			esfShootingDirectorCacheModel.esfEndData = esfEndData.getTime();
		}
		else {
			esfShootingDirectorCacheModel.esfEndData = Long.MIN_VALUE;
		}

		esfShootingDirectorCacheModel.esfUserId = getEsfUserId();

		esfShootingDirectorCacheModel.codeUser = getCodeUser();

		esfShootingDirectorCacheModel.shootingDirectorQualificationId = getShootingDirectorQualificationId();

		esfShootingDirectorCacheModel.sportTypeId = getSportTypeId();

		esfShootingDirectorCacheModel.regionId = getRegionId();

		String regionId = esfShootingDirectorCacheModel.regionId;

		if ((regionId != null) && (regionId.length() == 0)) {
			esfShootingDirectorCacheModel.regionId = null;
		}

		esfShootingDirectorCacheModel.provinceId = getProvinceId();

		String provinceId = esfShootingDirectorCacheModel.provinceId;

		if ((provinceId != null) && (provinceId.length() == 0)) {
			esfShootingDirectorCacheModel.provinceId = null;
		}

		esfShootingDirectorCacheModel.flagCrea = getFlagCrea();

		String flagCrea = esfShootingDirectorCacheModel.flagCrea;

		if ((flagCrea != null) && (flagCrea.length() == 0)) {
			esfShootingDirectorCacheModel.flagCrea = null;
		}

		Date DateVar = getDateVar();

		if (DateVar != null) {
			esfShootingDirectorCacheModel.DateVar = DateVar.getTime();
		}
		else {
			esfShootingDirectorCacheModel.DateVar = Long.MIN_VALUE;
		}

		return esfShootingDirectorCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{esfShootingDirectorId=");
		sb.append(getEsfShootingDirectorId());
		sb.append(", esfCodeData=");
		sb.append(getEsfCodeData());
		sb.append(", esfStartData=");
		sb.append(getEsfStartData());
		sb.append(", esfEndData=");
		sb.append(getEsfEndData());
		sb.append(", esfUserId=");
		sb.append(getEsfUserId());
		sb.append(", codeUser=");
		sb.append(getCodeUser());
		sb.append(", shootingDirectorQualificationId=");
		sb.append(getShootingDirectorQualificationId());
		sb.append(", sportTypeId=");
		sb.append(getSportTypeId());
		sb.append(", regionId=");
		sb.append(getRegionId());
		sb.append(", provinceId=");
		sb.append(getProvinceId());
		sb.append(", flagCrea=");
		sb.append(getFlagCrea());
		sb.append(", DateVar=");
		sb.append(getDateVar());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("it.ethica.esf.model.ESFShootingDirector");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>esfShootingDirectorId</column-name><column-value><![CDATA[");
		sb.append(getEsfShootingDirectorId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfCodeData</column-name><column-value><![CDATA[");
		sb.append(getEsfCodeData());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfStartData</column-name><column-value><![CDATA[");
		sb.append(getEsfStartData());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfEndData</column-name><column-value><![CDATA[");
		sb.append(getEsfEndData());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>esfUserId</column-name><column-value><![CDATA[");
		sb.append(getEsfUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codeUser</column-name><column-value><![CDATA[");
		sb.append(getCodeUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shootingDirectorQualificationId</column-name><column-value><![CDATA[");
		sb.append(getShootingDirectorQualificationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sportTypeId</column-name><column-value><![CDATA[");
		sb.append(getSportTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>regionId</column-name><column-value><![CDATA[");
		sb.append(getRegionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>provinceId</column-name><column-value><![CDATA[");
		sb.append(getProvinceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flagCrea</column-name><column-value><![CDATA[");
		sb.append(getFlagCrea());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DateVar</column-name><column-value><![CDATA[");
		sb.append(getDateVar());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ESFShootingDirector.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ESFShootingDirector.class
		};
	private long _esfShootingDirectorId;
	private String _esfCodeData;
	private Date _esfStartData;
	private Date _esfEndData;
	private long _esfUserId;
	private String _esfUserUuid;
	private long _originalEsfUserId;
	private boolean _setOriginalEsfUserId;
	private long _codeUser;
	private long _shootingDirectorQualificationId;
	private long _originalShootingDirectorQualificationId;
	private boolean _setOriginalShootingDirectorQualificationId;
	private long _sportTypeId;
	private long _originalSportTypeId;
	private boolean _setOriginalSportTypeId;
	private String _regionId;
	private String _originalRegionId;
	private String _provinceId;
	private String _originalProvinceId;
	private String _flagCrea;
	private Date _DateVar;
	private long _columnBitmask;
	private ESFShootingDirector _escapedModel;
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package it.ethica.esf.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the ESFShootingDirector service. Represents a row in the &quot;ESFShootingDirector&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link it.ethica.esf.model.impl.ESFShootingDirectorModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link it.ethica.esf.model.impl.ESFShootingDirectorImpl}.
 * </p>
 *
 * @author Ethica
 * @see ESFShootingDirector
 * @see it.ethica.esf.model.impl.ESFShootingDirectorImpl
 * @see it.ethica.esf.model.impl.ESFShootingDirectorModelImpl
 * @generated
 */
public interface ESFShootingDirectorModel extends BaseModel<ESFShootingDirector> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a e s f shooting director model instance should use the {@link ESFShootingDirector} interface instead.
	 */

	/**
	 * Returns the primary key of this e s f shooting director.
	 *
	 * @return the primary key of this e s f shooting director
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this e s f shooting director.
	 *
	 * @param primaryKey the primary key of this e s f shooting director
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the esf shooting director ID of this e s f shooting director.
	 *
	 * @return the esf shooting director ID of this e s f shooting director
	 */
	public long getEsfShootingDirectorId();

	/**
	 * Sets the esf shooting director ID of this e s f shooting director.
	 *
	 * @param esfShootingDirectorId the esf shooting director ID of this e s f shooting director
	 */
	public void setEsfShootingDirectorId(long esfShootingDirectorId);

	/**
	 * Returns the esf code data of this e s f shooting director.
	 *
	 * @return the esf code data of this e s f shooting director
	 */
	@AutoEscape
	public String getEsfCodeData();

	/**
	 * Sets the esf code data of this e s f shooting director.
	 *
	 * @param esfCodeData the esf code data of this e s f shooting director
	 */
	public void setEsfCodeData(String esfCodeData);

	/**
	 * Returns the esf start data of this e s f shooting director.
	 *
	 * @return the esf start data of this e s f shooting director
	 */
	public Date getEsfStartData();

	/**
	 * Sets the esf start data of this e s f shooting director.
	 *
	 * @param esfStartData the esf start data of this e s f shooting director
	 */
	public void setEsfStartData(Date esfStartData);

	/**
	 * Returns the esf end data of this e s f shooting director.
	 *
	 * @return the esf end data of this e s f shooting director
	 */
	public Date getEsfEndData();

	/**
	 * Sets the esf end data of this e s f shooting director.
	 *
	 * @param esfEndData the esf end data of this e s f shooting director
	 */
	public void setEsfEndData(Date esfEndData);

	/**
	 * Returns the esf user ID of this e s f shooting director.
	 *
	 * @return the esf user ID of this e s f shooting director
	 */
	public long getEsfUserId();

	/**
	 * Sets the esf user ID of this e s f shooting director.
	 *
	 * @param esfUserId the esf user ID of this e s f shooting director
	 */
	public void setEsfUserId(long esfUserId);

	/**
	 * Returns the esf user uuid of this e s f shooting director.
	 *
	 * @return the esf user uuid of this e s f shooting director
	 * @throws SystemException if a system exception occurred
	 */
	public String getEsfUserUuid() throws SystemException;

	/**
	 * Sets the esf user uuid of this e s f shooting director.
	 *
	 * @param esfUserUuid the esf user uuid of this e s f shooting director
	 */
	public void setEsfUserUuid(String esfUserUuid);

	/**
	 * Returns the code user of this e s f shooting director.
	 *
	 * @return the code user of this e s f shooting director
	 */
	public long getCodeUser();

	/**
	 * Sets the code user of this e s f shooting director.
	 *
	 * @param codeUser the code user of this e s f shooting director
	 */
	public void setCodeUser(long codeUser);

	/**
	 * Returns the shooting director qualification ID of this e s f shooting director.
	 *
	 * @return the shooting director qualification ID of this e s f shooting director
	 */
	public long getShootingDirectorQualificationId();

	/**
	 * Sets the shooting director qualification ID of this e s f shooting director.
	 *
	 * @param shootingDirectorQualificationId the shooting director qualification ID of this e s f shooting director
	 */
	public void setShootingDirectorQualificationId(
		long shootingDirectorQualificationId);

	/**
	 * Returns the sport type ID of this e s f shooting director.
	 *
	 * @return the sport type ID of this e s f shooting director
	 */
	public long getSportTypeId();

	/**
	 * Sets the sport type ID of this e s f shooting director.
	 *
	 * @param sportTypeId the sport type ID of this e s f shooting director
	 */
	public void setSportTypeId(long sportTypeId);

	/**
	 * Returns the region ID of this e s f shooting director.
	 *
	 * @return the region ID of this e s f shooting director
	 */
	@AutoEscape
	public String getRegionId();

	/**
	 * Sets the region ID of this e s f shooting director.
	 *
	 * @param regionId the region ID of this e s f shooting director
	 */
	public void setRegionId(String regionId);

	/**
	 * Returns the province ID of this e s f shooting director.
	 *
	 * @return the province ID of this e s f shooting director
	 */
	@AutoEscape
	public String getProvinceId();

	/**
	 * Sets the province ID of this e s f shooting director.
	 *
	 * @param provinceId the province ID of this e s f shooting director
	 */
	public void setProvinceId(String provinceId);

	/**
	 * Returns the flag crea of this e s f shooting director.
	 *
	 * @return the flag crea of this e s f shooting director
	 */
	@AutoEscape
	public String getFlagCrea();

	/**
	 * Sets the flag crea of this e s f shooting director.
	 *
	 * @param flagCrea the flag crea of this e s f shooting director
	 */
	public void setFlagCrea(String flagCrea);

	/**
	 * Returns the date var of this e s f shooting director.
	 *
	 * @return the date var of this e s f shooting director
	 */
	public Date getDateVar();

	/**
	 * Sets the date var of this e s f shooting director.
	 *
	 * @param DateVar the date var of this e s f shooting director
	 */
	public void setDateVar(Date DateVar);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(
		it.ethica.esf.model.ESFShootingDirector esfShootingDirector);

	@Override
	public int hashCode();

	@Override
	public CacheModel<it.ethica.esf.model.ESFShootingDirector> toCacheModel();

	@Override
	public it.ethica.esf.model.ESFShootingDirector toEscapedModel();

	@Override
	public it.ethica.esf.model.ESFShootingDirector toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}